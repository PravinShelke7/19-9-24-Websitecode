Imports Microsoft.VisualBasic
Imports System.Web.SessionState
Imports System.Data
Imports System.Data.OleDb
Imports System

Public Class E1GetData
    Public Class Selectdata

        Dim EconConnection As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
        Dim ShoppingConnection As String = System.Configuration.ConfigurationManager.AppSettings("ShoppingConnectionString")
#Region "TEST E3"
        Public Function GetPackSpecGrpDataWeightMonthlyDepN(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT D2,CASEID,PACKSPECGRPID,D1,D3,D4,D5,EFFDATE,USERID,D6,EFFDATE_1,D7,EFFDATE_2,D8,EFFDATE_3,D9,EFFDATE_4,D10,EFFDATE_5,D11,EFFDATE_6,D12,EFFDATE_7,D13,EFFDATE_8,D14,EFFDATE_9,D15,EFFDATE_10,D16,EFFDATE_11  FROM ("

                StrSql = StrSql + "SELECT 3 ID,'Total market price' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  "


                StrSql = StrSql + " UNION ALL "


                StrSql = StrSql + "SELECT 1 ID,'Raw Material Cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))   "

                StrSql = StrSql + " UNION ALL "


                StrSql = StrSql + "SELECT 2 ID,'Market Conversion cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))   "



                StrSql = StrSql + " ) order by  CASEID,ID ASC"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region
#Region "E3 PLMDep Grid"
        Public Function GetPackSpecGrpDataWeightQuarterlyDep(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim j As Integer = 4
            Try
                StrSql = "SELECT D2,CASEID,PACKSPECGRPID,D1,D3,D4,D5,USERID,D6,D7,D8  FROM ("

                StrSql = StrSql + "SELECT 3 ID,'Total market price' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.EFFDATE,A1.USERID "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next
                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  "


                StrSql = StrSql + " UNION ALL "
                StrSql = StrSql + "SELECT 2 ID,'Market Conversion cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.EFFDATE,A1.USERID "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next
                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  "

                StrSql = StrSql + " UNION ALL "
                StrSql = StrSql + "SELECT 1 ID,'Raw Material Cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.EFFDATE,A1.USERID "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  "

                StrSql = StrSql + " ) order by  CASEID,ID ASC"


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPackSpecGrpDataUNITQuarterlyDep(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim j As Integer = 4
            Try
                StrSql = "SELECT 'Revenue' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,A1.SUNITLBL D4,A1.EFFDATE,A1.USERID,A1.SUNITLBL "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID,SUNITLBL "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID,SUNITLBL "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) ORDER BY A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetPackSpecGrpDataWeightMonthlyDep(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT D2,CASEID,PACKSPECGRPID,D1,D3,D4,D5,EFFDATE,USERID,D6,EFFDATE_1,D7,EFFDATE_2,D8,EFFDATE_3,D9,EFFDATE_4,D10,EFFDATE_5,D11,EFFDATE_6,D12,EFFDATE_7,D13,EFFDATE_8,D14,EFFDATE_9,D15,EFFDATE_10,D16,EFFDATE_11  FROM ("

                StrSql = StrSql + "SELECT 3 ID,'Total market price' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  "


                StrSql = StrSql + " UNION ALL "


                StrSql = StrSql + "SELECT 1 ID,'Raw Material Cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((VMATERIAL*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))   "

                StrSql = StrSql + " UNION ALL "


                StrSql = StrSql + "SELECT 2 ID,'Market Conversion cost' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE EFFDATE_" + (i).ToString() + " "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,(((PMDEP+CONVERSION)*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))   "



                StrSql = StrSql + " ) order by  CASEID,ID ASC"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPackSpecGrpDataUNITMonthlyDep(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT 'Revenue' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,A1.SUNITLBL D4,A1.R1 D5,A1.EFFDATE,A1.USERID,A1.SUNITLBL "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID,SUNITLBL "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE, R1,USERID,SUNITLBL "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUEDEP,EFFDATE,((REVENUEDEP*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) ORDER BY A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region
#Region "E3 PLM Grid"
     Public Function GetPackSpecGrpDataWeightQuarterly(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim j As Integer = 4
            Try
                StrSql = "SELECT 'Revenue' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.EFFDATE,A1.USERID "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) ORDER BY A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPackSpecGrpDataUNITQuarterly(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim j As Integer = 4
            Try
                StrSql = "SELECT 'Revenue' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,A1.SUNITLBL D4,A1.EFFDATE,A1.USERID,A1.SUNITLBL "
                For i = 0 To dateCnt - 1
                    If (i Mod 3 = 0) Then
                        If i <= dateCnt Then
                            StrSql = StrSql + ",((A" + (i + 1).ToString() + ".R1 "
                        End If
                        If (i + 1) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 2).ToString() + ".R1 "
                        End If
                        If (i + 2) <= dateCnt Then
                            StrSql = StrSql + "+A" + (i + 3).ToString() + ".R1 "
                        End If
                        StrSql = StrSql + ")/3) D" + (j + 1).ToString() + " "
                        j = j + 1
                    End If

                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID,SUNITLBL "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID,SUNITLBL "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) ORDER BY A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetPackSpecGrpDataWeightMonthly(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT A1.TITLE D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,a1.TITLE8 D4,A1.R1 D5,A1.EFFDATE,A1.USERID "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE "
                Next
                StrSql = StrSql + "FROM (SELECT TITLE,CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID "
                StrSql = StrSql + "FROM (SELECT 'TOTAL' TITLE,PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                'SM STARTED
                'StrSql = StrSql + "UNION  "
                'StrSql = StrSql + "SELECT 'MATERIAL' TITLE,PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                'StrSql = StrSql + "FROM PREFERENCES Pref "
                'StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                'StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                'StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                'StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                'StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                'SM ENDED
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT TITLE,CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID "
                    StrSql = StrSql + "FROM (SELECT 'TOTAL' TITLE,PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    'SM STARTED
                    'StrSql = StrSql + "UNION "
                    'StrSql = StrSql + "SELECT 'MATERIAL' TITLE,PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(VOLUME*PREF.CONVWT)) R1,PC.USERID "
                    'StrSql = StrSql + "FROM PREFERENCES Pref "
                    'StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    'StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    'StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    'StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                    'StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    'SM ENDED
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " ))  order by  A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPackSpecGrpDataUNITMonthly(ByVal GrpId As String, ByVal Effdate() As String, ByVal dateCnt As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT 'Revenue' D2, A1.CASEID,A1.PACKSPECGRPID,a1.GRPDETAIL D1,A1.TITLE2 D3,A1.SUNITLBL D4,A1.R1 D5,A1.EFFDATE,A1.USERID,A1.SUNITLBL "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + ",A" + (i + 1).ToString() + ".R1 D" + (i + 5).ToString() + ",A" + (i + 1).ToString() + ".EFFDATE "
                Next
                StrSql = StrSql + "FROM (SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID,SUNITLBL "
                StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                StrSql = StrSql + "FROM PREFERENCES Pref "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(0).ToString() + "', 'mm/dd/yyyy') "
                StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                StrSql = StrSql + ")) A1 "
                For i = 1 To dateCnt - 1
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "(SELECT CASEID,PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE, R1,USERID,SUNITLBL "
                    StrSql = StrSql + "FROM (SELECT PREF.CASEID,PC.PACKSPECGRPID,GRPDETAIL,TITLE2,TITLE8,REVENUE,EFFDATE,((REVENUE*CURR)/(NVL((CASE  WHEN FINVOLMSI > 1 THEN (FINVOLMSI*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN (FINVOLMUNITS) END  END),0))) R1,PC.USERID,(CASE  WHEN FINVOLMSI > 1 THEN  PREF.TITLE3 ELSE CASE WHEN FINVOLMUNITS > 1 THEN 'units' END  END)SUNITLBL "
                    StrSql = StrSql + "FROM PREFERENCES Pref "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN RESULTSPL RS ON RS.CASEID=Pref.CASEID "
                    StrSql = StrSql + "INNER JOIN PACKSPECGROUP PG ON PG.PACKSPECGRPID =PC.PACKSPECGRPID "
                    StrSql = StrSql + "WHERE  Pref.EFFDATE = TO_DATE ('" + Effdate(i).ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND PC.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) "
                    StrSql = StrSql + ")) A" + (i + 1).ToString() + " "
                    StrSql = StrSql + "ON A" + (i + 1).ToString() + ".PACKSPECGRPID = A1.PACKSPECGRPID  "
                Next

                StrSql = StrSql + "WHERE A1.PACKSPECGRPID IN(" + GrpId.ToString() + ") AND A1.USERID IN (SELECT USERID FROM USERS WHERE LICENSEID IN (SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " )) ORDER BY A1.CASEID ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region
Public Function GetGrpByUserId(ByVal UserId As String) As String()
            Dim Dts As New DataSet()
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim GrpIDs() As String
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT SECONDARYLICENSEID FROM USERS WHERE USERID= " + UserId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                If Dts.Tables(0).Rows.Count > 0 Then
                    StrSql = "SELECT DISTINCT PACKSPECGRPID FROM PERMISSIONSCASES PC "
                    StrSql = StrSql + "INNER JOIN USERS U ON U.USERID=PC.USERID  "
                    StrSql = StrSql + "WHERE  U.LICENSEID IN ( SELECT SECONDARYLICENSEID FROM USERS WHERE  USERID=" + UserId.ToString() + " )  "
                    StrSql = StrSql + "AND  PACKSPECGRPID IS NOT NULL ORDER BY PACKSPECGRPID "
                End If

                Dim Cs As New DataTable()
                Cs = odbUtil.FillDataTable(StrSql, EconConnection)
                ReDim GrpIDs(Cs.Rows.Count - 1)
                For i = 0 To Cs.Rows.Count - 1
                    GrpIDs(i) = Cs.Rows(i).Item("PACKSPECGRPID").ToString()
                Next
                Return GrpIDs
            Catch ex As Exception
                Throw New Exception("E1GetData:GetGrpByUserId:" + ex.Message.ToString())
                Return GrpIDs
            End Try
        End Function


#Region "Impression calc"
        Public Function GetProfitAndLossDetails(ByVal CaseId As String, ByVal Isdep As Boolean) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim Pm As String = String.Empty
            Dim Revenue As String = String.Empty
            Dim Vm As String = String.Empty
            Try

                If Isdep Then
                    Pm = "PMDEP"
                    Revenue = "REVENUEDEP"
                    Vm = "VMDEP"
                Else
                    Pm = "PM"
                    Revenue = "REVENUE"
                    Vm = "VM"
                End If



                StrSql = "SELECT  "
                StrSql = StrSql + "'Revenue' AS PDES1, "
                StrSql = StrSql + "'Materials' AS PDES2, "
                StrSql = StrSql + "'Labor' AS PDES3, "
                StrSql = StrSql + "'Energy' AS PDES4, "
                StrSql = StrSql + "'Distribution Packaging' AS PDES5, "
                StrSql = StrSql + "'Shipping to Customer' AS PDES6, "
                StrSql = StrSql + "'Variable Margin' AS PDES7, "
                StrSql = StrSql + "'Office Supplies' AS PDES8, "
                StrSql = StrSql + "'Labor' AS PDES9, "
                StrSql = StrSql + "'Energy' AS PDES10, "
                StrSql = StrSql + "'Lease Cost' AS PDES11, "
                StrSql = StrSql + "'Insurance' AS PDES12, "
                StrSql = StrSql + "'Utilities' AS PDES13, "
                StrSql = StrSql + "'Communications' AS PDES14, "
                StrSql = StrSql + "'Travel' AS PDES15, "
                StrSql = StrSql + "'Maintenance Supplies' AS PDES16, "
                StrSql = StrSql + "'Minor Equipment' AS PDES17, "
                StrSql = StrSql + "'Outside Services'  AS PDES18, "
                StrSql = StrSql + "'Professional Services' AS PDES19, "
                StrSql = StrSql + "'Laboratory Supplies' AS PDES20, "
                StrSql = StrSql + "'Ink Supplies' AS PDES21, "
                StrSql = StrSql + "'Plate Supplies' AS PDES22, "
                StrSql = StrSql + "'Metal Supplies' AS PDES23, "
                StrSql = StrSql + "'Depreciation' AS PDES24, "
                StrSql = StrSql + "'Plant Margin' AS PDES25, "
                StrSql = StrSql + "" + Revenue + " AS PL1, "
                StrSql = StrSql + "VMATERIAL AS PL2, "
                StrSql = StrSql + "VLABOR AS PL3, "
                StrSql = StrSql + "VENERGY AS PL4, "
                StrSql = StrSql + "VPACK AS PL5, "
                StrSql = StrSql + "VSHIP AS PL6, "
                StrSql = StrSql + "" + Vm + " AS PL7, "
                StrSql = StrSql + "OFFICESUPPLIES AS PL8, "
                StrSql = StrSql + "PLABOR AS PL9, "
                StrSql = StrSql + "PENERGY AS PL10, "
                StrSql = StrSql + "LEASECOST AS PL11, "
                StrSql = StrSql + "INSURANCE AS PL12, "
                StrSql = StrSql + "UTILITIES AS PL13, "
                StrSql = StrSql + "COMMUN AS PL14, "
                StrSql = StrSql + "TRAVEL AS PL15, "
                StrSql = StrSql + "MAINT AS PL16, "
                StrSql = StrSql + "MINOR AS PL17, "
                StrSql = StrSql + "OUT  AS PL18, "
                StrSql = StrSql + "PROF AS PL19, "
                StrSql = StrSql + "LAB AS PL20, "
                StrSql = StrSql + "INKSUP AS PL21, "
                StrSql = StrSql + "PLATESUP AS PL22, "
                StrSql = StrSql + "METSUP AS PL23, "
                StrSql = StrSql + "DEP.DEPRECIATION AS PL24, "
                StrSql = StrSql + "" + Pm + " AS PL25, "
                StrSql = StrSql + "FINVOLMSI,"
                StrSql = StrSql + "FINVOLMUNITS,"
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "'units' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)SUNITLBL, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR)/FINVOLMUNITS "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "

                'start
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE2||'/'||PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + " PREF.TITLE2||'/1000 unit'"
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN1, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((Pref.CURR/PREF.CONVAREA)/(FINVOLMSI)) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(Pref.CURR/(FINVOLMUNITS/1000)) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT1, "
                'end

                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI*PREF.CONVAREA)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL, "
                StrSql = StrSql + "(VOLUME*PREF.CONVWT) SVOLUME, "
                StrSql = StrSql + "(CUST.M1*PREF.CURR/PREF.CONVWT) AS UNITPS, "
                StrSql = StrSql + "(UNITPRICE*PREF.CURR/PREF.CONVWT) AS UNITPP, "
                StrSql = StrSql + "UNITPRICE2 AS UNITPP2,"
                StrSql = StrSql + "UNITTYPE, "
                StrSql = StrSql + "PREF.CURR, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " CASE WHEN CUSSALESUNIT=0 THEN RESULTSPL.CUSSALESVOLUME*PREF.CONVWT "
                StrSql = StrSql + " ELSE (CASE  WHEN FINVOLMSI > 1 THEN (RESULTSPL.CUSSALESVOLUME*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN RESULTSPL.CUSSALESVOLUME END END)"
                StrSql = StrSql + " END AS CUSSALESVOLUME, "
                StrSql = StrSql + " CUSSALESUNIT, "
                StrSql = StrSql + " CUSSALESVOLUME CUSSALESVOLUME1 , "
StrSql = StrSql + " CASE  WHEN FINVOLMSI > 1 AND PRO.I1>0 AND PRO.I2>0  THEN (((FINVOLMSI*PREF.CONVAREA)/(PRO.I1* PREF.CONVTHICK*PRO.I2* PREF.CONVTHICK)) * 1000) ELSE 0 END IMPRESSION  "
 

                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "

                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN PRO "
                StrSql = StrSql + "ON PRO.CASEID=RESULTSPL.CASEID "

                StrSql = StrSql + "INNER JOIN CUSTOMERIN CUST "
                StrSql = StrSql + "ON CUST.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEP "
                StrSql = StrSql + "ON DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ") "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetProfitAndLossDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCostDetails(ByVal CaseId As String, ByVal Isdep As Boolean) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim fCost As String = String.Empty
            Dim tCost As String = String.Empty
            Try

                If Isdep Then
                    fCost = "FIXEDCOSTDEP"
                    tCost = "TOTALCOSTDEP"
                Else
                    fCost = "FIXEDCOST"
                    tCost = "TOTALCOST"
                End If



                StrSql = "SELECT  "
                StrSql = StrSql + "'Material Cost' AS PDES1, "
                StrSql = StrSql + "'Labor Cost' AS PDES2, "
                StrSql = StrSql + "'Energy Cost' AS PDES3, "
                StrSql = StrSql + "'Distribution Packaging Cost' AS PDES4, "
                StrSql = StrSql + "'Shipping Cost' AS PDES5, "
                StrSql = StrSql + "'Total Variable Cost' AS PDES6, "
                StrSql = StrSql + "'Office Supplies Cost' AS PDES7, "
                StrSql = StrSql + "'Labor Cost' AS PDES8, "
                StrSql = StrSql + "'Energy Cost' AS PDES9, "
                StrSql = StrSql + "'Lease Cost' AS PDES10, "
                StrSql = StrSql + "'Insurance Cost' AS PDES11, "
                StrSql = StrSql + "'Utilities Cost' AS PDES12, "
                StrSql = StrSql + "'Communications Cost' AS PDES13, "
                StrSql = StrSql + "'Travel Cost' AS PDES14, "
                StrSql = StrSql + "'Maintenance Supplies Cost' AS PDES15, "
                StrSql = StrSql + "'Minor Equipment Cost' AS PDES16, "
                StrSql = StrSql + "'Outside Services Cost' AS PDES17, "
                StrSql = StrSql + "'Professional Services Cost'  AS PDES18, "
                StrSql = StrSql + "'Laboratory Supplies Cost' AS PDES19, "
                StrSql = StrSql + "'Ink Supplies Cost' AS PDES20, "
                StrSql = StrSql + "'Plate Supplies Cost' AS PDES21, "
                StrSql = StrSql + "'Metal Supplies Cost' AS PDES22, "
                StrSql = StrSql + "'Depreciation' AS PDES23, "
                StrSql = StrSql + "'Total Fixed Cost' AS PDES24, "
                StrSql = StrSql + "'Total Cost' AS PDES25, "
                StrSql = StrSql + "VMATERIAL AS PL1, "
                StrSql = StrSql + "VLABOR AS PL2, "
                StrSql = StrSql + "VENERGY AS PL3, "
                StrSql = StrSql + "VPACK AS PL4, "
                StrSql = StrSql + "VSHIP AS PL5, "
                StrSql = StrSql + "VARIABLECOST AS PL6, "
                StrSql = StrSql + "OFFICESUPPLIES AS PL7, "
                StrSql = StrSql + "PLABOR AS PL8, "
                StrSql = StrSql + "PENERGY AS PL9, "
                StrSql = StrSql + "LEASECOST AS PL10, "
                StrSql = StrSql + "INSURANCE AS PL11, "
                StrSql = StrSql + "UTILITIES AS PL12, "
                StrSql = StrSql + "COMMUN AS PL13, "
                StrSql = StrSql + "TRAVEL AS PL14, "
                StrSql = StrSql + "MAINT AS PL15, "
                StrSql = StrSql + "MINOR AS PL16, "
                StrSql = StrSql + "OUT  AS PL17, "
                StrSql = StrSql + "PROF AS PL18, "
                StrSql = StrSql + "LAB AS PL19, "
                StrSql = StrSql + "INKSUP AS PL20, "
                StrSql = StrSql + "PLATESUP AS PL21, "
                StrSql = StrSql + "METSUP AS PL22, "
                StrSql = StrSql + "DEP.DEPRECIATION AS PL23, "
                StrSql = StrSql + "" + fCost + " AS PL24, "
                StrSql = StrSql + "" + tCost + " AS PL25, "
                StrSql = StrSql + "FINVOLMSI,"
                StrSql = StrSql + "FINVOLMUNITS,"
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "'units' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)SUNITLBL, "
                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR)/FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "

                'start
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE2||'/'||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + " PREF.TITLE2||'/1000 unit'"
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN1, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((Pref.CURR/PREF.CONVAREA)/(FINVOLMSI)) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(Pref.CURR/(FINVOLMUNITS/1000)) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT1, "
                'end


                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI*PREF.CONVAREA)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL, "
                StrSql = StrSql + "(VOLUME*PREF.CONVWT) SVOLUME, "
                StrSql = StrSql + "PREF.CURR, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " CASE WHEN CUSSALESUNIT=0 THEN RESULTSPL.CUSSALESVOLUME*PREF.CONVWT "
                StrSql = StrSql + " ELSE (CASE  WHEN FINVOLMSI > 1 THEN (RESULTSPL.CUSSALESVOLUME*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN RESULTSPL.CUSSALESVOLUME END END)"
                StrSql = StrSql + " END AS CUSSALESVOLUME, "
                StrSql = StrSql + " CUSSALESVOLUME CUSSALESVOLUME1, "
                StrSql = StrSql + " CUSSALESUNIT , "
                ' StrSql = StrSql + " RESULTSPL.IMPRESSION "
             StrSql = StrSql + " CASE  WHEN FINVOLMSI > 1 AND PRO.I1>0 AND PRO.I2>0  THEN (((FINVOLMSI*PREF.CONVAREA)/(PRO.I1* PREF.CONVTHICK*PRO.I2* PREF.CONVTHICK)) * 1000) ELSE 0 END IMPRESSION  "
                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN PRO "
                StrSql = StrSql + "ON PRO.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEP "
                StrSql = StrSql + "ON DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ")"




                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region
#Region "E3 new Result"
        Public Function GetRAPACKSPECGRP() As String()
            Dim CaseIDs() As String
            Dim i As New Integer
            Try

                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSqlCases As String = ""

                StrSqlCases = StrSqlCases + "SELECT PACKSPECGRPID FROM RAPACKSPECGRP "

                Dim Cs As New DataTable()
                Cs = odbUtil.FillDataTable(StrSqlCases, MyConnectionString)
                ReDim CaseIDs(Cs.Rows.Count - 1)
                For i = 0 To Cs.Rows.Count - 1
                    CaseIDs(i) = Cs.Rows(i).Item("PACKSPECGRPID").ToString()
                Next

                Return CaseIDs
            Catch ex As Exception
                Return CaseIDs
            End Try



        End Function
        Public Function GetResultWeightDetails(ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim Pm As String = String.Empty
            Dim Revenue As String = String.Empty
            Dim Vm As String = String.Empty

            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end

            Try

                StrSql = "SELECT  "
                StrSql = StrSql + "'Revenue' AS PDES1, "
                StrSql = StrSql + "'Raw Material Cost' AS PDES2, "
                StrSql = StrSql + "'Direct Materials' AS PDES3, "
                StrSql = StrSql + "'Descrete Materials' AS PDES4, "
                StrSql = StrSql + "'Waste' AS PDES5, "
                StrSql = StrSql + "'Conversion' AS PDES6, "
                StrSql = StrSql + "'Plant Margin' AS PDES7, "


                StrSql = StrSql + "REVENUE AS PL1, "
                StrSql = StrSql + "VMATERIAL*" + Curr.ToString() + " PL2, "
                StrSql = StrSql + " ((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*PREF.CURR) PL3, "
                StrSql = StrSql + "(DISCRETECOST*FINVOLMUNITS)*PREF.CURR PL4, "
                StrSql = StrSql + "((MATOUT.WASTE1+MATOUT.WASTE2+MATOUT.WASTE3+MATOUT.WASTE4+MATOUT.WASTE5+MATOUT.WASTE6+MATOUT.WASTE7+MATOUT.WASTE8+MATOUT.WASTE9+MATOUT.WASTE10)*PREF.CONVWT) PL5, "

                StrSql = StrSql + "CONVERSION*PREF.CURR PL6, "
                StrSql = StrSql + "PM PL7, "


                StrSql = StrSql + "FINVOLMSI,"
                StrSql = StrSql + "FINVOLMUNITS,"
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "'units' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)SUNITLBL, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR)/FINVOLMUNITS "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "

                'start
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE2||'/'||PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + " PREF.TITLE2||'/1000 unit'"
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN1, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((Pref.CURR/PREF.CONVAREA)/(FINVOLMSI)) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(Pref.CURR/(FINVOLMUNITS/1000)) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT1, "
                'end

                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI*PREF.CONVAREA)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL, "
                StrSql = StrSql + "(VOLUME*PREF.CONVWT) SVOLUME, "
                StrSql = StrSql + "(CUST.M1*PREF.CURR/PREF.CONVWT) AS UNITPS, "
                StrSql = StrSql + "(UNITPRICE*PREF.CURR/PREF.CONVWT) AS UNITPP, "
                StrSql = StrSql + "UNITPRICE2 AS UNITPP2,"
                StrSql = StrSql + "UNITTYPE, "
                StrSql = StrSql + "PREF.CURR, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " CASE WHEN CUSSALESUNIT=0 THEN RESULTSPL.CUSSALESVOLUME*PREF.CONVWT "
                StrSql = StrSql + " ELSE (CASE  WHEN FINVOLMSI > 1 THEN (RESULTSPL.CUSSALESVOLUME*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN RESULTSPL.CUSSALESVOLUME END END)"
                StrSql = StrSql + " END AS CUSSALESVOLUME, "
                StrSql = StrSql + " CUSSALESUNIT, "
                StrSql = StrSql + " CUSSALESVOLUME CUSSALESVOLUME1 "

                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=PREF.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=PREF.CASEID "
                StrSql = StrSql + "INNER JOIN CUSTOMERIN CUST "
                StrSql = StrSql + "ON CUST.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEP "
                StrSql = StrSql + "ON DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ") "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetLine_Item() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = " Select '1' ID, 'Revenue'  Line_Item from dual union all  select '2','Direct Materials' from dual"
                StrSql = StrSql + " union all Select '3' ID, 'Descrete Materials'  Line_Item from dual union all  select '4','Waste' from dual "
                StrSql = StrSql + " union all Select '5' ID, 'Conversion'  Line_Item from dual union all  select '6','Plant Margin' from dual "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPackSpecGrpById(ByVal GrpId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PACKSPECGRPID,GRPDETAIL "
                StrSql = StrSql + "FROM PACKSPECGROUP "
                StrSql = StrSql + "WHERE PACKSPECGRPID=" + GrpId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetLine_Item:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region


#Region "PLM"
        Public Function GetGroupName(ByVal GroupName As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PACKSPECGRPID,GRPDETAIL FROM PACKSPECGROUP "
                StrSql = StrSql + "WHERE UPPER(GRPDETAIL)='" + GroupName.ToString().ToUpper() + "'"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompanyName:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompanyName(ByVal CompanyName As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT COMPANYID,COMPANYNAME FROM COMPANY "
                StrSql = StrSql + "WHERE UPPER(COMPANYNAME)='" + CompanyName.ToString().ToUpper() + "'"
                Dts = odbUtil.FillDataSet(StrSql, ShoppingConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompanyName:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompanyLicense(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT COMPANYLICENSE.COMPANYID,COMPANYNAME FROM COMPANYLICENSE "
                StrSql = StrSql + "INNER JOIN COMPANY ON COMPANY.COMPANYID=COMPANYLICENSE.COMPANYID "
                StrSql = StrSql + "WHERE LICENSEID IN(SELECT LICENSEID FROM ECON.USERS WHERE USERID=" + UserId.ToString() + ")"

                Dts = odbUtil.FillDataSet(StrSql, ShoppingConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompanyLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPackSpecCompany(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT 0 COMPANYID, 'Nothing Selected' COMPANYNAME FROM DUAL  "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT COMPANY.COMPANYID, COMPANY.COMPANYNAME FROM COMPANYLICENSE  "
                StrSql = StrSql + "INNER JOIN SHOPPING.COMPANY "
                StrSql = StrSql + "ON COMPANY.COMPANYID=COMPANYLICENSE.COMPANYID "
                StrSql = StrSql + "WHERE LICENSEID IN ( SELECT LICENSEID FROM ECON.USERS WHERE USERID=" + UserID.ToString() + ") "

                Dts = odbUtil.FillDataSet(StrSql, ShoppingConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackSpecCompany:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPackSpecGroups(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = " SELECT 0 PACKSPECGRPID, 'Nothing Selected' GRPDETAIL FROM DUAL "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT DISTINCT PSGL.PACKSPECGRPID,GRPDETAIL FROM PACKSPECGRPLICENSE PSGL "
                StrSql = StrSql + "INNER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=PSGL.PACKSPECGRPID "
                StrSql = StrSql + "WHERE LICENSEID IN(SELECT LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackSpecGroups:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#Region "Cases Search"
        Public Function GetPropCases1(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                CaseIds = GetPropCaseStatus(UserId)

                StrSql = "SELECT "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + " A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,BTYPE,GSM,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE, UNIT "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",'' BTYPE,NULL GSM,'' UNIT  "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ", CASE WHEN M1.MATDE1 = 'Paperboard' THEN  M1.MATDE1 ||' '||  M1.MATDE2  ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1='Paperboard' THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                ' StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3,4,6) "

                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN M1.MATDE1 ||' '||  M1.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1 ='Paperboard'THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "

                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                StrSql = StrSql + "WHERE PERMISSIONSCASES.CaseId in(" + CaseIds + ") "
                'StrSql = StrSql + "AND UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "AND PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON  GC.GROUPID=A.GROUPID AND GC.CASEID=A.CASEID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON  G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BTYPE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR (GSM) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNIT),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCases1:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetGroupPCases1(ByVal UserId As String, ByVal Keyword As String, ByVal groupID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN,PREFERENCES.EFFDATE   "
                StrSql = StrSql + ",BTYPE,GSM,UNIT "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID, 'Select Case' CASEDES1 "
                StrSql = StrSql + ",'' btype,null gsm,'' UNIT "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ", CASE WHEN M1.MATDE1 = 'Paperboard' THEN M1.MATDE1 ||' '||  M1.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1 ='Paperboard'THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID "

                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + "AND PERMISSIONSCASES.CASEID IN(SELECT CASEID FROM ECON.GROUPCASES WHERE GROUPID=" + groupID + " ))A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID "
                'StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "
                StrSql = StrSql + "INNER JOIN GROUPS G ON G.GROUPID=GC.GROUPID AND G.USERID=" + UserId.ToString() + " "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BTYPE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GSM),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNIT),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),A.CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetGroupPCases1:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetPaperBoardCases(ByVal CaseDe1 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,M1,UPPER(CASEDE1) CASEDE1,UPPER(CASEDE2) CASEDE2,'PAPERBOARD' BType FROM( "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M1,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M1 AND MS.MATDE1='Paperboard'  "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M2,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M2 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M3,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M3 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M4,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M4 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M5,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M5 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M6,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M6 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M7,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M7 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M8,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M8 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M9,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M9 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT MI.CASEID,MO.M10,CASEDE1,CASEDE2,'PaperBoard' BType FROM MATERIALS MS INNER JOIN MATERIALINPUT MI ON MS.MATID=MI.M10 AND MS.MATDE1='Paperboard' "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID=MI.CASEID  "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID =MI.CASEID "
                StrSql = StrSql + ") "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BType),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPaperBoardCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "new queries cases search"
        Public Function GetPropCases(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                CaseIds = GetPropCaseStatus(UserId)

                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE  "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3,4,6) "

                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.CaseId in(" + CaseIds + ") "
                'StrSql = StrSql + "AND UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "AND PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "

                StrSql = StrSql + "OR NVL(UPPER(COMPANYNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GRPDETAIL),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(PRODUCTNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECTDET),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECGRP),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COUNTRYDES),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNITNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR TO_CHAR( EFFDATE, 'mm/dd/yyyy' ) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(FORMATDE1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CaseOwner),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(Status),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetGroupPCases(ByVal UserId As String, ByVal Keyword As String, ByVal groupID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN,EFFDATE   "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID, 'Select Case' CASEDES1 "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + "AND CASEID IN(SELECT CASEID FROM ECON.GROUPCASES WHERE GROUPID=" + groupID + " ))A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID "
                'StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "
                StrSql = StrSql + "INNER JOIN GROUPS G ON G.GROUPID=GC.GROUPID AND G.USERID=" + UserId.ToString() + " "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COMPANYNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GRPDETAIL),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                ' StrSql = StrSql + "OR NVL(UPPER(PRODUCTNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECTDET),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECGRP),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COUNTRYDES),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNITNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR TO_CHAR( EFFDATE, 'mm/dd/yyyy' ) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(FORMATDE1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CaseOwner),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(Status),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPropCasesByLicense(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE  "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "

                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "WHERE USERS.USERID=" + UserId.ToString() + " "

                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3,6) "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COMPANYNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GRPDETAIL),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(PRODUCTNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECTDET),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECGRP),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COUNTRYDES),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNITNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR TO_CHAR( EFFDATE, 'mm/dd/yyyy' ) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(FORMATDE1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CaseOwner),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(Status),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetAppCasesByLicense(ByVal UserId As String, ByVal keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE  "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "

                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "

                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID IN(3,6) "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "


                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COMPANYNAME),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GRPDETAIL),'#') LIKE '%" + keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(PRODUCTNAME),'#') LIKE '%" + keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECTDET),'#') LIKE '%" + keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECGRP),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COUNTRYDES),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNITNAME),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR TO_CHAR( EFFDATE, 'mm/dd/yyyy' ) LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(FORMATDE1),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CaseOwner),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(Status),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetApprovedCases(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT  "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + "A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE  "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "

                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID=3 "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COMPANYNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(GRPDETAIL),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(PRODUCTNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECTDET),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                'StrSql = StrSql + "OR NVL(UPPER(SPECGRP),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(COUNTRYDES),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNITNAME),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR TO_CHAR( EFFDATE, 'mm/dd/yyyy' ) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(FORMATDE1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CaseOwner),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(Status),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetAppCasesByLicense1(ByVal UserId As String, ByVal keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + " A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,BTYPE,GSM,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE, UNIT "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",'' BTYPE,NULL GSM,'' UNIT  "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ", CASE WHEN M1.MATDE1 = 'Paperboard' THEN  M1.MATDE1 ||' '||  M1.MATDE2  ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1='Paperboard' THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "
                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID IN(3,6) "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BTYPE),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR (GSM) LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNIT),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetApprovedCases1(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + " A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,BTYPE,GSM,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE, UNIT "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",'' BTYPE,NULL GSM,'' UNIT  "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ", CASE WHEN M1.MATDE1 = 'Paperboard' THEN  M1.MATDE1 ||' '||  M1.MATDE2  ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1='Paperboard' THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "

                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "

                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID IN(3) "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BTYPE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR (GSM) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNIT),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPropCasesByLicense1(ByVal UserId As String, ByVal Keyword As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT "
                StrSql = StrSql + "CASE WHEN G.DES1 IS NULL THEN 'No Group' "
                StrSql = StrSql + "ELSE G.DES1 END GNAME, "
                StrSql = StrSql + " A.CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,A.STATUSID,CaseOwner,CaseOwnerID,CASEDES1,BTYPE,GSM,COUNTRYDES,UNITNAME,(CASE WHEN FORMATDE1='None selected' THEN NULL ELSE FORMATDE1 END) FORMATDE,TO_CHAR(PREFERENCES.EFFDATE,'MM/DD/YYYY') EFFDATEN, EFFDATE, UNIT "
                StrSql = StrSql + ",A.PACKSPECGRPID,A.PACKSPECCMPNYID,COMPANYNAME,GRPDETAIL,A.GROUPID "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + ",'' BTYPE,NULL GSM,'' UNIT  "
                StrSql = StrSql + ",NULL PACKSPECGRPID,NULL PACKSPECCMPNYID,NULL GROUPID "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "

                StrSql = StrSql + ", CASE WHEN M1.MATDE1 = 'Paperboard' THEN  M1.MATDE1 ||' '||  M1.MATDE2  ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN M2.MATDE1 ||' '||  M2.MATDE2 ELSE   "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN M3.MATDE1 ||' '||  M3.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN M4.MATDE1 ||' '||  M4.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN M5.MATDE1 ||' '||  M5.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN M6.MATDE1 ||' '||  M6.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN M7.MATDE1 ||' '||  M7.MATDE2 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN M8.MATDE1 ||' '||  M8.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN M9.MATDE1 ||' '||  M9.MATDE2 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN M10.MATDE1 ||' '||  M10.MATDE2 ELSE '' end end end end end end end end end END BTPE, "

                StrSql = StrSql + "CASE WHEN M1.MATDE1='Paperboard' THEN round((MO.M1*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN round((MO.M2*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN round((MO.M3*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN round((MO.M4*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN round((MO.M5*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN round((MO.M6*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN round((MO.M7*PREF.CONVWT/PREF.CONVAREA),3) ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN round((MO.M8*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN round((MO.M9*PREF.CONVWT/PREF.CONVAREA),3) ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN round((MO.M10*PREF.CONVWT/PREF.CONVAREA),3) ELSE null end end end end end end end end end  END GSM "

                StrSql = StrSql + ",CASE WHEN M1.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M2.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M3.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M4.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M5.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M6.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M7.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE "
                StrSql = StrSql + "CASE WHEN M8.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M9.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE  "
                StrSql = StrSql + "CASE WHEN M10.MATDE1='Paperboard' THEN TITLE8 ||'/' ||TITLE3 ELSE '' end end end end end end end end end  END UNIT "

                StrSql = StrSql + ",PACKSPECGRPID,PACKSPECCMPNYID,G.GROUPID "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "FROM GROUPS G "
                StrSql = StrSql + "INNER JOIN GROUPCASES GC ON GC.GROUPID=G.GROUPID "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES ON PERMISSIONSCASES.CASEID=GC.CASEID AND PERMISSIONSCASES.USERID=G.USERID "

                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALINPUT MI ON MI.CASEID = PERMISSIONSCASES.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS M1 ON M1.MATID = MI.M1  "
                StrSql = StrSql + "INNER JOIN MATERIALS M2 ON M2.MATID = MI.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS M3 ON M3.MATID = MI.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS M4 ON M4.MATID = MI.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS M5 ON M5.MATID = MI.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS M6 ON M6.MATID = MI.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS M7 ON M7.MATID = MI.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS M8 ON M8.MATID = MI.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS M9 ON M9.MATID = MI.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS M10 ON M10.MATID = MI.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MO ON MO.CASEID=MI.CASEID "

                ' StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "WHERE USERS.USERID=" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3,6) "

                StrSql = StrSql + ") A "
                'StrSql = StrSql + "INNER JOIN PRODUCTSPEC B ON B.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES ON PREFERENCES.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES ON DIMCOUNTRIES.COUNTRYID=PREFERENCES.OCOUNTRY "
                StrSql = StrSql + "INNER JOIN COUNTRYUNIT ON COUNTRYUNIT.COUNTRYID=PREFERENCES.CURRENCY "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMAT ON PRODUCTFORMAT.FORMATID=PRODUCTFORMATIN.M1 "

                StrSql = StrSql + "LEFT OUTER JOIN GROUPCASES GC ON GC.CASEID=A.CASEID AND GC.GROUPID=A.GROUPID "
                StrSql = StrSql + "LEFT JOIN GROUPS G ON G.GROUPID=GC.GROUPID "

                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID=A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "

                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(CASEDE2),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(BTYPE),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR (GSM) LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(UNIT),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "OR NVL(UPPER(G.DES1),'#') LIKE '%" + Keyword.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCases1:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region

#End Region

Public Function GetDirectMaterialDetailsE3(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end
            Try
                StrSql = "SELECT  DISTINCT (MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "

                StrSql = StrSql + "(CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY') AS EFFDATE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "(CASE WHEN MAT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MAT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MAT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MAT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MAT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MAT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MAT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MAT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MAT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MAT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                'PT
                StrSql = StrSql + ",MATOUT.PRODZ1*" + Curr.ToString() + " PRODZ1 "
                StrSql = StrSql + ",MATOUT.PRODZ2*" + Curr.ToString() + " PRODZ2 "
                StrSql = StrSql + ",MATOUT.PRODZ3*" + Curr.ToString() + " PRODZ3 "
                StrSql = StrSql + ",MATOUT.PRODZ4*" + Curr.ToString() + " PRODZ4 "
                StrSql = StrSql + ",MATOUT.PRODZ5*" + Curr.ToString() + " PRODZ5 "
                StrSql = StrSql + ",MATOUT.PRODZ6*" + Curr.ToString() + " PRODZ6 "
                StrSql = StrSql + ",MATOUT.PRODZ7*" + Curr.ToString() + " PRODZ7 "
                StrSql = StrSql + ",MATOUT.PRODZ8*" + Curr.ToString() + " PRODZ8 "
                StrSql = StrSql + ",MATOUT.PRODZ9*" + Curr.ToString() + " PRODZ9 "
                StrSql = StrSql + ",MATOUT.PRODZ10*" + Curr.ToString() + " PRODZ10 "
                StrSql = StrSql + ",((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ")PRODZ11 "
                'DM
                StrSql = StrSql + ", 'Direct Materials' AS DES1, "
                StrSql = StrSql + "'Scrap' AS DES2, "
                StrSql = StrSql + "'Discrete Materials' AS DES3, "
                StrSql = StrSql + "'Raw Material Cost' AS DES4, "
                StrSql = StrSql + "'Market Conversion cost' AS DES5, "
                StrSql = StrSql + "'Margin' AS DES6, "
                StrSql = StrSql + "'Total market price' AS DES7, "
                StrSql = StrSql + " ((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ") col11, "
                StrSql = StrSql + "((MATOUT.WASTEZ1+MATOUT.WASTEZ2+MATOUT.WASTEZ3+MATOUT.WASTEZ4+MATOUT.WASTEZ5+MATOUT.WASTEZ6+MATOUT.WASTEZ7+MATOUT.WASTEZ8+MATOUT.WASTEZ9+MATOUT.WASTEZ10)*" + Curr.ToString() + ") col12, "
                StrSql = StrSql + "(DISCRETECOST*FINVOLMUNITS)*" + Curr.ToString() + " col13, "
                StrSql = StrSql + "VMATERIAL*" + Curr.ToString() + " col14, "
                StrSql = StrSql + "CONVERSION*" + Curr.ToString() + " COL15, "
                StrSql = StrSql + "PMDEP*" + Curr.ToString() + " col16, "
                StrSql = StrSql + "REVENUEDEP*" + Curr.ToString() + " col17,  "

                StrSql = StrSql + "PREF.CURR , "
                StrSql = StrSql + "RSPL.FINVOLMUNITS ,"
                StrSql = StrSql + "TOT.DISCRETECOST, "
                StrSql = StrSql + "MATDESC.DISID1, "
                StrSql = StrSql + "MATDESC.DISID2, "
                StrSql = StrSql + "MATDESC.DISID3, "

                StrSql = StrSql + "MATDESC.DISP1* PREF.CURR AS DISP1, "
                StrSql = StrSql + "MATDESC.DISP2* PREF.CURR AS DISP2, "
                StrSql = StrSql + "MATDESC.DISP3* PREF.CURR AS DISP3, "
                StrSql = StrSql + "RSPL.DISCRETETOTWT * PREF.CONVWT  DISCRETETOTWT , "
                StrSql = StrSql + "RSPL.DISCRETETOTCST* " + Curr.ToString() + "  DISCRETETOTCST "

                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "LEFT JOIN CREDITINPUT CI ON CI.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RSPL "
                StrSql = StrSql + "ON RSPL.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID = " + CaseId.ToString() + ""
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#Region "Approved Groups"

        Public Function GetGroupAppCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String, ByVal groupID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1 "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID, 'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND CASEID IN(SELECT CASEID FROM ECON.GROUPCASES WHERE GROUPID=" + groupID + " )) "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetApprovedGroupCaseDet(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim strSQL2 As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim cnt As Integer = 0
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dts = objGetData.GetApprovedGroupIDByUSer(UserID)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = objGetData.GetGroupCasesByUSer(Dts.Tables(0).Rows(i).Item("GROUPID").ToString())
                        If ds.Tables(0).Rows.Count > 0 Then
                            For j = 0 To ds.Tables(0).Rows.Count - 1
                                If j = 0 Then
                                    CaseIDs = ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + " " + ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = "0"
                        End If
                        If cnt = 0 Then
                            cnt += 1
                            'strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' || ' ,Cases:" + CaseIDs + "' AS GROUPDES,'" + CaseIDs + "' AS CASEIDS FROM DUAL "
                            strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '|| '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1, " '  FROM DUAL "
                            strSQL = strSQL + " " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#')) || '   '|| (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#'))  AS GROUPDES1 FROM DUAL "

                        Else
                            cnt += 1
                            strSQL = strSQL + "UNION ALL SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").Replace("'", "''").ToString() + "' ||  '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '||  '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1, " ' FROM DUAL "
                            strSQL = strSQL + " " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#')) || '   '|| (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#'))  AS GROUPDES1 FROM DUAL "

                        End If
                    Next
                    strSQL = "SELECT * FROM (" + strSQL + ") DUAL "
                End If
                strSQL2 = "SELECT 0 GROUPID,'' AS GROUPNAME,'All Groups and All Cases'  AS GROUPDES,'' AS CASEIDS,'' AS DES1,'' AS DES2,'' AS CDES1,'All Groups and All Cases'  AS GROUPDES1 FROM DUAL "
                If strSQL <> "" Then
                    strSQL2 = strSQL2 + " UNION ALL " + strSQL
                    strSQL2 = "SELECT GROUPID,GROUPNAME,GROUPDES,CASEIDS,DES1,DES2,CDES1,GROUPDES1 FROM (" + strSQL2 + " )ORDER BY UPPER(DES1),UPPER(DES2) "
                    DtRes = odbUtil.FillDataSet(strSQL2, MyConnectionString)
                Else
                    strSQL2 = strSQL2 + ""
                    DtRes = odbUtil.FillDataSet(strSQL2, MyConnectionString)
                End If
                Return DtRes
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetApprovedGroupIDByUSer(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT GROUPID,  "
                StrSql = StrSql + "DES1, "
                StrSql = StrSql + "DES2, "
                StrSql = StrSql + "GROUPS.USERID, "
                StrSql = StrSql + "CREATIONDATE, "
                StrSql = StrSql + "UPDATEDATE "
                '  StrSql = StrSql + "FROM GROUPS WHERE USERID= " + UserID + " AND STATUSID=3 "
                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=GROUPS.USERID "
                StrSql = StrSql + "WHERE USERS.LICENSEID In (Select USERS.LICENSEID FROM USERS WHERE USERID=" + UserID.ToString() + ") AND GROUPS.STATUSID=3 "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetAllAppGroupDetails(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + "  AND STATUSID=3 "
                strSQL = strSQL + "AND SERVICEID IS NULL "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " AND ECON.GROUPCASES.STATUSID=3 "
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CASEID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "USR.UserName, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(GPS.CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN GPS.CREATIONDATE-GPS.UPDATEDATE =0 THEN 'NA' ELSE to_char(GPS.UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS GPS "
                        strSQL = strSQL + "INNER JOIN ECON.USERS USR "
                        strSQL = strSQL + "ON  USR.USERID=GPS.USERID "
                        strSQL = strSQL + "WHERE GPS.USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " AND GPS.STATUSID=3"
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next

                    strSqlOutPut = "SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 AND STATUSID=3"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetAllAppCompGroupDetails(ByVal UserID As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + "  AND STATUSID=3 "
                strSQL = strSQL + "AND SERVICEID IN (" + ServiceId + ")"
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " AND ECON.GROUPCASES.STATUSID=3 "
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CASEID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "USR.UserName, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(GPS.CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN GPS.CREATIONDATE-GPS.UPDATEDATE =0 THEN 'NA' ELSE to_char(GPS.UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS GPS "
                        strSQL = strSQL + "INNER JOIN ECON.USERS USR "
                        strSQL = strSQL + "ON  USR.USERID=GPS.USERID "
                        strSQL = strSQL + "WHERE GPS.USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " AND GPS.STATUSID=3 "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next

                    strSqlOutPut = "SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 AND  AND STATUSID=3 "
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetApprovedGroupDetails(ByVal UserID As String, ByVal flag As Char) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE STATUSID=3 AND USERID= " + UserID + " "
                strSQL = strSQL + "AND SERVICEID IS NULL "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE STATUSID=3 AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CaseID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS "
                        strSQL = strSQL + "WHERE STATUSID=3 AND USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next
                    If flag = "Y" Then ' Y FOR GROUPDEATILS PAGE ,N FOR EDITGROUPS PAGE
                        strSQL = "SELECT 0 GROUPID,  "
                        strSQL = strSQL + "'None'  GROUPNAME, "
                        strSQL = strSQL + "'NA' CaseID, "
                        strSQL = strSQL + "'NA'  GROUPDES, "
                        strSQL = strSQL + "'0:None'  CDES1, "
                        strSQL = strSQL + "'NA'  CREATIONDATE, "
                        strSQL = strSQL + "'NA'  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "DUAL "
                        strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                    End If
                    strSqlOutPut = " SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 "
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetApprovedCompGroupDetails(ByVal UserID As String, ByVal flag As Char, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + " AND STATUSID=3 "
                strSQL = strSQL + "AND SERVICEID IN (" + ServiceId + ") "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE STATUSID=3 AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CaseID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS "
                        strSQL = strSQL + "WHERE STATUSID=3 AND USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next
                    If flag = "Y" Then ' Y FOR GROUPDEATILS PAGE ,N FOR EDITGROUPS PAGE
                        strSQL = "SELECT 0 GROUPID,  "
                        strSQL = strSQL + "'None'  GROUPNAME, "
                        strSQL = strSQL + "'NA' CaseID, "
                        strSQL = strSQL + "'NA'  GROUPDES, "
                        strSQL = strSQL + "'0:None'  CDES1, "
                        strSQL = strSQL + "'NA'  CREATIONDATE, "
                        strSQL = strSQL + "'NA'  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "DUAL "
                        strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                    End If
                    strSqlOutPut = " SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 AND STATUSID=3 "
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function

        Public Function GetApprovedCaseStatus(ByVal UserId As String) As String
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Dim ds As New DataSet()
            Dim i As Integer = 0
            Dim cnt As Integer = 0
            Try
                StrSql = StrSql + "SELECT CASEID "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "WHERE STATUSID=4 AND USERID=" + UserId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = GetPropDisAppStatus(UserId, Dts.Tables(0).Rows(i).Item("CaseId").ToString())
                        If ds.Tables(0).Rows.Count = 0 Then
                            If cnt = 0 Then
                                CaseIds = Dts.Tables(0).Rows(0).Item("CaseId").ToString()
                            Else
                                CaseIds = CaseIds + "," + Dts.Tables(0).Rows(i).Item("CaseId").ToString()
                            End If
                            cnt += 1
                        Else
                            CaseIds = "0"
                        End If
                    Next

                Else
                    CaseIds = "0"
                End If
                Return CaseIds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetApprovedCaseStatus:" + ex.Message.ToString())
                Return CaseIds
            End Try
        End Function
        Public Function ValidateApprovedGroupName(ByVal Des1 As String, ByVal Des2 As String, ByVal USERID As String, ByVal Comp As String) As DataSet
            Dim odButil As New DBUtil()
            Dim strsql As String = String.Empty
            Dim Dts As New DataSet
            Dim GROUPID As String = ""
            Dim i As Integer = 0
            Try
                'Getting GROUPID from Sequence
                strsql = String.Empty
                strsql = strsql + "SELECT 1 "
                strsql = strsql + "FROM "
                strsql = strsql + "GROUPS "
                strsql = strsql + "WHERE "
                strsql = strsql + "USERID=" + USERID + " "
                strsql = strsql + "AND UPPER(DES1)='" + Des1.ToUpper() + "' AND GROUPS.STATUSID=3 "
                strsql = strsql + "AND "
                If Des2 = "" Then
                    strsql = strsql + "DES2 IS NULL "
                Else
                    strsql = strsql + "UPPER(DES2)='" + Des2.ToUpper() + "' "
                End If
                If Comp = "COMP" Or Comp = "COMPS1" Then
                    strsql = strsql + "AND SERVICEID IS NOT NULL "
                Else
                    strsql = strsql + "AND SERVICEID IS NULL "
                End If
                Dts = odButil.FillDataSet(strsql, EconConnection)
                Return Dts
            Catch ex As Exception
                Return Dts
                Throw New Exception("E1GetData:ValidateGroupName:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetApprovedCaseGrpDetails(ByVal UserID As String, ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "

                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "

                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "


                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " " 'And GROUPS.STATUSID=3 And GROUPCASES.STATUSID=3 And PC.STATUSID=3  "
                StrSql = StrSql + "And PC.SERVICEID Is NULL  "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                StrSql = StrSql + " ) "

                StrSql = StrSql + "WHERE UPPER(CASEDE1) Like '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetApprovedCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetApprovedCompCaseGrpDetails(ByVal UserID As String, ByVal keyWord As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "

                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "

                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "


                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                ' StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " " 'AND GROUPS.STATUSID=3 AND GROUPCASES.STATUSID=3  AND PC.STATUSID=3 "
                StrSql = StrSql + "AND PC.SERVICEID=" + ServiceId + " "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                StrSql = StrSql + " ) "

                StrSql = StrSql + "WHERE UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetApprovedCompCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetApprovedCaseGrpDetailsBem(ByVal UserID As String, ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                'CaseIds = GetApprovedCaseStatus(UserID)

                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "
                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "
                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "
                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                ' StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " "
                StrSql = StrSql + "AND NVL(PC.STATUSID,0)  IN(3) "

                'StrSql = StrSql + "UNION ALL "

                'StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                'StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                'StrSql = StrSql + "PC.CASEID, "
                'StrSql = StrSql + "PC.CASEDE1, "
                'StrSql = StrSql + "PC.CASEDE2, "
                'StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "
                'StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "
                'StrSql = StrSql + " PC.CREATIONDATE, "
                'StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "
                'StrSql = StrSql + "FROM GROUPS "
                'StrSql = StrSql + "INNER JOIN GROUPCASES "
                'StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                'StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                'StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                'StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                ''StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                'StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " " 'And GROUPS.STATUSID=3 And GROUPCASES.STATUSID=3 "
                'StrSql = StrSql + "And PC.CASEID In(" + CaseIds + ") "

                StrSql = StrSql + " ) "

                StrSql = StrSql + "WHERE UPPER(CASEDE1) Like '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

Public Function GetEquipmentGroups() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = " SELECT EQUIPGROUPID,EQUIPGROUPNAME FROM EQUIPGROUP"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentGroups:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEquipmentGroups(ByVal caseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = " SELECT EQUIPGROUPID,EQUIPGROUPNAME FROM EQUIPGROUP EG "
                StrSql = StrSql + "INNER JOIN PRODEQUIPGROUP PEG ON PEG.GROUPID=EG.EQUIPGROUPID INNER JOIN PRODUCTFORMATIN PF ON PF.M1=PEG.FORMATID "
                StrSql = StrSql + "WHERE CASEID=" + caseId + " ORDER BY EQUIPGROUPID ASC"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentGroups:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

Public Function GetEquipmentColumns(ByVal groupId As Integer) As DataSet
            Dim dts As New DataSet
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT EQUIPCOLNAME FROM EQUIPCOLUMNS WHERE EQUIPGROUPID=" + groupId.ToString() + " ORDER BY SEQNUMBER"

                dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentColumns:" + ex.Message.ToString())
                Return dts
            End Try
        End Function

Public Function GetEquipmentGroupId(ByVal groupDes As String) As Integer
            Dim Id As Integer = 0
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT EQUIPGROUPID FROM EQUIPGROUP WHERE lower(EQUIPGROUPNAME)='" + groupDes + "'"

                Id = odbUtil.FillData(StrSql, EconConnection)
                Return Id
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentGroupId:" + ex.Message.ToString())
                Return Id
            End Try
        End Function

Public Function GetEquipmentId_6Dec23(ByVal groupId As Integer, ByVal equipDes As String) As DataSet
            Dim dts As New DataSet
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT EQUIPMENTID FROM EQUIPGROUPDETAILS EGD "
                StrSql = StrSql + "INNER JOIN EQUIPDETAIL ED ON EGD.EQUIPMENTID=ED.EQUIPID  WHERE GROUPID=" + groupId.ToString() + " "
                If equipDes <> "" Then
                    StrSql = StrSql + " And LOWER(DETAILS) Like '%" + equipDes.ToLower() + "%' "
                    StrSql = StrSql + "      UNION ALL "
                    StrSql = StrSql + " SELECT  DISTINCT EQUIPMENTID  FROM EQUIPGROUPDETAILS EGD INNER JOIN EQUIPDETAIL ED ON EGD.EQUIPMENTID=ED.EQUIPID"
                    StrSql = StrSql + "  WHERE GROUPID=" + groupId.ToString() + "  AND "
                    StrSql = StrSql + "  EGD.EQUIPMENTID   Like '%" + equipDes.ToLower() + "%' "
                End If
                StrSql = StrSql + "ORDER BY EQUIPMENTID"

                dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentId:" + ex.Message.ToString())
                Return dts
            End Try
        End Function

Public Function GetEquipmentId(ByVal groupId As Integer, ByVal equipDes As String) As DataSet
            Dim dts As New DataSet
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
               StrSql = "SELECT DISTINCT EQUIPMENTID FROM EQUIPGROUPDETAILS EGD "
                StrSql = StrSql + "INNER JOIN EQUIPDETAIL ED ON EGD.EQUIPMENTID=ED.EQUIPID  WHERE GROUPID=" + groupId.ToString() + " "
                If equipDes <> "" Then
                    StrSql = StrSql + " And LOWER(DETAILS) Like '%" + equipDes.ToLower() + "%' "
                    StrSql = StrSql + "      UNION ALL "
                    StrSql = StrSql + " SELECT  DISTINCT EQUIPMENTID  FROM EQUIPGROUPDETAILS EGD INNER JOIN EQUIPDETAIL ED ON EGD.EQUIPMENTID=ED.EQUIPID"
                    StrSql = StrSql + "  WHERE GROUPID=" + groupId.ToString() + "  AND "
                    StrSql = StrSql + "  EGD.EQUIPMENTID   Like '%" + equipDes.ToLower() + "%' "
                End If
                If equipDes.ToString() = "0" Or equipDes.ToString() = "" Then
                    StrSql = StrSql + " UNION  SELECT 0 EQUIPMENTID FROM DUAL  "
                ElseIf equipDes.Length > 0 Then
                    Dim des As String = "nothing selected"
                    Dim flag As Boolean = False
                    For i = 0 To equipDes.Length - 1                       
                        If des.ToString().ToLower().Chars(i) = equipDes.ToString().ToLower().Chars(i) Then
                            flag = True
                        Else
                            flag = False
                            Exit For
                        End If
                    Next
                    If flag = True Then
                        StrSql = StrSql + " UNION  SELECT 0 EQUIPMENTID FROM DUAL  "
                    End If
                End If
                StrSql = StrSql + "ORDER BY EQUIPMENTID"

                dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentId:" + ex.Message.ToString())
                Return dts
            End Try
        End Function

Public Function GetEquipmentList(ByVal groupId As Integer, ByVal equipDes As String, ByVal EquipId As String, ByVal CaseID As String) As DataSet
            Dim dts As New DataSet
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT ED.EQUIPID,ED.EQUIPCOLUMNSID,EC.EQUIPCOLNAME,ED.DETAILS,EC.SEQNUMBER,UE.EQUIPDES FROM EQUIPDETAIL ED INNER JOIN EQUIPGROUPDETAILS EGD ON EGD.EQUIPMENTID=ED.EQUIPID "
                StrSql = StrSql + "INNER JOIN EQUIPCOLUMNS EC ON EC.EQUIPGROUPID=EGD.GROUPID AND EC.EQUIPCOLUMNSID=ED.EQUIPCOLUMNSID "
                StrSql = StrSql + "LEFT JOIN USERSEQUIPMENT UE ON UE.EQUIPID=ED.EQUIPID AND CASEID=" + CaseID + " "
                StrSql = StrSql + "WHERE EGD.GROUPID=" + groupId.ToString() + " "
                StrSql = StrSql + "AND EGD.EQUIPMENTID IN (" + EquipId + ") "
                'If equipDes <> "" Then
                '    StrSql = StrSql + "AND LOWER(DETAILS) LIKE '%" + equipDes.ToLower() + "%' "
                'End If
                StrSql = StrSql + "ORDER BY EQUIPID,SEQNUMBER,EQUIPCOLUMNSID"

                dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentList:" + ex.Message.ToString())
                Return dts
            End Try
        End Function

#Region "Equipment Assistant 3-8-23"

        Public Function GetPressWidth(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try
                strSql = "SELECT PRESSWIDTHID,LAYER,VALUE,ISDEFAULT,ISSELECT FROM PRESSWIDTH "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PRESSWIDTHID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWCylinder(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWCYLINDERID,TYPE,LAYER,VALUE,ISDEFAULT,EFFDATE,ISSELECT FROM PWCYLINDER "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWCYLINDERID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWCylinder:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWCylinderType(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWCYLINDER "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY TYPEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWCylinderType:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWColor(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWCOLORID,TYPE,LAYER,VALUE,ISDEFAULT,ISSELECT FROM PWCOLOR "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWCOLORID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWColor:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWColorType(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWCOLOR "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY TYPEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWColorType:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunParameters(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNPARAMID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWRUNPARAM "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWRUNPARAMID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRunParameters:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunParametersT(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWRUNPARAM "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY TYPEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetJobSeqDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunRate(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNRATEID,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE,ISVISIBLE FROM PWRUNRATE "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWRUNRATEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRunRate:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetJobSeqDetails(ByVal CaseId As String, ByVal EqId As String, ByVal RowNumber As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DESGDESC,RSIZEVAL,COLVAL,CYLVAL,SEQVAL,SETUPVAL FROM EQUIPJOBSEQ "
                strSql = strSql + "WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " AND ROWNUMBER=" + RowNumber + " ORDER BY SEQVAL"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetJobSeqDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunWaste(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNWASTEID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWRUNWASTE "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWRUNWASTEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRunWaste:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunWasteT(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWRUNWASTE "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY TYPEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRunWasteT:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRegistrationTime(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWREGTIMEID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE,ISVISIBLE FROM PWREGTIME "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWREGTIMEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRegistrationTime:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRegistrationTimeT(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWREGTIME "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY TYPEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetRegistrationTimeT:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetMaintTime(ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWMAINTTIMEID,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWMAINTTIME "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY PWMAINTTIMEID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMaintTime:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPrefferedColumn(ByVal EqId As String, ByVal type As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT COLUMNNAME,TITLE,UNIT,COLUMNVALUE,ISDEFAULT,ISSELECT FROM PREFFEREDCOLUMN "
                strSql = strSql + "WHERE EQUIPMENTID=" + EqId + " AND TYPE='" + type + "' ORDER BY PREFFEREDCOLUMNID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetJobSeqDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetJobResultTime(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,SEQVAL,DESGDESC,RUNNET,RUNGROSS,PREFERRED,REGTIME,MAINTIME,COLVAL,CYLVAL,"
                StrSql = StrSql + "SERIALVAL,PARALLELVAL,SETUPVAL,TOTALTIME FROM JOBRESULTTIME WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " ORDER BY SEQVAL ASC"
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetJobResultTime:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetResultTotal(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,RUNTOTAL,GROSSTOTAL,REGTOTAL,MAINTOTAL,COLVALTOTAL,CYLVALTOTAL,"
                StrSql = StrSql + "SERIALVALTOTAL,PARALLELVALTOTAL,SETUPVALTOTAL,TOTALTIME,GOODPRODTOTAL,GROSSPRODTOTAL,PROCWASTETOTAL,"
                StrSql = StrSql + "REGWASTETOTAL,TOTALMAT FROM OPRESULTTOTAL WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " "
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetResultTotal:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetJobResultMat(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,SEQVAL,DESGDESC,GOODPROD,GROSSPROD,"
                StrSql = StrSql + "PROCWASTE,REGWASTE,TOTALWASTE FROM JOBRESULTMAT WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " ORDER BY SEQVAL ASC"
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetJobResultMat:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetTimeSummary(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,SETUPDTIME,REGDTIME,MAINTDTIME,GROSSPRTIME,REGWASTERTIME,TOTALTIME1,"
                StrSql = StrSql + "SETUPDTIMEP,REGDTIMEP,MAINTDTIMEP,GROSSPRTIMEP,REGWASTERTIMEP,TOTALTIMEP1,SETUPDTIMEY,REGDTIMEY,"
                StrSql = StrSql + "MAINTDTIMEY,GROSSPRTIMEY,REGWASTERTIMEY,TOTALTIMEY1,TOTREGDTIME,TOTMAINTDTIME,TOTWASTERTIME,"
                StrSql = StrSql + "TOTALTIME2,TOTREGDTIMEP,TOTMAINTDTIMEP,TOTWASTERTIMEP,TOTALTIMEP2,TOTREGDTIMEY,TOTMAINTDTIMEY,"
                StrSql = StrSql + "TOTWASTERTIMEY,TOTALTIMEY2 FROM TIMESUMMARY WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " "
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetTimeSummary:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetMatSummary(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,PROCWASTE,REGWASTE,GOODPROD,TOTALFOOTAGE,PROCWASTEP,REGWASTEP,GOODPRODP,"
                StrSql = StrSql + "TOTALFOOTAGEP,PROCWASTEY,REGWASTEY,GOODPRODY,TOTALFOOTAGEY FROM MATSUMMARY "
                StrSql = StrSql + "WHERE CASEID =" + CaseId + " AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " "
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetMatSummary:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetSetupSummary(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim StrSql As String = String.Empty
            Dim odButil As New DBUtil()
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT CASEID,EQUIPMENTID,ROWNUMBER,JOB,COLVAL,CYLVAL,JOBY,COLVALY,CYLVALY "
                StrSql = StrSql + "FROM SETUPSUMMARY "
                StrSql = StrSql + "WHERE CASEID =" + CaseId + " AND EQUIPMENTID =" + EqId + " AND ROWNUMBER =" + LayerId + " "
                ds = odButil.FillDataSet(StrSql, EconConnection)
                Return ds

            Catch ex As Exception
                Throw New Exception("UpdateInsert:GetSetupSummary:-" + ex.Message.ToString())
            End Try
        End Function

        Public Function GetAssistPrefDetails(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,TO_CHAR(EFFDATE,'MM/DD/YYYY') EFFDATE,RPARAMPREF,RRATEPREF,RWASTEPREF,JOBRESPREF,RTIMEPREF,MTIMEPREF, "
                strSql = strSql + "CYCLEPMIN,PIECEPMIN FROM EQASSISTCASEPREF WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " AND ROWNUMBER =" + LayerId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssistPrefDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetAssistPrefDetailsold(ByVal CaseId As String, ByVal EqId As String, ByVal LayerId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,TO_CHAR(EFFDATE,'MM/DD/YYYY') EFFDATE,RPARAMPREF,RRATEPREF,RWASTEPREF,JOBRESPREF,RTIMEPREF,MTIMEPREF "
                strSql = strSql + "FROM EQASSISTCASEPREF WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " AND ROWNUMBER =" + LayerId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssistPrefDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetEquipmentUnit(ByVal EqId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT EQUIPDE1,EQUIPDE2,UNITS,UNITS2 FROM EQUIPMENT "
                strSql = strSql + "WHERE EQUIPID=" + EqId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentUnit:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

#End Region
#Region "Result"
       Public Function GetResultDetails(ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end
            Try

                StrSql = "SELECT  "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " 'Direct Materials' AS DES1, "
                StrSql = StrSql + "'Scrap' AS DES2, "
                StrSql = StrSql + "'Discrete Materials' AS DES3, "
                StrSql = StrSql + "'Raw Material Cost' AS DES4, "
                StrSql = StrSql + "'Market Conversion cost' AS DES5, "
                StrSql = StrSql + "'' AS DES6, "
                StrSql = StrSql + "'Total market price' AS DES7, "
                StrSql = StrSql + " ((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ") col11, "
                StrSql = StrSql + "((MATOUT.WASTEZ1+MATOUT.WASTEZ2+MATOUT.WASTEZ3+MATOUT.WASTEZ4+MATOUT.WASTEZ5+MATOUT.WASTEZ6+MATOUT.WASTEZ7+MATOUT.WASTEZ8+MATOUT.WASTEZ9+MATOUT.WASTEZ10)*" + Curr.ToString() + ") col12, "
                'StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")col13, "
                StrSql = StrSql + "(DISCRETECOST*FINVOLMUNITS)*" + Curr.ToString() + " col13, "
                StrSql = StrSql + "VMATERIAL*" + Curr.ToString() + " col14, "
                StrSql = StrSql + "CONVERSION*" + Curr.ToString() + " COL15, "
                StrSql = StrSql + "PMDEP*" + Curr.ToString() + " col16, "
                StrSql = StrSql + "REVENUEDEP*" + Curr.ToString() + " col17,  "
                StrSql = StrSql + "null col21, "
                StrSql = StrSql + "null col22, "
                StrSql = StrSql + "null col23, "
                StrSql = StrSql + "null col24, "
                StrSql = StrSql + "'Conversion' col25, "
                StrSql = StrSql + "'Margin' col26, "
                StrSql = StrSql + "null col27,  "
                StrSql = StrSql + "null col31, "
                StrSql = StrSql + "null col32, "
                StrSql = StrSql + "null col33, "
                StrSql = StrSql + "null col34, "
                StrSql = StrSql + "null col35, "
                StrSql = StrSql + "null col36, "
                StrSql = StrSql + "null col37, "
                StrSql = StrSql + "(MATOUT.P1+MATOUT.P2+MATOUT.P3+MATOUT.P4+MATOUT.P5+MATOUT.P6+MATOUT.P7+MATOUT.P8+MATOUT.P9+MATOUT.P10) COL41, "
                'StrSql = StrSql + "null COL41, "
                StrSql = StrSql + "null COL42, "
                StrSql = StrSql + "null COL43, "
                StrSql = StrSql + "null COL44, "
                StrSql = StrSql + "null COL45, "
                StrSql = StrSql + "null COL46, "
                StrSql = StrSql + "null COL47, "
                StrSql = StrSql + "((TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)*PREF.CONVWT5) COL51, "
                'StrSql = StrSql + "null COL51, "
                StrSql = StrSql + "null COL52, "
                StrSql = StrSql + "null COL53, "
                StrSql = StrSql + "null COL54, "
                StrSql = StrSql + "null COL55, "
                StrSql = StrSql + "null COL56, "
                StrSql = StrSql + "null COL57, "
                StrSql = StrSql + "null COL61, "
                StrSql = StrSql + "null COL62, "
                StrSql = StrSql + "null COL63, "
                StrSql = StrSql + "null COL64, "
                StrSql = StrSql + "null COL65, "
                StrSql = StrSql + "null COL66, "
                StrSql = StrSql + "null COL67, "
                StrSql = StrSql + "((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ")COL71, "
                StrSql = StrSql + "((MATOUT.WASTEZ1+MATOUT.WASTEZ2+MATOUT.WASTEZ3+MATOUT.WASTEZ4+MATOUT.WASTEZ5+MATOUT.WASTEZ6+MATOUT.WASTEZ7+MATOUT.WASTEZ8+MATOUT.WASTEZ9+MATOUT.WASTEZ10)*" + Curr.ToString() + ")COL72, "
                'StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")COL73, "
                StrSql = StrSql + "(DISCRETECOST*FINVOLMUNITS)*" + Curr.ToString() + " COL73, "
                StrSql = StrSql + "VMATERIAL*" + Curr.ToString() + " COL74, "
                StrSql = StrSql + "(TOTALCOSTDEP-VMATERIAL)*" + Curr.ToString() + " COL75, "
                StrSql = StrSql + "PMDEP*" + Curr.ToString() + " COL76, "
                StrSql = StrSql + "REVENUEDEP*" + Curr.ToString() + " COL77, "
                StrSql = StrSql + "((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ")COL81, "
                StrSql = StrSql + "((MATOUT.WASTEZ1+MATOUT.WASTEZ2+MATOUT.WASTEZ3+MATOUT.WASTEZ4+MATOUT.WASTEZ5+MATOUT.WASTEZ6+MATOUT.WASTEZ7+MATOUT.WASTEZ8+MATOUT.WASTEZ9+MATOUT.WASTEZ10)*" + Curr.ToString() + ")COL82, "
                'StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")COL83, "
                StrSql = StrSql + "(DISCRETECOST*FINVOLMUNITS)*" + Curr.ToString() + " COL83, "
                StrSql = StrSql + "VMATERIAL*" + Curr.ToString() + " COL84, "
                StrSql = StrSql + "(TOTALCOSTDEP-VMATERIAL)*" + Curr.ToString() + " COL85, "
                StrSql = StrSql + "PMDEP*" + Curr.ToString() + " COL86, "
                StrSql = StrSql + "REVENUEDEP*" + Curr.ToString() + " COL87 "

                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=PREF.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MATOUT.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ") "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region

#Region "MATERIAL RESULT"
        Public Function GetCreditInputCase(ByVal CASEID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT CASEID FROM CREDITINPUT WHERE CASEID=" + CASEID.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetFixedCostArch:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region
#Region "SisCase approve"
        Public Function GetCaseIdSister(ByVal Schema As String, ByVal CaseId As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil()
            Dim CaseIds As String = String.Empty
            Dim con As String = ""
            Dim EconConnection As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try
                If Schema = "E1" Then
                    con = EconConnection
                End If
                StrSql = "SELECT SISTERCASEID FROM PERMISSIONSCASES  WHERE  "
                StrSql = StrSql + "CASEID = " + CaseId + " "

                Dts = odbUtil.FillDataSet(StrSql, con)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCaseIdSister:" + ex.Message.ToString())
            End Try
        End Function
#End Region

#Region "Fixed Cost"

        Public Function GetFixedCostArch() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT FCA.FIXEDCOSTID,VALUE,EFFDATE,COUNTRYID,CATEGORYDES,RULE FROM FIXEDCOSTARCH FCA INNER JOIN FIXEDCOST FC ON FC.FIXEDCOSTID=FCA.FIXEDCOSTID"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetFixedCostArch:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region

#Region "Approval Module Admin 2022"
        Public Function GetModelDetails(ByVal UserName As String, ByVal schema As String) As DataSet
            Dim Dts As New DataSet()
            Dim strSQL As String = String.Empty
            Dim odbUtil As New DBUtil
            Dim con As String = ""
            Try
                If schema = "E1" Or schema = "S1" Then
                    con = EconConnection
                    'ElseIf schema = "E2" Or schema = "S2" Then
                    '    con = Econ2Con
                    'ElseIf schema = "Echem" Or schema = "Schem" Then 'Bug #375
                    '    con = EchemConn
                    'ElseIf schema = "EDist" Or schema = "SDist" Then
                    '    con = EDistConn
                End If

                strSQL = "select 'All Cases' As Details,'0' As Id from Dual"
                strSQL = strSQL + " Union "
                strSQL = strSQL + "select 'Used For Approved Cases' As Details,'2' As Id from Dual"
                strSQL = strSQL + " Union "
                strSQL = strSQL + "select 'Approved Cases' As Details,'3' As Id from Dual"
                strSQL = strSQL + " Union "
                strSQL = strSQL + "select 'Submitted for Approval Cases' As Details,'1' As Id from Dual"
                strSQL = strSQL + " Union "
                strSQL = strSQL + "select 'Disapproved Cases' As Details,'4' As Id from Dual"
                strSQL = strSQL + " Union "
                strSQL = strSQL + "select 'Sister Case' As Details,'5' As Id from Dual"

                Dts = odbUtil.FillDataSet(strSQL, con)
            Catch ex As Exception

            End Try

            Return Dts

        End Function
        Public Function GetStatusSisById(ByVal Schema As String, ByVal CaseId As String, ByVal userID As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil
            Dim CaseIds As String = String.Empty
            Dim con As String = ""
            Dim EconConn As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            'Dim SustainConn As String = System.Configuration.ConfigurationManager.ConnectionStrings("SustainConn").ConnectionString.ToString()
            'Dim Econ2Con As String = System.Configuration.ConfigurationManager.ConnectionStrings("Econ2Conn").ConnectionString.ToString()
            'Dim Sustain2Conn As String = System.Configuration.ConfigurationManager.ConnectionStrings("Sustain2Conn").ConnectionString.ToString()
            Try
                If Schema = "E1" Then
                    con = EconConn
                    'ElseIf Schema = "S1" Then
                    '    con = SustainConn
                    'ElseIf Schema = "E2" Then
                    '    con = Econ2Con
                    'ElseIf Schema = "S2" Then
                    '    con = Sustain2Conn
                End If
                StrSql = "SELECT CASEID FROM STATUSUPDATE WHERE "
                StrSql = StrSql + "CASEID = " + CaseId + " AND USERID=" + userID.ToString() + " AND UPPER(STATUS)='SISTER CASE'  OR  UPPER(STATUS)='SISTERCASE' ORDER BY DATED ASC"

                Dts = odbUtil.FillDataSet(StrSql, con)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetStatusSisById:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetStatusById(ByVal Schema As String, ByVal CaseId As String, ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil
            Dim CaseIds As String = String.Empty
            Dim con As String = ""
            Dim EconConn As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            'Dim SustainConn As String = System.Configuration.ConfigurationManager.ConnectionStrings("SustainConn").ConnectionString.ToString()
            'Dim Econ2Con As String = System.Configuration.ConfigurationManager.ConnectionStrings("Econ2Conn").ConnectionString.ToString()
            'Dim Sustain2Conn As String = System.Configuration.ConfigurationManager.ConnectionStrings("Sustain2Conn").ConnectionString.ToString()
            Try
                If Schema = "E1" Then
                    con = EconConn
                    'ElseIf Schema = "S1" Then
                    '    con = SustainConn
                    'ElseIf Schema = "E2" Then
                    '    con = Econ2Con
                    'ElseIf Schema = "S2" Then
                    '    con = Sustain2Conn
                End If
                StrSql = "SELECT CASEID FROM STATUSUPDATE WHERE "
                StrSql = StrSql + "CASEID = " + CaseId + " AND USERID=" + UserID + " AND UPPER(STATUS)='APPROVED' ORDER BY DATED ASC"

                Dts = odbUtil.FillDataSet(StrSql, con)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetStatusById:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetBemisCaseCount() As DataSet
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Try
                Dim StrSql As String = String.Empty
                StrSql = "SELECT ID,  "
                StrSql = StrSql + "CODE, "
                StrSql = StrSql + "COUNT "
                StrSql = StrSql + "FROM BEMISCASECOUNT"
                Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw ex
            End Try
        End Function

        Public Function GetLicenseCasesDesBemis(ByVal AdminUserName As String, ByVal UserId As String, ByVal schema As String, ByVal keyWord As String, ByVal GroupID As String) As DataSet
            Dim Ds As New DataSet()
            Dim con As String = String.Empty
            Dim tbl As String = String.Empty
            Dim odbUtil As New DBUtil()
            Try
                Dim StrSql As String = String.Empty
                If schema = "E1" Or schema = "S1" Then
                    tbl = "ECON"
                ElseIf schema = "E2" Or schema = "S2" Then
                    tbl = "ECON2"
                End If
                StrSql = "SELECT  DISTINCT   "
                StrSql = StrSql + "USERNAME, "
                StrSql = StrSql + "CASEID, "
                StrSql = StrSql + "STATUS, "
                StrSql = StrSql + "USERID, "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + " ID, "
                StrSql = StrSql + "CASEDE3, "
                StrSql = StrSql + "CASEDES , "
                StrSql = StrSql + "SACCESS, "
                StrSql = StrSql + "PRODUCTDES, "
                StrSql = StrSql + "GROUPID, "
                StrSql = StrSql + " GROUPNAME, "
                StrSql = StrSql + " CREATIONDATE, "
                StrSql = StrSql + " nvl(SERVERDATE,'NA') SERVERDATE,STATUSID"
                StrSql = StrSql + " FROM "
                StrSql = StrSql + "(SELECT "
                StrSql = StrSql + "(USERS.USERNAME)USERNAME, MS.STATUS,"
                StrSql = StrSql + "PR.CASEID, "
                StrSql = StrSql + "USERS.USERID, "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "(USERS.USERID||'-'||PR.CASEID) ID, "
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3, "
                StrSql = StrSql + "(PR.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2 )CASEDES , "
                StrSql = StrSql + "CASE WHEN COUNTS > 1 THEN 'Yes' ELSE 'No' END SACCESS, "
                StrSql = StrSql + "(PRODUCTFORMAT.FORMATDE1 || ' ' || PRODUCTFORMAT.FORMATDE2)PRODUCTDES, "
                StrSql = StrSql + "NVL(GRPS.GROUPID,0) GROUPID, "
                StrSql = StrSql + "NVL (GRPS.DES1,'NA') GROUPNAME, "
                StrSql = StrSql + " PR.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PR.CREATIONDATE-PR.SERVERDATE =0 THEN null ELSE to_char(PR.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE,PR.STATUSID "

                StrSql = StrSql + "FROM PERMISSIONSCASES  PR "
                StrSql = StrSql + "LEFT OUTER JOIN ECON.MODSTATUS MS ON PR.STATUSID=MS.STATUSID "
                StrSql = StrSql + "INNER JOIN ECON.USERS "
                StrSql = StrSql + "ON USERS.USERID=PR.USERID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=PR.CASEID "
                StrSql = StrSql + "INNER JOIN " + tbl + ".PRODUCTFORMAT ON PRODUCTFORMATIN.M1=PRODUCTFORMAT.FORMATID "
                StrSql = StrSql + "INNER JOIN (SELECT CASEID,COUNT(DISTINCT (USERID)) COUNTS  FROM PERMISSIONSCASES GROUP BY CASEID )  SHARECASE ON SHARECASE.CASEID=PR.CASEID "

                StrSql = StrSql + "LEFT OUTER JOIN ( "
                StrSql = StrSql + "SELECT GROUPS.GROUPID,GROUPS.DES1 ,GROUPCASES.CASEID ,GROUPS.USERID "
                StrSql = StrSql + "FROM " + tbl + ".GROUPS "
                StrSql = StrSql + "INNER JOIN " + tbl + ".GROUPCASES ON GROUPS.GROUPID=GROUPCASES.GROUPID "
                StrSql = StrSql + "INNER JOIN ECON.USERS ON USERS.USERID=GROUPS.USERID "
                StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PRR ON PRR.CASEID=GROUPCASES.CASEID AND PRR.USERID=USERS.USERID "
                StrSql = StrSql + ") GRPS ON GRPS.CASEID=PR.CASEID and grps.userid=users.userid "
                StrSql = StrSql + " WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM ECON.USERS WHERE UPPER(USERNAME)='" + AdminUserName.ToUpper() + "') "
                If GroupID <> "0" Then 'Bug #414                   
                    StrSql = StrSql + "AND PR.STATUSID = " + GroupID + " "
                Else
                    StrSql = StrSql + "AND NVL(PR.STATUSID,0) NOT IN(0)"
                End If
                StrSql = StrSql + ") "

                StrSql = StrSql + "WHERE "
                StrSql = StrSql + "UPPER(USERNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(PRODUCTDES) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(SACCESS) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(STATUS) LIKE '%" + keyWord.ToUpper().Trim() + "%' "

                StrSql = StrSql + "ORDER BY CASEID ASC,UPPER(USERNAME) ASC "

                If schema = "E1" Then
                    con = EconConnection
                    'ElseIf schema = "E2" Then
                    '    con = Econ2Con
                    'ElseIf schema = "S1" Then
                    '    con = SustainConn
                    'ElseIf schema = "S2" Then
                    '    con = Sustain2Conn
                End If


                Ds = odbUtil.FillDataSet(StrSql, con)
                Return Ds
            Catch ex As Exception
                Throw ex
            End Try
        End Function

#End Region

#Region "Equipment Label Changes"

         Public Function GetPopUpEquipment(ByVal EQId As Integer, ByVal EqDe1 As String, ByVal EqlDe2 As String, ByVal CaseID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                'StrSql = "SELECT DISTINCT EQ.EQUIPID, (EQ.EQUIPDE1||'  '||EQ.EQUIPDE2)EQUIPDES,EQ.EQUIPDE1,EQ.EQUIPDE2 , EQUIPDES ELabel "
                'StrSql = StrSql + "FROM EQUIPMENT EQ  "
                'StrSql = StrSql + " LEFT JOIN USERSEQUIPMENT UE ON UE.EQUIPID=EQ.EQUIPID AND UE.CASEID=" + CaseID.ToString() + ""
                'StrSql = StrSql + "WHERE EQ.EQUIPID = CASE WHEN -1  = -1 THEN EQ.EQUIPID ELSE -1 End AND NVL(UPPER(EQ.EQUIPDE1),'#') LIKE '%" + EqDe1.ToUpper() + "%' AND NVL(UPPER(EQ.EQUIPDE2),'#') LIKE '%" + EqlDe2.ToUpper() + "%' ORDER BY EQUIPDE1 "
                StrSql = "SELECT DISTINCT EQ.EQUIPID, (EQ.EQUIPDE1||'  '||EQ.EQUIPDE2)EQUIPDES,EQ.EQUIPDE1,EQ.EQUIPDE2 ,B.ELabel,B.ELabel1, " ',GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MAT.SG   "
                StrSql = StrSql + "CASE P.UNITS  WHEN 0 THEN EQ.UNITS  ELSE EQ.UNITS2 END AS EUNIT "
                StrSql = StrSql + "FROM EQUIPMENT EQ "
                StrSql = StrSql + " INNER JOIN PREFERENCES P ON CASEID=" + CaseID + " "
                StrSql = StrSql + "LEFT JOIN (SELECT EQUIPMENT.EQUIPID, (EQUIPDE1||'  '||EQUIPDE2)EQUIPDES,EQUIPDE1,EQUIPDE2,EQUIPDES ELabel,REPLACE(EQUIPDES,'''','&#')ELabel1 " ',GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MATERIALS.SG  "
                StrSql = StrSql + "FROM(EQUIPMENT)"                
                StrSql = StrSql + "LEFT JOIN USERSEQUIPMENT UE ON UE.EQUIPID=EQUIPMENT.EQUIPID  "
                StrSql = StrSql + "WHERE EQUIPMENT.EQUIPID = CASE WHEN " + EQId.ToString() + "  = -1 THEN "
                StrSql = StrSql + "EQUIPMENT.EQUIPID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + EQId.ToString() + " "
                StrSql = StrSql + "  End "
                StrSql = StrSql + "AND UE.CASEID=" + CaseID + ")B ON B.EQUIPID=EQ.EQUIPID "
                StrSql = StrSql + "WHERE EQ.EQUIPID = CASE WHEN " + EQId.ToString() + "  = -1 THEN "
                StrSql = StrSql + "EQ.EQUIPID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + EQId.ToString() + " "
                StrSql = StrSql + "End "
                StrSql = StrSql + "AND NVL(UPPER(EQ.EQUIPDE1),'#') LIKE '" + EqDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(EQ.EQUIPDE2),'#') LIKE '" + EqlDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY EQUIPDE1 "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPopUpEquipment:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetEditEquip(ByVal CaseId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,REPLACE(EQUIPDES,'''','&#')EQUIPDES "
                strSql = strSql + "FROM USERSEQUIPMENT WHERE CASEID=" + CaseId

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEditEquip:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
#End Region

 Public Function GetCountries() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                'StrSql = " SELECT CON.COUNTRYID, COUNTRYDES"
                'StrSql = StrSql + " FROM ADMINSITE.DIMCOUNTRIES CON"
                'StrSql = StrSql + " INNER JOIN"
                'StrSql = StrSql + " COUNTRY"
                'StrSql = StrSql + " ON COUNTRY.COUNTRYDE1 = CON.COUNTRYDES"
                'StrSql = StrSql + " WHERE CON.COUNTRYID = CASE WHEN -1 = -1 THEN CON.COUNTRYID ELSE 0  END"
                'StrSql = StrSql + " ORDER BY COUNTRYDES"

                 StrSql = "SELECT COUNTRYID,COUNTRYDES COUNTRYDE1 FROM ADMINSITE.DIMCOUNTRIES WHERE ISSAVVY='Y' "
                StrSql = StrSql + " ORDER BY COUNTRYDES"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCountries:" + ex.Message.ToString())
                Return Dts
            End Try

        End Function

#Region "Equipment Assistant"

	Public Function GetEquipmentDetails(ByVal EquipId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT EQUIPID,EQUIPDE1,(EQUIPDE1 ||' ' || EQUIPDE2 )EQUIPDE2 FROM EQUIPMENT WHERE EQUIPID=" + EquipId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEqAssistEffDateDetails() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                ' strSql = "SELECT DISTINCT TO_CHAR(EFFDATE,'MM/DD/YYYY')EFFDATE FROM PRESSWIDTH ORDER BY EFFDATE DESC"
                strSql = "SELECT DISTINCT TO_CHAR(TO_DATE('6/1/2023','MM/DD/YYYY'),'MM/DD/YYYY')EFFDATE FROM DUAL ORDER BY EFFDATE DESC"
                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackagingAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
        Public Function GetEqCaseDetails(ByVal CaseId As String, ByVal EqId As String, ByVal EffDate As String, ByVal RowNumber As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT EQACDETAILSID,CASEID,EQUIPID,EFFDATE,PRINTGCASEDETID,PGCOMPONENTID,SELVALUE FROM EQASSISTCASEDETAILS AC "
                strSql = strSql + "INNER JOIN PRINTGCASEDETAILS SC ON SC.VALUEID=AC.VALUEID "
                strSql = strSql + "WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " AND ROWNUMBER=" + RowNumber + " "
                strSql = strSql + "AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY')"
                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackagingAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetEqCaseDetailsold(ByVal CaseId As String, ByVal EqId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT EQACDETAILSID,CASEID,EQUIPID,EFFDATE,PRINTGCASEDETID,PGCOMPONENTID,SELVALUE FROM EQASSISTCASEDETAILS AC "
                strSql = strSql + "INNER JOIN PRINTGCASEDETAILS SC ON SC.VALUEID=AC.VALUEID "
                strSql = strSql + "WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY')"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackagingAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPressWidth() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PRESSWIDTHID,LAYER,VALUE,ISDEFAULT FROM PRESSWIDTH ORDER BY PRESSWIDTHID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWCylinder() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWCYLINDERID,TYPE,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWCYLINDER ORDER BY PWCYLINDERID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWCylinder:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWCylinderType() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWCYLINDER ORDER BY TYPEID "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWCylinderType:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWColor() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWCOLORID,TYPE,LAYER,VALUE,ISDEFAULT FROM PWCOLOR ORDER BY PWCOLORID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWColor:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPWColorType() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWCOLOR ORDER BY TYPEID "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPWColorType:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunParameters() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNPARAMID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWRUNPARAM ORDER BY PWRUNPARAMID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetJobSeqDetails() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWRUNPARAM ORDER BY TYPEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunWaste() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNWASTEID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWRUNWASTE ORDER BY PWRUNWASTEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunWasteT() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWRUNWASTE ORDER BY TYPEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRegistrationTime() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWREGTIMEID,TYPE,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWREGTIME ORDER BY PWREGTIMEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRegistrationTimeT() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TYPE,TYPEID FROM PWREGTIME ORDER BY TYPEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetRunRate() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWRUNRATEID,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWRUNRATE ORDER BY PWRUNRATEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetMaintTime() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT PWMAINTTIMEID,DESCRIPTION,LAYER,VALUE,ISDEFAULT,EFFDATE FROM PWMAINTTIME ORDER BY PWMAINTTIMEID"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetJobSeqDetails(ByVal CaseId As String, ByVal EqId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DESGDESC,RSIZEVAL,COLVAL,CYLVAL,SEQVAL FROM EQUIPJOBSEQ "
                strSql = strSql + "WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " ORDER BY SEQVAL"
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
        Public Function GetJobSeqPrefDetailsold(ByVal CaseId As String, ByVal EqId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,TO_DATE(EFFDATE,'MM/DD/YYYY'),M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16,M17,M18,M19,M20,M21,M22,M23,M24,M25,M26,M27,M28,M29,M30, "
                strSql = strSql + "M31,M32,M33,M34,M35,M36,M37,M38,M39,M40,M41,M42,M43,M44,M45,M46,M47,M48,M49,M50 FROM EQASSISTJOBSPREF WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetJobSeqPrefDetails(ByVal CaseId As String, ByVal EqId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,TO_DATE(EFFDATE,'MM/DD/YYYY'),M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16,M17,M18,M19,M20,M21,M22,M23,M24,M25,M26,M27,M28,M29,M30, "
                strSql = strSql + "M31,M32,M33,M34,M35,M36,M37,M38,M39,M40,M41,M42,M43,M44,M45,M46,M47,M48,M49,M50,M51,M52,M53,M54,M55,M56,M57,M58,M59,M60,M61,M62,M63,M64,M65,M66,M67,M68,M69,M70 FROM EQASSISTJOBSPREF WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetJobSeqPrefDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetAssistPrefDetails(ByVal CaseId As String, ByVal EqId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,EQUIPID,TO_CHAR(EFFDATE,'MM/DD/YYYY') EFFDATE,RPARAMPREF,RRATEPREF,RWASTEPREF,RTIMEPREF,MTIMEPREF "
                strSql = strSql + "FROM EQASSISTCASEPREF WHERE CASEID=" + CaseId + " AND EQUIPID=" + EqId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPressWidth:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetHoursDetails(ByVal CaseId As String, ByVal LayerId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT M" + LayerId + " HRVAL FROM OPMAXRUNHRS "
                strSql = strSql + "WHERE CASEID=" + CaseId + " "
                'strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetHoursDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
#End Region
#Region "UserDetails" 
        Public Function GetUserDetails(ByVal Id As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT USERS.USERID,  "
                StrSql = StrSql + "UPPER(USERNAME)USERNAME, "
                StrSql = StrSql + "USERNAME AS TOOLUSERNAME, "

                'Checking for License Administrator
                StrSql = StrSql + "NVL(USERS.ISIADMINLICUSR,'N')ISIADMINLICUSR,"
                StrSql = StrSql + "USERS.LICENSEID,"
                StrSql = StrSql + "SERVICES.SERVICEID,"
                StrSql = StrSql + "SERVICES.SERVICEDE, "
                StrSql = StrSql + "USERPERMISSIONS.USERROLE AS SERVIECROLE, "
                StrSql = StrSql + "USERPERMISSIONS.MAXCASECOUNT, "
                StrSql = StrSql + "(CASE WHEN NVL(USERS.ISINTERNALUSR,'N') ='Y' THEN "
                StrSql = StrSql + "'AADMIN' "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "'USER' "
                StrSql = StrSql + "END)USERROLE "
                StrSql = StrSql + "FROM ULOGIN "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON UPPER(USERS.USERNAME) = UPPER(ULOGIN.UNAME) "
                StrSql = StrSql + "AND UPPER(USERS.PASSWORD) = UPPER(ULOGIN.UPWD) "
                StrSql = StrSql + "INNER JOIN USERPERMISSIONS "
                StrSql = StrSql + "ON USERPERMISSIONS.USERID = USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES "
                StrSql = StrSql + "ON SERVICES.SERVICEID = USERPERMISSIONS.SERVICEID "
                StrSql = StrSql + "WHERE ULOGIN.ID = " + Id.ToString() + " "
                StrSql = StrSql + "AND SERVICES.SERVICEDE='ECON1' "


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetUserCompanyUsers(ByVal UserName As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  USERS.USERID,  "
                StrSql = StrSql + "USERS.USERNAME "
                StrSql = StrSql + "FROM USERS "
                StrSql = StrSql + "INNER JOIN USERPERMISSIONS "
                StrSql = StrSql + "ON USERPERMISSIONS.USERID= USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES "
                StrSql = StrSql + "ON SERVICES.SERVICEID = USERPERMISSIONS.SERVICEID "
                StrSql = StrSql + "WHERE USERS.LICENSEID=(SELECT LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper.ToString() + "') "
                StrSql = StrSql + "AND SERVICES.SERVICEDE IN ('ECON1','ECON2','SUSTAIN1','SUSTAIN2') "
                StrSql = StrSql + "AND UPPER(USERPERMISSIONS.USERROLE)='READWRITE' "
                StrSql = StrSql + "GROUP BY USERS.USERID,USERS.USERNAME "
                StrSql = StrSql + "ORDER BY USERS.USERNAME "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetUserCompanyUsers:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetTotalCaseCount(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT COUNT(*) AS TOTALCOUNT FROM PERMISSIONSCASES  "
                StrSql = StrSql + "WHERE USERID=" + UserId.ToString() + " "
                'StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UNAME.ToString().ToUpper() + "' "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetTotalCaseCount:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetSelectedUserDetails(ByVal UserId As String, ByVal Schema As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT USERPERMISSIONS.MaxCaseCount FROM USERPERMISSIONS INNER JOIN USERS ON USERS.USERID= USERPERMISSIONS.USERID  "
                StrSql = StrSql + "INNER JOIN SERVICES ON SERVICES.SERVICEID=USERPERMISSIONS.SERVICEID "
                'StrSql = StrSql + "WHERE UPPER(USERS.USERNAME)='" + usreName.ToUpper() + "' AND SERVICES.SERVICEDE='" + Schema + "' "
                StrSql = StrSql + "WHERE USERS.USERID=" + UserId.ToString() + " AND SERVICES.SERVICEDE='" + Schema + "' "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSelectedUserDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Supporting Assumptions Pages"
        Public Function GetBCaseDetails() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID,CASEDE1,CASEDE2,CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES FROM BASECASES "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPCaseDetails(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,CASEDE1,CASEDE2,CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES FROM PERMISSIONSCASES "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCaseDetails(ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT A.CASEID,CASEDE1,(CASEDE1||' ' ||CASEDE2)CASEDES,CASEDE3,CASEDE2,CASETYPE,COUNTRYDES ,STATUSID,A.PACKSPECGRPID,GRPDETAIL ,A.PACKSPECCMPNYID ,COMPANYNAME "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT  CASEID,CASEDE1,CASEDE2,CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,'Base Case' CASETYPE, 0 STATUSID, NULL PACKSPECGRPID, NULL PACKSPECCMPNYID FROM BASECASES "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT DISTINCT CASEID,CASEDE1,CASEDE2,CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,'Proprietary Case' CASETYPE,STATUSID,PACKSPECGRPID,PACKSPECCMPNYID FROM PERMISSIONSCASES "
                StrSql = StrSql + ") "
                StrSql = StrSql + "A INNER JOIN PREFERENCES P ON P.CASEID=A.CASEID "
                StrSql = StrSql + "INNER JOIN ADMINSITE.DIMCOUNTRIES DC ON DC.COUNTRYID =P.OCOUNTRY "
                StrSql = StrSql + "LEFT OUTER JOIN PACKSPECGROUP PSG ON PSG.PACKSPECGRPID =A.PACKSPECGRPID "
                StrSql = StrSql + "LEFT OUTER JOIN SHOPPING.COMPANY C ON C.COMPANYID=A.PACKSPECCMPNYID "
                StrSql = StrSql + "WHERE A.CASEID =" + CaseId.ToString() + " "
                StrSql = StrSql + "ORDER BY A.CASEID "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCaseDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetBCases(ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM BASECASES "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetMaterials(ByVal MatId As Integer, ByVal MatDe1 As String, ByVal MatDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                'StrSql = "SELECT MATID, (MATDE1||'  '||MATDE2)MATDES,MATDE1,MATDE2  "
                'StrSql = StrSql + "FROM MATERIALS "
                'StrSql = StrSql + "WHERE MATID = CASE WHEN " + MatId.ToString() + " = -1 THEN "
                'StrSql = StrSql + "MATID "
                'StrSql = StrSql + "ELSE "
                'StrSql = StrSql + "" + MatId.ToString() + " "
                'StrSql = StrSql + "END "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE2),'#') LIKE '" + MatDe2.ToUpper() + "%' "
                'StrSql = StrSql + "ORDER BY  MATDE1"
                StrSql = "SELECT MATERIALS.MATID, (MATDE1||'  '||MATDE2)MATDES,MATDE1,MATDE2,GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MATERIALS.SG  "
                StrSql = StrSql + "FROM MATERIALS "
                StrSql = StrSql + "INNER JOIN MATGRADE MG ON MG.MATID=MATERIALS.MATID  "
                StrSql = StrSql + "INNER JOIN GRADE ON GRADE.GRADEID=MG.GRADEID AND GRADE.ISDEFAULT='Y' "
                StrSql = StrSql + "WHERE MATERIALS.MATID = CASE WHEN " + MatId.ToString() + " = -1 THEN "
                StrSql = StrSql + "MATERIALS.MATID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + MatId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(MATDE1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(MATDE2),'#') LIKE '" + MatDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  MATDE1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetDiscMaterials(ByVal MatDisId As Integer, ByVal MatDe1 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select matDISid, matDISde1  "
                StrSql = StrSql + "FROM MaterialDIS "
                StrSql = StrSql + "WHERE matDISid = CASE WHEN " + MatDisId.ToString() + " = -1 THEN "
                StrSql = StrSql + "matDISid "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + MatDisId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(matDISde1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  matDISde1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetProductFormt(ByVal FormtId As Integer, ByVal FormtDe1 As String, ByVal FormtDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  FormatID,  "
                StrSql = StrSql + "(FormatDe1 || ' ' ||  FormatDe2) FormatDes, "
                StrSql = StrSql + "FormatDe1, "
                StrSql = StrSql + "FormatDe2 "
                StrSql = StrSql + "FROM PRODUCTFORMAT "
                StrSql = StrSql + "WHERE FormatID = CASE WHEN " + FormtId.ToString() + " = -1 "
                StrSql = StrSql + "THEN FormatID ELSE " + FormtId.ToString() + "  END "
                StrSql = StrSql + "AND NVL(UPPER(FormatDe1),'#') LIKE '" + FormtDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(FormatDe1),'#') LIKE '" + FormtDe2.ToUpper() + "%' "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT  FormatID, "
                StrSql = StrSql + "(FormatDe1 || ' ' ||  FormatDe2) FormatDes, "
                StrSql = StrSql + "FormatDe1, "
                StrSql = StrSql + "FormatDe2 "
                StrSql = StrSql + "FROM PRODUCTFORMAT2 "
                StrSql = StrSql + "WHERE FormatID = CASE WHEN " + FormtId.ToString() + " = -1 "
                StrSql = StrSql + "THEN FormatID ELSE " + FormtId.ToString() + "  END "
                StrSql = StrSql + "AND NVL(UPPER(FormatDe1),'#') LIKE '" + FormtDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(FormatDe1),'#') LIKE '" + FormtDe2.ToUpper() + "%' "
                StrSql = StrSql + "AND FORMATID <> 17"
                StrSql = StrSql + "ORDER BY  FormatDe1 "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetProductFormtByID(ByVal CaseID1 As Integer, ByVal CaseID2 As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID,M1, "
                StrSql = StrSql + "CASE WHEN M1=1 or M1=17 THEN 'msi' ELSE 'units' END UNITS "
                StrSql = StrSql + "FROM PRODUCTFORMATIN "
                StrSql = StrSql + "WHERE CASEID IN( " + CaseID1.ToString() + "," + CaseID2.ToString() + ")"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetProductFormtByID:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPallets(ByVal PalletId As Integer, ByVal PalDe1 As String, ByVal PalDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  PalletId, (palletde1 || ' ' ||  palletde2) PallteDes, palletde1,palletde2,replace((palletde1 || ' ' ||  palletde2),'" + Chr(34) + "','##') PallteDes1 "
                StrSql = StrSql + "FROM Pallet "
                StrSql = StrSql + "WHERE PalletId = CASE WHEN " + PalletId.ToString() + " = -1 THEN "
                StrSql = StrSql + "PalletId "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + PalletId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(palletde1),'#') LIKE '" + PalDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(palletde2),'#') LIKE '" + PalDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  palletde1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEquipment(ByVal EqId As Integer, ByVal EqDe1 As String, ByVal EqlDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
               StrSql = "select equipID,equipDE1,equipDE2,(equipDE1 || ' ' || equipDE2) equipDES,replace((equipDE1 || ' ' ||  equipDE2),Chr(34) ,'##') equipDES1,EQUIPGROUPNAME "
                StrSql = StrSql + "from equipment  "
                StrSql = StrSql + "  LEFT JOIN EQUIPGROUPDETAILS EQDET ON EQDET.EQUIPMENTID=EQUIPMENT.EQUIPID "
                StrSql = StrSql + "INNER JOIN EQUIPGROUP EQG ON EQG.EQUIPGROUPID=EQDET.GROUPID "
                StrSql = StrSql + "WHERE EQUIPID = CASE WHEN " + EqId.ToString() + " = -1 THEN "
                StrSql = StrSql + "EQUIPID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + EqId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(equipDE1),'#') LIKE '" + EqDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(equipDE2),'#') LIKE '" + EqlDe2.ToUpper() + "%' "
                StrSql = StrSql + " UNION "
                StrSql = StrSql + "select equipID,equipDE1,equipDE2,(equipDE1 || ' ' || equipDE2) equipDES,replace((equipDE1 || ' ' ||  equipDE2),Chr(34) ,'##') equipDES1,'N' EQUIPGROUPNAME "
                StrSql = StrSql + "from equipment  "
                StrSql = StrSql + "WHERE EQUIPID = CASE WHEN " + EqId.ToString() + " = -1 THEN "
                StrSql = StrSql + "EQUIPID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + EqId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(equipDE1),'#') LIKE '" + EqDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(equipDE2),'#') LIKE '" + EqlDe2.ToUpper() + "%' and equipid=0 "
                StrSql = StrSql + "ORDER BY equipDE1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCostTypeInfo(ByVal CostId As Integer, ByVal Costde1 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select  costID,costde1 ,replace(costde1,Chr(34) ,'##') costdes"
                StrSql = StrSql + " from  costTYPE"
                StrSql = StrSql + " WHERE costID = CASE WHEN " + CostId.ToString() + " = -1 THEN "
                StrSql = StrSql + "costID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + CostId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(costde1),'#') LIKE '" + Costde1.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY costde1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPersonnelInfo(ByVal PersId As Integer, ByVal PersDe1 As String, ByVal PersDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select persid, persde1,persde2,(persde1 || ' ' ||  persde2) as persDES, persde2,replace((persde1 || ' ' ||  persde2),Chr(34) ,'##') persDES1"
                StrSql = StrSql + " from PERSONNELALL "
                StrSql = StrSql + " WHERE persid = CASE WHEN " + PersId.ToString() + " = -1 THEN "
                StrSql = StrSql + "persid "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + PersId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(persde1),'#') LIKE '" + PersDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(persde2),'#') LIKE '" + PersDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY persde1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPersonnelInfoE3(ByVal CaseID As String, ByVal PersId As Integer, ByVal PersDe1 As String, ByVal PersDe2 As String, ByVal Country As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                 StrSql = "select persid, persde1,persde2,(persde1 || ' ' ||  persde2) as persDES, persde2,replace((persde1 || ' ' ||  persde2),Chr(34) ,'##') persDES1, '" + CaseID + "' CASEID "
                StrSql = StrSql + " from PERSONNELALL "
                StrSql = StrSql + " WHERE persid = CASE WHEN " + PersId.ToString() + " = -1 THEN "
                StrSql = StrSql + "persid "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + PersId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(persde1),'#') LIKE '" + PersDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(persde2),'#') LIKE '" + PersDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY persde1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPersonnelInfoE3:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetSupportEquipment(ByVal EqId As Integer, ByVal EqDe1 As String, ByVal EqlDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select equipID,equipDE1,equipDE2,(equipDE1 || ' ' || equipDE2) equipDES,replace((equipDE1 || ' ' ||  equipDE2),Chr(34) ,'##') equipDES1 "
                StrSql = StrSql + "from equipment2   "
                StrSql = StrSql + "WHERE EQUIPID = CASE WHEN " + EqId.ToString() + " = -1 THEN "
                StrSql = StrSql + "EQUIPID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + EqId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(equipDE1),'#') LIKE '" + EqDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(equipDE2),'#') LIKE '" + EqlDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY equipDE1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetDept(ByVal ProcId As Integer, ByVal ProcDe1 As String, ByVal ProcDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseId As String = HttpContext.Current.Session("E1CaseId").ToString()
            Try
                StrSql = "SELECT PROCID,(PROCDE1||'  '||PROCDE2) AS PROCDE,PROCDE1,PROCDE2  "
                StrSql = StrSql + "FROM PROCESS "
                StrSql = StrSql + "WHERE PROCID = CASE WHEN " + ProcId.ToString() + " = -1 THEN "
                StrSql = StrSql + "PROCID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + ProcId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe2.ToUpper() + "%' "
                StrSql = StrSql + "AND PROCID IN "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT M1 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M2 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M3 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M4 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M5 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M6 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M7 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M8 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M9 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M10 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M11 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M12 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M13 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M14 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M15 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT 1 FROM DUAL "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT 0 FROM DUAL "
                StrSql = StrSql + ") "

                StrSql = StrSql + "ORDER BY  PROCDE1"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetDept(ByVal ProcId As Integer, ByVal ProcDe1 As String, ByVal ProcDe2 As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PROCID,(PROCDE1||'  '||PROCDE2) AS PROCDE,PROCDE1,PROCDE2  "
                StrSql = StrSql + "FROM PROCESS "
                StrSql = StrSql + "WHERE PROCID = CASE WHEN " + ProcId.ToString() + " = -1 THEN "
                StrSql = StrSql + "PROCID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + ProcId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe2.ToUpper() + "%' "
                StrSql = StrSql + "AND PROCID IN "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT M1 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M2 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M3 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M4 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M5 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M6 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M7 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M8 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M9 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M10 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M11 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M12 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M13 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M14 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT M15 FROM PLANTCONFIG WHERE CASEID =" + CaseId + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT 1 FROM DUAL "
                StrSql = StrSql + ") "

                StrSql = StrSql + "ORDER BY  PROCDE1"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetDeptN(ByVal ProcId As Integer, ByVal ProcDe1 As String, ByVal ProcDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PROCID,(PROCDE1||'  '||PROCDE2) AS PROCDE,PROCDE1,PROCDE2  "
                StrSql = StrSql + "FROM PROCESS "
                StrSql = StrSql + "WHERE PROCID = CASE WHEN " + ProcId.ToString() + " = -1 THEN "
                StrSql = StrSql + "PROCID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + ProcId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  PROCDE1"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetDeptN:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetDeptPlantConfig(ByVal ProcId As Integer, ByVal ProcDe1 As String, ByVal ProcDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PROCID,(PROCDE1||'  '||PROCDE2) AS PROCDE,PROCDE1,PROCDE2  "
                StrSql = StrSql + "FROM PROCESS "
                StrSql = StrSql + "WHERE PROCID = CASE WHEN " + ProcId.ToString() + " = -1 THEN "
                StrSql = StrSql + "PROCID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + ProcId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(PROCDE1),'#') LIKE '" + ProcDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  PROCDE1"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPref(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID,  "
                StrSql = StrSql + "UNITS, "
                StrSql = StrSql + "CURRENCY, "
                StrSql = StrSql + "CURR, "
                StrSql = StrSql + "CURRAVG, "
                StrSql = StrSql + "CONVWT, "
                StrSql = StrSql + "CONVTHICK, "
                StrSql = StrSql + "OCOUNTRY, "
                StrSql = StrSql + "DCOUNTRY, "
                StrSql = StrSql + "TITLE1, "
                StrSql = StrSql + "TITLE3, "
                StrSql = StrSql + "TITLE2, "
                StrSql = StrSql + "CONVAREA, "
                StrSql = StrSql + "TITLE4, "
                StrSql = StrSql + "CONVAREA2, "
                StrSql = StrSql + "TITLE5, "
                StrSql = StrSql + "CONVTHICK2, "
                StrSql = StrSql + "CONVTHICK3, "
                StrSql = StrSql + "TITLE6, "
                StrSql = StrSql + "TITLE7, "
                StrSql = StrSql + "TITLE8, "
                StrSql = StrSql + "TITLE9, "
                StrSql = StrSql + "EFFDATE, "
                StrSql = StrSql + "TO_CHAR(EFFDATE,'MON DD,YYYY')AS EDATE, "
                StrSql = StrSql + "TO_CHAR(EFFDATEFRM,'MON DD,YYYY')AS EDATEFRM, "
                StrSql = StrSql + "TITLE10, "
                StrSql = StrSql + "TITLE11, "
                StrSql = StrSql + "TITLE12, "
                'Bug#385
                StrSql = StrSql + "TITLE13, "
                StrSql = StrSql + "TITLE14, "
                StrSql = StrSql + "TITLE15, "
                StrSql = StrSql + "CONVVOL, "
                StrSql = StrSql + "CONVAREA3, "
                'Bug#385
                StrSql = StrSql + "ERGYCALC, "
                StrSql = StrSql + "ISDSCTNEW, "
                StrSql = StrSql + "DFLAG, "
  StrSql = StrSql + "CONVWT5, "
                StrSql = StrSql + "TITLE21 "

                StrSql = StrSql + "FROM PREFERENCES "
                StrSql = StrSql + "WHERE CASEID = " + CaseId.ToString() + " "


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPrefDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID,  "
                StrSql = StrSql + "UNITS, "
                StrSql = StrSql + "CURRENCY, "
                StrSql = StrSql + "OCOUNTRY, "
                StrSql = StrSql + "DCOUNTRY, "
                StrSql = StrSql + "EFFDATE, "
                StrSql = StrSql + "TO_CHAR(EFFDATE,'MON DD,YYYY')AS EDATE, "
                StrSql = StrSql + "ERGYCALC, "
                StrSql = StrSql + "ISDSCTNEW "
                StrSql = StrSql + "FROM PREFERENCES "
                StrSql = StrSql + "WHERE CASEID = " + CaseId.ToString() + " "


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEFFCOUNTRY(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select (CASE WHEN PREF.OCOUNTRY=0 THEN  "
                StrSql = StrSql + "'personnel' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=1 THEN "
                StrSql = StrSql + "'personnelChina' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=2 THEN "
                StrSql = StrSql + "'personnelUK' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=3 THEN "
                StrSql = StrSql + "'personnelGermany' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=4 THEN "
                StrSql = StrSql + "'personnelSKorea' "
                StrSql = StrSql + "END) AS COUNTRY, "
                StrSql = StrSql + "(CASE WHEN PREF.OCOUNTRY=0 THEN "
                StrSql = StrSql + "'persArchUS' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=1 THEN "
                StrSql = StrSql + "'persArchChina' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=2 THEN "
                StrSql = StrSql + "'persArchUK' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=3 THEN "
                StrSql = StrSql + "'persArchGermany' "
                StrSql = StrSql + "WHEN PREF.OCOUNTRY=4 THEN "
                StrSql = StrSql + "'persArchSKorea' "
                StrSql = StrSql + "END) AS EFFCOUNTRY "
                StrSql = StrSql + "FROM PREFERENCES PREF "
                StrSql = StrSql + "WHERE CASEID = " + CaseId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetDiscretedMaterialTotal(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "select caseID,thick,sg,wtPERarea, discreteWT from Total WHERE caseID= " + CaseId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCountry(ByVal countryId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
               StrSql = "SELECT COUNTRYID, COUNTRYDES COUNTRYDE1 FROM ADMINSITE.DIMCOUNTRIES "
                StrSql = StrSql + "WHERE COUNTRYID = CASE WHEN " + countryId.ToString() + " = -1 THEN "
                StrSql = StrSql + "COUNTRYID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + countryId.ToString() + "  "
                StrSql = StrSql + "END AND ISSAVVY='Y' ORDER BY COUNTRYDES"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCountry:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        'Public Function GetCountry() As DataSet
        '    Dim Dts As New DataSet()
        '    Dim odbUtil As New DBUtil()
        '    Dim StrSql As String = String.Empty
        '    Try
        '        StrSql = "SELECT COUNTRYID,COUNTRYDE1 FROM COUNTRY ORDER BY COUNTRYDE1"
        '        Dts = odbUtil.FillDataSet(StrSql, EconConnection)
        '        Return Dts
        '    Catch ex As Exception
        '        Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
        '        Return Dts
        '    End Try
        'End Function

        Public Function GetEffDate() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT TO_CHAR(EFFDATE,'MON DD,YYYY')AS EDATE FROM EFFDATE WHERE ISACTIVE='Y' ORDER BY EFFDATE DESC"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

 Public Function GetCurrancy(ByVal currId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                'StrSql = "SELECT CURID,CURDE1 FROM CURRENCY  "
                'StrSql = StrSql + "WHERE CURID = CASE WHEN " + currId.ToString() + " = -1 THEN "
                'StrSql = StrSql + "CURID "
                'StrSql = StrSql + "ELSE "
                'StrSql = StrSql + "" + currId.ToString() + " "
                'StrSql = StrSql + "END  ORDER BY CURDE1"


                StrSql = "SELECT CURID,CURDE1 FROM ( "
                StrSql = StrSql + "SELECT CURID,CURDE1 FROM CURRENCY "
                StrSql = StrSql + "WHERE UPPER(CURDE1) !='EURO' AND CURID = CASE WHEN " + currId.ToString() + " = -1 THEN "
                StrSql = StrSql + "CURID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + currId.ToString() + " "
                StrSql = StrSql + "END "
                If currId.ToString = "-1" Then
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT CURID,CURDE1 FROM CURRENCY "
                    StrSql = StrSql + "WHERE CURID = 62 "
                End If               
                StrSql = StrSql + ")  ORDER BY CURDE1 "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCurrancy:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCurrancy_21April2023(ByVal currId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CURID,CURDE1 FROM CURRENCY  "
                StrSql = StrSql + "WHERE CURID = CASE WHEN " + currId.ToString() + " = -1 THEN "
                StrSql = StrSql + "CURID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + currId.ToString() + " "
                StrSql = StrSql + "END  ORDER BY CURDE1"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCurrancy:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        'Public Function GetCurrancy() As DataSet
        '    Dim Dts As New DataSet()
        '    Dim odbUtil As New DBUtil()
        '    Dim StrSql As String = String.Empty
        '    Try
        '        StrSql = "SELECT CURID,CURDE1 FROM CURRENCY ORDER BY CURDE1 "
        '        Dts = odbUtil.FillDataSet(StrSql, EconConnection)
        '        Return Dts
        '    Catch ex As Exception
        '        Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
        '        Return Dts
        '    End Try
        'End Function

        Public Function GetCurrancyArch(ByVal CaseId As String, ByVal CurID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CURRENCYARCH.CURID,  "
                StrSql = StrSql + "CURRENCYARCH.CURPUSD, "
                StrSql = StrSql + "CURRENCYARCH.EFFDATE "
                StrSql = StrSql + "FROM CURRENCYARCH "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.EFFDATE = CURRENCYARCH.EFFDATE "
                StrSql = StrSql + "WHERE PREF.CASEID =" + CaseId + ""
                StrSql = StrSql + "AND CURRENCYARCH.CURID = " + CurID + ""
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCurrancyArchAVG(ByVal CaseId As String, ByVal CurID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim dsEffdate As New DataSet()
            dsEffdate = GetEffdateFrm(CaseId)
            Try
                If dsEffdate.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                    StrSql = "SELECT "
                    StrSql = StrSql + "SUM(CURRENCYARCH.CURPUSD)/ (MONTHS_BETWEEN( TO_DATE('" + dsEffdate.Tables(0).Rows(0).Item("effdate").ToString() + "','mm/dd/yyyy'),TO_DATE('" + dsEffdate.Tables(0).Rows(0).Item("effdatefrm").ToString() + "','mm/dd/yyyy'))+1) CURPUSD "
                    StrSql = StrSql + "FROM CURRENCYARCH "
                    StrSql = StrSql + "WHERE  EFFDATE BETWEEN TO_DATE ('" + dsEffdate.Tables(0).Rows(0).Item("effdatefrm").ToString() + "', 'mm/dd/yyyy') AND TO_DATE ('" + dsEffdate.Tables(0).Rows(0).Item("effdate").ToString() + "', 'mm/dd/yyyy') "
                    StrSql = StrSql + "AND CURRENCYARCH.CURID = " + CurID + ""
                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Else
                    StrSql = "SELECT "
                    StrSql = StrSql + "0 CURPUSD "
                    StrSql = StrSql + "FROM DUAL "
                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                End If

               
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetConversionFactor() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT "
                StrSql = StrSql + "MICPMIL, KGPLB, M2PMSI, M2PSQFT, MPFT, KMPMILE, JPMJ, LITPGAL, IN2PSQFT, "
                'Bug#385
                StrSql = StrSql + "CCMPCFT,GMPLB,MM2PIN2,TPKN,GMPOZ  "
                'Bug#385
                StrSql = StrSql + "FROM CONVFACTORS "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetQuestionID() As Integer
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim QuId As New Integer
            Try
                StrSql = "SELECT SEQQUESTIONID.NEXTVAL AS QID  "
                StrSql = StrSql + "FROM DUAL "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                QuId = Convert.ToInt32(Dts.Tables(0).Rows(0).Item("QID").ToString())
                Return QuId
            Catch ex As Exception
                Throw New Exception("E1GetData:GetQuestionID:" + ex.Message.ToString())
                Return QuId
            End Try
        End Function

        Public Function getUnits(ByVal caseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim QuId As New Integer
            Try
                StrSql = "SELECT  "
                StrSql = StrSql + "(PREF.TITLE2||'/'||	PREF.TITLE8) UNIT, "
                StrSql = StrSql + "'0' AS VAL "
                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.Caseid= " + caseId.ToString() + " "
                StrSql = StrSql + "UNION "
                StrSql = StrSql + "SELECT "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||'/'||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||'/unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)Unit, "
                StrSql = StrSql + "'1' AS VAL "
                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.Caseid= " + caseId.ToString() + " "
                StrSql = StrSql + "UNION  "
                StrSql = StrSql + "SELECT "
                StrSql = StrSql + "(PREF.TITLE2||'/thousand') UNIT, "
                StrSql = StrSql + "'2' AS VAL "
                StrSql = StrSql + "FROM PREFERENCES PREF "
                StrSql = StrSql + "WHERE PREF.Caseid= " + caseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:getUnits:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
       
#End Region

#Region "Assumptions Pages"
        Public Function GetExtrusionDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  MAT.CASEID,  "
                  StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY')AS EDATE, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "(MAT.T1*PREF.CONVTHICK) AS THICK1, "
                StrSql = StrSql + "(MAT.T2*PREF.CONVTHICK) AS THICK2, "
                StrSql = StrSql + "(MAT.T3*PREF.CONVTHICK) AS THICK3, "
                StrSql = StrSql + "(MAT.T4*PREF.CONVTHICK) AS THICK4, "
                StrSql = StrSql + "(MAT.T5*PREF.CONVTHICK) AS THICK5, "
                StrSql = StrSql + "(MAT.T6*PREF.CONVTHICK) AS THICK6, "
                StrSql = StrSql + "(MAT.T7*PREF.CONVTHICK) AS THICK7, "
                StrSql = StrSql + "(MAT.T8*PREF.CONVTHICK) AS THICK8, "
                StrSql = StrSql + "(MAT.T9*PREF.CONVTHICK) AS THICK9, "
                StrSql = StrSql + "(MAT.T10*PREF.CONVTHICK) AS THICK10, "
                StrSql = StrSql + "(TOT.THICK*PREF.CONVTHICK)THICK, "
                StrSql = StrSql + "(NVL(MATA1.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS1, "
                StrSql = StrSql + "(NVL(MATA2.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS2, "
                StrSql = StrSql + "(NVL(MATA3.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS3, "
                StrSql = StrSql + "(NVL(MATA4.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS4, "
                StrSql = StrSql + "(NVL(MATA5.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS5, "
                StrSql = StrSql + "(NVL(MATA6.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS6, "
                StrSql = StrSql + "(NVL(MATA7.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS7, "
                StrSql = StrSql + "(NVL(MATA8.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS8, "
                StrSql = StrSql + "(NVL(MATA9.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS9, "
                StrSql = StrSql + "(NVL(MATA10.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS10, "
                StrSql = StrSql + "(MAT.S1/PREF.CONVWT*PREF.CURR) AS PRP1, "
                StrSql = StrSql + "(MAT.S2/PREF.CONVWT*PREF.CURR) AS PRP2, "
                StrSql = StrSql + "(MAT.S3/PREF.CONVWT*PREF.CURR) AS PRP3, "
                StrSql = StrSql + "(MAT.S4/PREF.CONVWT*PREF.CURR) AS PRP4, "
                StrSql = StrSql + "(MAT.S5/PREF.CONVWT*PREF.CURR) AS PRP5, "
                StrSql = StrSql + "(MAT.S6/PREF.CONVWT*PREF.CURR) AS PRP6, "
                StrSql = StrSql + "(MAT.S7/PREF.CONVWT*PREF.CURR) AS PRP7, "
                StrSql = StrSql + "(MAT.S8/PREF.CONVWT*PREF.CURR) AS PRP8, "
                StrSql = StrSql + "(MAT.S9/PREF.CONVWT*PREF.CURR) AS PRP9, "
                StrSql = StrSql + "(MAT.S10/PREF.CONVWT*PREF.CURR) AS PRP10, "
                StrSql = StrSql + "MAT.R1, "
                StrSql = StrSql + "MAT.R2, "
                StrSql = StrSql + "MAT.R3, "
                StrSql = StrSql + "MAT.R4, "
                StrSql = StrSql + "MAT.R5, "
                StrSql = StrSql + "MAT.R6, "
                StrSql = StrSql + "MAT.R7, "
                StrSql = StrSql + "MAT.R8, "
                StrSql = StrSql + "MAT.R9, "
                StrSql = StrSql + "MAT.R10, "
                StrSql = StrSql + "MAT.E1, "
                StrSql = StrSql + "MAT.E2, "
                StrSql = StrSql + "MAT.E3, "
                StrSql = StrSql + "MAT.E4, "
                StrSql = StrSql + "MAT.E5, "
                StrSql = StrSql + "MAT.E6, "
                StrSql = StrSql + "MAT.E7, "
                StrSql = StrSql + "MAT.E8, "
                StrSql = StrSql + "MAT.E9, "
                StrSql = StrSql + "MAT.E10, "
                StrSql = StrSql + "(MAT1.SG)AS SGS1, "
                StrSql = StrSql + "(MAT2.SG)AS SGS2, "
                StrSql = StrSql + "(MAT3.SG)AS SGS3, "
                StrSql = StrSql + "(MAT4.SG)AS SGS4, "
                StrSql = StrSql + "(MAT5.SG)AS SGS5, "
                StrSql = StrSql + "(MAT6.SG)AS SGS6, "
                StrSql = StrSql + "(MAT7.SG)AS SGS7, "
                StrSql = StrSql + "(MAT8.SG)AS SGS8, "
                StrSql = StrSql + "(MAT9.SG)AS SGS9, "
                StrSql = StrSql + "(MAT10.SG)AS SGS10, "
                StrSql = StrSql + "MAT.SG1 AS SGP1, "
                StrSql = StrSql + "MAT.SG2 AS SGP2, "
                StrSql = StrSql + "MAT.SG3 AS SGP3, "
                StrSql = StrSql + "MAT.SG4 AS SGP4, "
                StrSql = StrSql + "MAT.SG5 AS SGP5, "
                StrSql = StrSql + "MAT.SG6 AS SGP6, "
                StrSql = StrSql + "MAT.SG7 AS SGP7, "
                StrSql = StrSql + "MAT.SG8 AS SGP8, "
                StrSql = StrSql + "MAT.SG9 AS SGP9, "
                StrSql = StrSql + "MAT.SG10 AS SGP10, "
                StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA) AS WTPARA1, "
                StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA) AS WTPARA2, "
                StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA) AS WTPARA3, "
                StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA) AS WTPARA4, "
                StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA) AS WTPARA5, "
                StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA) AS WTPARA6, "
                StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA) AS WTPARA7, "
                StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA) AS WTPARA8, "
                StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA) AS WTPARA9, "
                StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA) AS WTPARA10, "
                StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)WTPERAREA, "
                StrSql = StrSql + "MAT.D1, "
                StrSql = StrSql + "MAT.D2, "
                StrSql = StrSql + "MAT.D3, "
                StrSql = StrSql + "MAT.D4, "
                StrSql = StrSql + "MAT.D5, "
                StrSql = StrSql + "MAT.D6, "
                StrSql = StrSql + "MAT.D7, "
                StrSql = StrSql + "MAT.D8, "
                StrSql = StrSql + "MAT.D9, "
                StrSql = StrSql + "MAT.D10, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD, YYYY')EFFDATE, "
                StrSql = StrSql + "MAT.PLATE, "
                StrSql = StrSql + "MAT.DISCMATYN, "
                StrSql = StrSql + "TOT.DISCRETEWT * PREF.CONVWT AS DISCTOTAL, "
                StrSql = StrSql + "TOT.DISCRETECOST, "
                StrSql = StrSql + "MATDESC.DISID1, "
                StrSql = StrSql + "MATDESC.DISID2, "
                StrSql = StrSql + "MATDESC.DISID3, "
                StrSql = StrSql + "MATDESC.DISW1* PREF.CONVWT AS DISW1, "
                StrSql = StrSql + "MATDESC.DISW2* PREF.CONVWT AS DISW2, "
                StrSql = StrSql + "MATDESC.DISW3* PREF.CONVWT AS DISW3, "
                StrSql = StrSql + "MATDESC.DISP1* PREF.CURR AS DISP1, "
                StrSql = StrSql + "MATDESC.DISP2* PREF.CURR AS DISP2, "
                StrSql = StrSql + "MATDESC.DISP3* PREF.CURR AS DISP3, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "

                'Barrier
                StrSql = StrSql + "(NVL(TOTTB.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRICE, "
                StrSql = StrSql + "(MATOUT.AM1*PREF.CURR/PREF.CONVAREA) AS COSTPARA1, "
                StrSql = StrSql + "(MATOUT.AM2*PREF.CURR/PREF.CONVAREA) AS COSTPARA2, "
                StrSql = StrSql + "(MATOUT.AM3*PREF.CURR/PREF.CONVAREA) AS COSTPARA3, "
                StrSql = StrSql + "(MATOUT.AM4*PREF.CURR/PREF.CONVAREA) AS COSTPARA4, "
                StrSql = StrSql + "(MATOUT.AM5*PREF.CURR/PREF.CONVAREA) AS COSTPARA5, "
                StrSql = StrSql + "(MATOUT.AM6*PREF.CURR/PREF.CONVAREA) AS COSTPARA6, "
                StrSql = StrSql + "(MATOUT.AM7*PREF.CURR/PREF.CONVAREA) AS COSTPARA7, "
                StrSql = StrSql + "(MATOUT.AM8*PREF.CURR/PREF.CONVAREA) AS COSTPARA8, "
                StrSql = StrSql + "(MATOUT.AM9*PREF.CURR/PREF.CONVAREA) AS COSTPARA9, "
                StrSql = StrSql + "(MATOUT.AM10*PREF.CURR/PREF.CONVAREA) AS COSTPARA10, "
                StrSql = StrSql + "(TOTTB.PRICEAREA*PREF.CURR/PREF.CONVAREA)COSTPARAREA , "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.TITLE19, "
                StrSql = StrSql + "PREF.TITLE20, "
                StrSql = StrSql + "OTR1, "
                StrSql = StrSql + "OTR2, "
                StrSql = StrSql + "OTR3, "
                StrSql = StrSql + "OTR4 , "
                StrSql = StrSql + "OTR5, "
                StrSql = StrSql + "OTR6 , "
                StrSql = StrSql + "OTR7, "
                StrSql = StrSql + "OTR8, "
                StrSql = StrSql + "OTR9, "
                StrSql = StrSql + "OTR10, "
                StrSql = StrSql + "WVTR1, "
                StrSql = StrSql + "WVTR2, "
                StrSql = StrSql + "WVTR3, "
                StrSql = StrSql + "WVTR4, "
                StrSql = StrSql + "WVTR5, "
                StrSql = StrSql + "WVTR6, "
                StrSql = StrSql + "WVTR7, "
                StrSql = StrSql + "WVTR8, "
                StrSql = StrSql + "WVTR9, "
                StrSql = StrSql + "WVTR10, "

                StrSql = StrSql + "NVL(GRADE1,0) GRADE1, "
                StrSql = StrSql + "NVL(GRADE2,0) GRADE2, "
                StrSql = StrSql + "NVL(GRADE3,0) GRADE3, "
                StrSql = StrSql + "NVL(GRADE4,0) GRADE4, "
                StrSql = StrSql + "NVL(GRADE5,0) GRADE5, "
                StrSql = StrSql + "NVL(GRADE6,0) GRADE6, "
                StrSql = StrSql + "NVL(GRADE7,0) GRADE7, "
                StrSql = StrSql + "NVL(GRADE8,0) GRADE8, "
                StrSql = StrSql + "NVL(GRADE9,0) GRADE9, "
                StrSql = StrSql + "NVL(GRADE10,0) GRADE10, "
                StrSql = StrSql + "MAT.OTRTEMP, "
                StrSql = StrSql + "MAT.WVTRTEMP, "
                StrSql = StrSql + "MAT.OTRRH, "
                StrSql = StrSql + "MAT.WVTRRH "

                StrSql = StrSql + "FROM MATERIALINPUT MAT "

                'Barrier
                StrSql = StrSql + "INNER JOIN BARRIERINPUT BI "
                StrSql = StrSql + "ON MAT.CASEID=BI.CASEID "

                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID = MAT.CASEID "

                'Bug#441
                StrSql = StrSql + "INNER JOIN TOTALTB TOTTB "
                StrSql = StrSql + "ON TOTTB.CASEID = MAT.CASEID "

                StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA1 "
                StrSql = StrSql + "ON MATA1.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA1.MATID = MAT.M1 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA2 "
                StrSql = StrSql + "ON MATA2.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA2.MATID = MAT.M2 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA3 "
                StrSql = StrSql + "ON MATA3.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA3.MATID = MAT.M3 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA4 "
                StrSql = StrSql + "ON MATA4.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA4.MATID = MAT.M4 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA5 "
                StrSql = StrSql + "ON MATA5.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA5.MATID = MAT.M5 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA6 "
                StrSql = StrSql + "ON MATA6.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA6.MATID = MAT.M6 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA7 "
                StrSql = StrSql + "ON MATA7.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA7.MATID = MAT.M7 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA8 "
                StrSql = StrSql + "ON MATA8.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA8.MATID = MAT.M8 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA9 "
                StrSql = StrSql + "ON MATA9.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA9.MATID = MAT.M9 "
                StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA10 "
                StrSql = StrSql + "ON MATA10.EFFDATE = MAT.EFFDATE "
                StrSql = StrSql + "AND MATA10.MATID = MAT.M10 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetProductFromatIn(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  PRODUCTFORMATIN.M1,  "
                StrSql = StrSql + "(PRODUCTFORMATIN.M2*PREF.CONVTHICK) AS M2, "
                StrSql = StrSql + "(CASE WHEN (PREF.UNITS = 1 AND PRODUCTFORMATIN.M1 =1) THEN "
                StrSql = StrSql + "(PRODUCTFORMATIN.M3*PREF.CONVTHICK*0.01204) "
                StrSql = StrSql + "ELSE (PRODUCTFORMATIN.M3*PREF.CONVTHICK) "
                StrSql = StrSql + "END) AS M3, "
                StrSql = StrSql + "(PRODUCTFORMATIN.M4*PREF.CONVTHICK) AS M4, "
                StrSql = StrSql + "PRODUCTFORMATIN.M5, "
                StrSql = StrSql + "PRODUCTFORMATIN.M6, "
  StrSql = StrSql + "(PRODUCTFORMATIN.I1 * PREF.CONVTHICK) I1,"
                StrSql = StrSql + "(PRODUCTFORMATIN.I2 * PREF.CONVTHICK) I2, "
                StrSql = StrSql + "NVL(PRODUCTFORMAT.M1,PRODUCTFORMAT2.M1 ) AS FORMAT_M1, "
                StrSql = StrSql + "NVL(PRODUCTFORMAT.M2,PRODUCTFORMAT2.M2 ) AS FORMAT_M2, "
                StrSql = StrSql + "NVL(PRODUCTFORMAT.M3,PRODUCTFORMAT2.M3 ) AS FORMAT_M3, "
                StrSql = StrSql + "NVL(PRODUCTFORMAT.M4,PRODUCTFORMAT2.M4 ) AS FORMAT_M4, "
                StrSql = StrSql + "NVL(PRODUCTFORMAT.M5,PRODUCTFORMAT2.M5 ) AS FORMAT_M5, "
 		StrSql = StrSql + "NVL(PRODUCTFORMAT.M6,PRODUCTFORMAT2.M6 ) AS FORMAT_M6, "
                StrSql = StrSql + "(TOTAL.PRODWT*PREF.CONVWT) AS PRODWT, "
                StrSql = StrSql + "(PRODUCTFORMATIN.PWT*PREF.CONVWT) AS PRODWTPREF, "
                StrSql = StrSql + "(TOTAL.ROLLDIA*PREF.CONVTHICK)ROLLDIA, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12 "
                StrSql = StrSql + "FROM PRODUCTFORMATIN "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID = PRODUCTFORMATIN.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL "
                StrSql = StrSql + "ON TOTAL.CASEID = PRODUCTFORMATIN.CASEID "
                StrSql = StrSql + "LEFT OUTER JOIN ECON.PRODUCTFORMAT "
                StrSql = StrSql + "ON PRODUCTFORMAT.FORMATID = PRODUCTFORMATIN.M1 "
                StrSql = StrSql + "AND PREF.UNITS = 0 "
                StrSql = StrSql + "LEFT OUTER JOIN ECON.PRODUCTFORMAT2 "
                StrSql = StrSql + "ON PRODUCTFORMAT2.FORMATID = PRODUCTFORMATIN.M1 "
                StrSql = StrSql + "AND PREF.UNITS = 1 "
                StrSql = StrSql + "WHERE PRODUCTFORMATIN.CASEID  = " + CaseId.ToString() + " "


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPalletAndTruck(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT (TKLP.M1*PREF.CONVTHICK) AS P1,  "
                StrSql = StrSql + "(TKLP.M2*PREF.CONVTHICK)	AS P2, "
                StrSql = StrSql + "(TKLP.M3*PREF.CONVTHICK) AS P3, "
                StrSql = StrSql + "TKLP.M4 AS P4, "
                StrSql = StrSql + "TKLP.M5 AS P5, "
                StrSql = StrSql + "(TKLP.T1*PREF.CONVTHICK) AS T1, "
                StrSql = StrSql + "(TKLP.T2*PREF.CONVTHICK) AS T2, "
                StrSql = StrSql + "(TKLP.T3*PREF.CONVTHICK) AS T3, "
                StrSql = StrSql + "(TKLP.T4*PREF.CONVWT) AS T4, "
                StrSql = StrSql + "TKLP.T5 AS T5, "
                StrSql = StrSql + "(TOTAL.TOTWTPERT*PREF.CONVWT) AS CALCULATEDWEIGHT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM TRUCKPALLETIN TKLP "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID = TKLP.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL "
                StrSql = StrSql + "ON TOTAL.CASEID = TKLP.CASEID "
                StrSql = StrSql + "WHERE TKLP.CASEID =" + CaseId.ToString() + ""



                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPalletInDetails3Feb2023(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  DISTINCT  "
                StrSql = StrSql + "PALLETIN.CASEID, "
                StrSql = StrSql + "ITEM1.PALLETID AS ITEM1, "
                StrSql = StrSql + "ITEM2.PALLETID AS ITEM2, "
                StrSql = StrSql + "ITEM3.PALLETID AS ITEM3, "
                StrSql = StrSql + "ITEM4.PALLETID AS ITEM4, "
                StrSql = StrSql + "ITEM5.PALLETID AS ITEM5, "
                StrSql = StrSql + "ITEM6.PALLETID AS ITEM6, "
                StrSql = StrSql + "ITEM7.PALLETID AS ITEM7, "
                StrSql = StrSql + "ITEM8.PALLETID AS ITEM8, "
                StrSql = StrSql + "ITEM9.PALLETID AS ITEM9, "
                StrSql = StrSql + "ITEM10.PALLETID AS ITEM10, "
                StrSql = StrSql + "PALLETIN.T1 AS NUMBER1, "
                StrSql = StrSql + "PALLETIN.T2 AS NUMBER2, "
                StrSql = StrSql + "PALLETIN.T3 AS NUMBER3, "
                StrSql = StrSql + "PALLETIN.T4 AS NUMBER4, "
                StrSql = StrSql + "PALLETIN.T5 AS NUMBER5, "
                StrSql = StrSql + "PALLETIN.T6 AS NUMBER6, "
                StrSql = StrSql + "PALLETIN.T7 AS NUMBER7, "
                StrSql = StrSql + "PALLETIN.T8 AS NUMBER8, "
                StrSql = StrSql + "PALLETIN.T9 AS NUMBER9, "
                StrSql = StrSql + "PALLETIN.T10 AS NUMBER10, "
                StrSql = StrSql + "PALLETIN.R1 AS NOOFUSE1, "
                StrSql = StrSql + "PALLETIN.R2 AS NOOFUSE2, "
                StrSql = StrSql + "PALLETIN.R3 AS NOOFUSE3, "
                StrSql = StrSql + "PALLETIN.R4 AS NOOFUSE4, "
                StrSql = StrSql + "PALLETIN.R5 AS NOOFUSE5, "
                StrSql = StrSql + "PALLETIN.R6 AS NOOFUSE6, "
                StrSql = StrSql + "PALLETIN.R7 AS NOOFUSE7, "
                StrSql = StrSql + "PALLETIN.R8 AS NOOFUSE8, "
                StrSql = StrSql + "PALLETIN.R9 AS NOOFUSE9, "
                StrSql = StrSql + "PALLETIN.R10 AS NOOFUSE10, "
                StrSql = StrSql + "(ITEM1.WEIGHT * PREF.CONVWT) AS WeightS1, "
                StrSql = StrSql + "(ITEM2.WEIGHT * PREF.CONVWT) AS WeightS2, "
                StrSql = StrSql + "(ITEM3.WEIGHT * PREF.CONVWT) AS WeightS3, "
                StrSql = StrSql + "(ITEM4.WEIGHT * PREF.CONVWT) AS WeightS4, "
                StrSql = StrSql + "(ITEM5.WEIGHT * PREF.CONVWT) AS WeightS5, "
                StrSql = StrSql + "(ITEM6.WEIGHT * PREF.CONVWT) AS WeightS6, "
                StrSql = StrSql + "(ITEM7.WEIGHT * PREF.CONVWT) AS WeightS7, "
                StrSql = StrSql + "(ITEM8.WEIGHT * PREF.CONVWT) AS WeightS8, "
                StrSql = StrSql + "(ITEM9.WEIGHT * PREF.CONVWT) AS WeightS9, "
                StrSql = StrSql + "(ITEM10.WEIGHT * PREF.CONVWT) AS WeightS10, "
                StrSql = StrSql + "(PALLETIN.W1* PREF.CONVWT) AS WeightP1, "
                StrSql = StrSql + "(PALLETIN.W2* PREF.CONVWT) AS WeightP2, "
                StrSql = StrSql + "(PALLETIN.W3* PREF.CONVWT) AS WeightP3, "
                StrSql = StrSql + "(PALLETIN.W4* PREF.CONVWT) AS WeightP4, "
                StrSql = StrSql + "(PALLETIN.W5* PREF.CONVWT) AS WeightP5, "
                StrSql = StrSql + "(PALLETIN.W6* PREF.CONVWT) AS WeightP6, "
                StrSql = StrSql + "(PALLETIN.W7* PREF.CONVWT) AS WeightP7, "
                StrSql = StrSql + "(PALLETIN.W8* PREF.CONVWT) AS WeightP8, "
                StrSql = StrSql + "(PALLETIN.W9* PREF.CONVWT) AS WeightP9, "
                StrSql = StrSql + "(PALLETIN.W10* PREF.CONVWT) AS WeightP10, "
                'StrSql = StrSql + "(ITEM1.PRICE * PREF.CURR) AS PRICES1, "
                'StrSql = StrSql + "(ITEM2.PRICE * PREF.CURR) AS PRICES2, "
                'StrSql = StrSql + "(ITEM3.PRICE * PREF.CURR) AS PRICES3, "
                'StrSql = StrSql + "(ITEM4.PRICE * PREF.CURR) AS PRICES4, "
                'StrSql = StrSql + "(ITEM5.PRICE * PREF.CURR) AS PRICES5, "
                'StrSql = StrSql + "(ITEM6.PRICE * PREF.CURR) AS PRICES6, "
                'StrSql = StrSql + "(ITEM7.PRICE * PREF.CURR) AS PRICES7, "
                'StrSql = StrSql + "(ITEM8.PRICE * PREF.CURR) AS PRICES8, "
                'StrSql = StrSql + "(ITEM9.PRICE * PREF.CURR) AS PRICES9, "
                'StrSql = StrSql + "(ITEM10.PRICE * PREF.CURR) AS PRICES10, "

                StrSql = StrSql + "nvl((PITEM1.PRICE * PREF.CURR),0) AS PRICES1, "
                StrSql = StrSql + "nvl((PITEM2.PRICE * PREF.CURR),0) AS PRICES2, "
                StrSql = StrSql + "nvl((PITEM3.PRICE * PREF.CURR),0) AS PRICES3, "
                StrSql = StrSql + "nvl((PITEM4.PRICE * PREF.CURR),0) AS PRICES4, "
                StrSql = StrSql + "nvl((PITEM5.PRICE * PREF.CURR),0) AS PRICES5, "
                StrSql = StrSql + "nvl((PITEM6.PRICE * PREF.CURR),0) AS PRICES6, "
                StrSql = StrSql + "nvl((PITEM7.PRICE * PREF.CURR),0) AS PRICES7, "
                StrSql = StrSql + "nvl((PITEM8.PRICE * PREF.CURR),0) AS PRICES8, "
                StrSql = StrSql + "nvl((PITEM9.PRICE * PREF.CURR),0) AS PRICES9, "
                StrSql = StrSql + "nvl((PITEM10.PRICE * PREF.CURR),0) AS PRICES10, "

                StrSql = StrSql + "(PALLETIN.P1 * PREF.CURR) AS PRICEP1, "
                StrSql = StrSql + "(PALLETIN.P2 * PREF.CURR) AS PRICEP2, "
                StrSql = StrSql + "(PALLETIN.P3 * PREF.CURR) AS PRICEP3, "
                StrSql = StrSql + "(PALLETIN.P4 * PREF.CURR) AS PRICEP4, "
                StrSql = StrSql + "(PALLETIN.P5 * PREF.CURR) AS PRICEP5, "
                StrSql = StrSql + "(PALLETIN.P6 * PREF.CURR) AS PRICEP6, "
                StrSql = StrSql + "(PALLETIN.P7 * PREF.CURR) AS PRICEP7, "
                StrSql = StrSql + "(PALLETIN.P8 * PREF.CURR) AS PRICEP8, "
                StrSql = StrSql + "(PALLETIN.P9 * PREF.CURR) AS PRICEP9, "
                StrSql = StrSql + "(PALLETIN.P10 * PREF.CURR) AS PRICEP10, "
                StrSql = StrSql + "PALLETIN.D1 AS DEPT1, "
                StrSql = StrSql + "PALLETIN.D2  AS DEPT2, "
                StrSql = StrSql + "PALLETIN.D3  AS DEPT3, "
                StrSql = StrSql + "PALLETIN.D4  AS DEPT4, "
                StrSql = StrSql + "PALLETIN.D5  AS DEPT5, "
                StrSql = StrSql + "PALLETIN.D6  AS DEPT6, "
                StrSql = StrSql + "PALLETIN.D7  AS DEPT7, "
                StrSql = StrSql + "PALLETIN.D8  AS DEPT8, "
                StrSql = StrSql + "PALLETIN.D9  AS DEPT9, "
                StrSql = StrSql + "PALLETIN.D10  AS DEPT10, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "PALLETIN "
                StrSql = StrSql + "INNER JOIN "
                StrSql = StrSql + "PREFERENCES PREF "
                StrSql = StrSql + "ON "
                StrSql = StrSql + "PREF.CASEID=PALLETIN.CASEID "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM1 "
                StrSql = StrSql + "ON ITEM1.PALLETID = 	PALLETIN.M1 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM2 "
                StrSql = StrSql + "ON ITEM2.PALLETID = 	PALLETIN.M2 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM3 "
                StrSql = StrSql + "ON ITEM3.PALLETID = 	PALLETIN.M3 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM4 "
                StrSql = StrSql + "ON ITEM4.PALLETID = 	PALLETIN.M4 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM5 "
                StrSql = StrSql + "ON ITEM5.PALLETID = 	PALLETIN.M5 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM6 "
                StrSql = StrSql + "ON ITEM6.PALLETID = 	PALLETIN.M6 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM7 "
                StrSql = StrSql + "ON ITEM7.PALLETID = 	PALLETIN.M7 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM8 "
                StrSql = StrSql + "ON ITEM8.PALLETID = 	PALLETIN.M8 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM9 "
                StrSql = StrSql + "ON ITEM9.PALLETID = 	PALLETIN.M9 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM10 "
                StrSql = StrSql + "ON ITEM10.PALLETID = PALLETIN.M10 "

                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM1 "
                StrSql = StrSql + "ON PITEM1.PALLETID = 	PALLETIN.M1  AND PREF.OCOUNTRY =PITEM1.COUNTRYID  AND PREF.EFFDATE=PITEM1.EFFDATE  "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM2 "
                StrSql = StrSql + "ON PITEM2.PALLETID = 	PALLETIN.M2 AND PREF.OCOUNTRY =PITEM2.COUNTRYID  AND PREF.EFFDATE=PITEM2.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM3 "
                StrSql = StrSql + "ON PITEM3.PALLETID = 	PALLETIN.M3 AND PREF.OCOUNTRY =PITEM3.COUNTRYID  AND PREF.EFFDATE=PITEM3.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM4 "
                StrSql = StrSql + "ON PITEM4.PALLETID = 	PALLETIN.M4 AND PREF.OCOUNTRY =PITEM4.COUNTRYID  AND PREF.EFFDATE=PITEM4.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM5 "
                StrSql = StrSql + "ON PITEM5.PALLETID = 	PALLETIN.M5 AND PREF.OCOUNTRY =PITEM5.COUNTRYID  AND PREF.EFFDATE=PITEM5.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM6 "
                StrSql = StrSql + "ON PITEM6.PALLETID = 	PALLETIN.M6 AND PREF.OCOUNTRY =PITEM6.COUNTRYID  AND PREF.EFFDATE=PITEM6.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM7 "
                StrSql = StrSql + "ON PITEM7.PALLETID = 	PALLETIN.M7 AND PREF.OCOUNTRY =PITEM7.COUNTRYID  AND PREF.EFFDATE=PITEM7.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM8 "
                StrSql = StrSql + "ON PITEM8.PALLETID = 	PALLETIN.M8 AND PREF.OCOUNTRY =PITEM8.COUNTRYID  AND PREF.EFFDATE=PITEM8.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM9 "
                StrSql = StrSql + "ON PITEM9.PALLETID = 	PALLETIN.M9 AND PREF.OCOUNTRY =PITEM9.COUNTRYID  AND PREF.EFFDATE=PITEM9.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM10 "
                StrSql = StrSql + "ON PITEM10.PALLETID = PALLETIN.M10 AND PREF.OCOUNTRY =PITEM10.COUNTRYID  AND PREF.EFFDATE=PITEM10.EFFDATE "

                StrSql = StrSql + "WHERE PALLETIN.CASEID = " + CaseId.ToString() + ""


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function


        Public Function GetPalletInDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  DISTINCT  "
                StrSql = StrSql + "PALLETIN.CASEID, "
                StrSql = StrSql + "ITEM1.PALLETID AS ITEM1, "
                StrSql = StrSql + "ITEM2.PALLETID AS ITEM2, "
                StrSql = StrSql + "ITEM3.PALLETID AS ITEM3, "
                StrSql = StrSql + "ITEM4.PALLETID AS ITEM4, "
                StrSql = StrSql + "ITEM5.PALLETID AS ITEM5, "
                StrSql = StrSql + "ITEM6.PALLETID AS ITEM6, "
                StrSql = StrSql + "ITEM7.PALLETID AS ITEM7, "
                StrSql = StrSql + "ITEM8.PALLETID AS ITEM8, "
                StrSql = StrSql + "ITEM9.PALLETID AS ITEM9, "
                StrSql = StrSql + "ITEM10.PALLETID AS ITEM10, "
                StrSql = StrSql + "PALLETIN.T1 AS NUMBER1, "
                StrSql = StrSql + "PALLETIN.T2 AS NUMBER2, "
                StrSql = StrSql + "PALLETIN.T3 AS NUMBER3, "
                StrSql = StrSql + "PALLETIN.T4 AS NUMBER4, "
                StrSql = StrSql + "PALLETIN.T5 AS NUMBER5, "
                StrSql = StrSql + "PALLETIN.T6 AS NUMBER6, "
                StrSql = StrSql + "PALLETIN.T7 AS NUMBER7, "
                StrSql = StrSql + "PALLETIN.T8 AS NUMBER8, "
                StrSql = StrSql + "PALLETIN.T9 AS NUMBER9, "
                StrSql = StrSql + "PALLETIN.T10 AS NUMBER10, "
                StrSql = StrSql + "PALLETIN.R1 AS NOOFUSE1, "
                StrSql = StrSql + "PALLETIN.R2 AS NOOFUSE2, "
                StrSql = StrSql + "PALLETIN.R3 AS NOOFUSE3, "
                StrSql = StrSql + "PALLETIN.R4 AS NOOFUSE4, "
                StrSql = StrSql + "PALLETIN.R5 AS NOOFUSE5, "
                StrSql = StrSql + "PALLETIN.R6 AS NOOFUSE6, "
                StrSql = StrSql + "PALLETIN.R7 AS NOOFUSE7, "
                StrSql = StrSql + "PALLETIN.R8 AS NOOFUSE8, "
                StrSql = StrSql + "PALLETIN.R9 AS NOOFUSE9, "
                StrSql = StrSql + "PALLETIN.R10 AS NOOFUSE10, "
                StrSql = StrSql + "(ITEM1.WEIGHT * PREF.CONVWT) AS WeightS1, "
                StrSql = StrSql + "(ITEM2.WEIGHT * PREF.CONVWT) AS WeightS2, "
                StrSql = StrSql + "(ITEM3.WEIGHT * PREF.CONVWT) AS WeightS3, "
                StrSql = StrSql + "(ITEM4.WEIGHT * PREF.CONVWT) AS WeightS4, "
                StrSql = StrSql + "(ITEM5.WEIGHT * PREF.CONVWT) AS WeightS5, "
                StrSql = StrSql + "(ITEM6.WEIGHT * PREF.CONVWT) AS WeightS6, "
                StrSql = StrSql + "(ITEM7.WEIGHT * PREF.CONVWT) AS WeightS7, "
                StrSql = StrSql + "(ITEM8.WEIGHT * PREF.CONVWT) AS WeightS8, "
                StrSql = StrSql + "(ITEM9.WEIGHT * PREF.CONVWT) AS WeightS9, "
                StrSql = StrSql + "(ITEM10.WEIGHT * PREF.CONVWT) AS WeightS10, "
                StrSql = StrSql + "(PALLETIN.W1* PREF.CONVWT) AS WeightP1, "
                StrSql = StrSql + "(PALLETIN.W2* PREF.CONVWT) AS WeightP2, "
                StrSql = StrSql + "(PALLETIN.W3* PREF.CONVWT) AS WeightP3, "
                StrSql = StrSql + "(PALLETIN.W4* PREF.CONVWT) AS WeightP4, "
                StrSql = StrSql + "(PALLETIN.W5* PREF.CONVWT) AS WeightP5, "
                StrSql = StrSql + "(PALLETIN.W6* PREF.CONVWT) AS WeightP6, "
                StrSql = StrSql + "(PALLETIN.W7* PREF.CONVWT) AS WeightP7, "
                StrSql = StrSql + "(PALLETIN.W8* PREF.CONVWT) AS WeightP8, "
                StrSql = StrSql + "(PALLETIN.W9* PREF.CONVWT) AS WeightP9, "
                StrSql = StrSql + "(PALLETIN.W10* PREF.CONVWT) AS WeightP10, "
                'StrSql = StrSql + "(ITEM1.PRICE * PREF.CURR) AS PRICES1, "
                'StrSql = StrSql + "(ITEM2.PRICE * PREF.CURR) AS PRICES2, "
                'StrSql = StrSql + "(ITEM3.PRICE * PREF.CURR) AS PRICES3, "
                'StrSql = StrSql + "(ITEM4.PRICE * PREF.CURR) AS PRICES4, "
                'StrSql = StrSql + "(ITEM5.PRICE * PREF.CURR) AS PRICES5, "
                'StrSql = StrSql + "(ITEM6.PRICE * PREF.CURR) AS PRICES6, "
                'StrSql = StrSql + "(ITEM7.PRICE * PREF.CURR) AS PRICES7, "
                'StrSql = StrSql + "(ITEM8.PRICE * PREF.CURR) AS PRICES8, "
                'StrSql = StrSql + "(ITEM9.PRICE * PREF.CURR) AS PRICES9, "
                'StrSql = StrSql + "(ITEM10.PRICE * PREF.CURR) AS PRICES10, "
                StrSql = StrSql + "nvl((PITEM1.PRICE * PREF.CURR),0) AS PRICES1, "
                StrSql = StrSql + "nvl((PITEM2.PRICE * PREF.CURR),0) AS PRICES2, "
                StrSql = StrSql + "nvl((PITEM3.PRICE * PREF.CURR),0) AS PRICES3, "
                StrSql = StrSql + "nvl((PITEM4.PRICE * PREF.CURR),0) AS PRICES4, "
                StrSql = StrSql + "nvl((PITEM5.PRICE * PREF.CURR),0) AS PRICES5, "
                StrSql = StrSql + "nvl((PITEM6.PRICE * PREF.CURR),0) AS PRICES6, "
                StrSql = StrSql + "nvl((PITEM7.PRICE * PREF.CURR),0) AS PRICES7, "
                StrSql = StrSql + "nvl((PITEM8.PRICE * PREF.CURR),0) AS PRICES8, "
                StrSql = StrSql + "nvl((PITEM9.PRICE * PREF.CURR),0) AS PRICES9, "
                StrSql = StrSql + "nvl((PITEM10.PRICE * PREF.CURR),0) AS PRICES10, "

                StrSql = StrSql + "(PALLETIN.P1 * PREF.CURR) AS PRICEP1, "
                StrSql = StrSql + "(PALLETIN.P2 * PREF.CURR) AS PRICEP2, "
                StrSql = StrSql + "(PALLETIN.P3 * PREF.CURR) AS PRICEP3, "
                StrSql = StrSql + "(PALLETIN.P4 * PREF.CURR) AS PRICEP4, "
                StrSql = StrSql + "(PALLETIN.P5 * PREF.CURR) AS PRICEP5, "
                StrSql = StrSql + "(PALLETIN.P6 * PREF.CURR) AS PRICEP6, "
                StrSql = StrSql + "(PALLETIN.P7 * PREF.CURR) AS PRICEP7, "
                StrSql = StrSql + "(PALLETIN.P8 * PREF.CURR) AS PRICEP8, "
                StrSql = StrSql + "(PALLETIN.P9 * PREF.CURR) AS PRICEP9, "
                StrSql = StrSql + "(PALLETIN.P10 * PREF.CURR) AS PRICEP10, "
                StrSql = StrSql + "PALLETIN.D1 AS DEPT1, "
                StrSql = StrSql + "PALLETIN.D2  AS DEPT2, "
                StrSql = StrSql + "PALLETIN.D3  AS DEPT3, "
                StrSql = StrSql + "PALLETIN.D4  AS DEPT4, "
                StrSql = StrSql + "PALLETIN.D5  AS DEPT5, "
                StrSql = StrSql + "PALLETIN.D6  AS DEPT6, "
                StrSql = StrSql + "PALLETIN.D7  AS DEPT7, "
                StrSql = StrSql + "PALLETIN.D8  AS DEPT8, "
                StrSql = StrSql + "PALLETIN.D9  AS DEPT9, "
                StrSql = StrSql + "PALLETIN.D10  AS DEPT10, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "PALLETIN "
                StrSql = StrSql + "INNER JOIN "
                StrSql = StrSql + "PREFERENCES PREF "
                StrSql = StrSql + "ON "
                StrSql = StrSql + "PREF.CASEID=PALLETIN.CASEID "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM1 "
                StrSql = StrSql + "ON ITEM1.PALLETID = 	PALLETIN.M1 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM2 "
                StrSql = StrSql + "ON ITEM2.PALLETID = 	PALLETIN.M2 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM3 "
                StrSql = StrSql + "ON ITEM3.PALLETID = 	PALLETIN.M3 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM4 "
                StrSql = StrSql + "ON ITEM4.PALLETID = 	PALLETIN.M4 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM5 "
                StrSql = StrSql + "ON ITEM5.PALLETID = 	PALLETIN.M5 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM6 "
                StrSql = StrSql + "ON ITEM6.PALLETID = 	PALLETIN.M6 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM7 "
                StrSql = StrSql + "ON ITEM7.PALLETID = 	PALLETIN.M7 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM8 "
                StrSql = StrSql + "ON ITEM8.PALLETID = 	PALLETIN.M8 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM9 "
                StrSql = StrSql + "ON ITEM9.PALLETID = 	PALLETIN.M9 "
                StrSql = StrSql + "INNER JOIN PALLET  ITEM10 "
                StrSql = StrSql + "ON ITEM10.PALLETID = PALLETIN.M10 "

                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM1 "
                StrSql = StrSql + "ON PITEM1.PALLETID = 	PALLETIN.M1  AND PREF.OCOUNTRY =PITEM1.COUNTRYID  AND PREF.EFFDATE=PITEM1.EFFDATE  "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM2 "
                StrSql = StrSql + "ON PITEM2.PALLETID = 	PALLETIN.M2 AND PREF.OCOUNTRY =PITEM2.COUNTRYID  AND PREF.EFFDATE=PITEM2.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM3 "
                StrSql = StrSql + "ON PITEM3.PALLETID = 	PALLETIN.M3 AND PREF.OCOUNTRY =PITEM3.COUNTRYID  AND PREF.EFFDATE=PITEM3.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM4 "
                StrSql = StrSql + "ON PITEM4.PALLETID = 	PALLETIN.M4 AND PREF.OCOUNTRY =PITEM4.COUNTRYID  AND PREF.EFFDATE=PITEM4.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM5 "
                StrSql = StrSql + "ON PITEM5.PALLETID = 	PALLETIN.M5 AND PREF.OCOUNTRY =PITEM5.COUNTRYID  AND PREF.EFFDATE=PITEM5.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM6 "
                StrSql = StrSql + "ON PITEM6.PALLETID = 	PALLETIN.M6 AND PREF.OCOUNTRY =PITEM6.COUNTRYID  AND PREF.EFFDATE=PITEM6.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM7 "
                StrSql = StrSql + "ON PITEM7.PALLETID = 	PALLETIN.M7 AND PREF.OCOUNTRY =PITEM7.COUNTRYID  AND PREF.EFFDATE=PITEM7.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM8 "
                StrSql = StrSql + "ON PITEM8.PALLETID = 	PALLETIN.M8 AND PREF.OCOUNTRY =PITEM8.COUNTRYID  AND PREF.EFFDATE=PITEM8.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM9 "
                StrSql = StrSql + "ON PITEM9.PALLETID = 	PALLETIN.M9 AND PREF.OCOUNTRY =PITEM9.COUNTRYID  AND PREF.EFFDATE=PITEM9.EFFDATE "
                StrSql = StrSql + "LEFT OUTER  JOIN PALLETARCH  PITEM10 "
                StrSql = StrSql + "ON PITEM10.PALLETID = PALLETIN.M10 AND PREF.OCOUNTRY =PITEM10.COUNTRYID  AND PREF.EFFDATE=PITEM10.EFFDATE "

                StrSql = StrSql + "WHERE PALLETIN.CASEID = " + CaseId.ToString() + ""


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPlantConfigDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  DISTINCT  "
                StrSql = StrSql + "PlantCONFIG.CASEID, "
                StrSql = StrSql + "PlantCONFIG.m1 AS DEPTA1, "
                StrSql = StrSql + "PlantCONFIG.m2 AS DEPTA2, "
                StrSql = StrSql + "PlantCONFIG.m3 AS DEPTA3, "
                StrSql = StrSql + "PlantCONFIG.m4 AS DEPTA4, "
                StrSql = StrSql + "PlantCONFIG.m5 AS DEPTA5, "
                StrSql = StrSql + "PlantCONFIG.m6 AS DEPTA6, "
                StrSql = StrSql + "PlantCONFIG.m7 AS DEPTA7, "
                StrSql = StrSql + "PlantCONFIG.m8 AS DEPTA8, "
                StrSql = StrSql + "PlantCONFIG.m9 AS DEPTA9, "
                StrSql = StrSql + "PlantCONFIG.m10 AS DEPTA10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.m11 AS DEPTA11, "
                StrSql = StrSql + "PlantCONFIG.m12 AS DEPTA12, "
                StrSql = StrSql + "PlantCONFIG.m13 AS DEPTA13, "
                StrSql = StrSql + "PlantCONFIG.m14 AS DEPTA14, "
                StrSql = StrSql + "PlantCONFIG.m15 AS DEPTA15, "
                'END
                StrSql = StrSql + "PlantCONFIG.t1 AS DEPTB1, "
                StrSql = StrSql + "PlantCONFIG.t2 AS DEPTB2, "
                StrSql = StrSql + "PlantCONFIG.t3 AS DEPTB3, "
                StrSql = StrSql + "PlantCONFIG.t4 AS DEPTB4, "
                StrSql = StrSql + "PlantCONFIG.t5 AS DEPTB5, "
                StrSql = StrSql + "PlantCONFIG.t6 AS DEPTB6, "
                StrSql = StrSql + "PlantCONFIG.t7 AS DEPTB7, "
                StrSql = StrSql + "PlantCONFIG.t8 AS DEPTB8, "
                StrSql = StrSql + "PlantCONFIG.t9 AS DEPTB9, "
                StrSql = StrSql + "PlantCONFIG.t10 AS DEPTB10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.t11 AS DEPTB11, "
                StrSql = StrSql + "PlantCONFIG.t12 AS DEPTB12, "
                StrSql = StrSql + "PlantCONFIG.t13 AS DEPTB13, "
                StrSql = StrSql + "PlantCONFIG.t14 AS DEPTB14, "
                StrSql = StrSql + "PlantCONFIG.t15 AS DEPTB15, "
                'END
                StrSql = StrSql + "PlantCONFIG.s1 AS DEPTC1, "
                StrSql = StrSql + "PlantCONFIG.s2 AS DEPTC2, "
                StrSql = StrSql + "PlantCONFIG.s3 AS DEPTC3, "
                StrSql = StrSql + "PlantCONFIG.s4 AS DEPTC4, "
                StrSql = StrSql + "PlantCONFIG.s5 AS DEPTC5, "
                StrSql = StrSql + "PlantCONFIG.s6 AS DEPTC6, "
                StrSql = StrSql + "PlantCONFIG.s7 AS DEPTC7, "
                StrSql = StrSql + "PlantCONFIG.s8 AS DEPTC8, "
                StrSql = StrSql + "PlantCONFIG.s9 AS DEPTC9, "
                StrSql = StrSql + "PlantCONFIG.s10 AS DEPTC10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.s11 AS DEPTC11, "
                StrSql = StrSql + "PlantCONFIG.s12 AS DEPTC12, "
                StrSql = StrSql + "PlantCONFIG.s13 AS DEPTC13, "
                StrSql = StrSql + "PlantCONFIG.s14 AS DEPTC14, "
                StrSql = StrSql + "PlantCONFIG.s15 AS DEPTC15, "
                'END
                StrSql = StrSql + "PlantCONFIG.Y1 AS DEPTD1, "
                StrSql = StrSql + "PlantCONFIG.Y2 AS DEPTD2, "
                StrSql = StrSql + "PlantCONFIG.Y3 AS DEPTD3, "
                StrSql = StrSql + "PlantCONFIG.Y4 AS DEPTD4, "
                StrSql = StrSql + "PlantCONFIG.Y5 AS DEPTD5, "
                StrSql = StrSql + "PlantCONFIG.Y6 AS DEPTD6, "
                StrSql = StrSql + "PlantCONFIG.Y7 AS DEPTD7, "
                StrSql = StrSql + "PlantCONFIG.Y8 AS DEPTD8, "
                StrSql = StrSql + "PlantCONFIG.Y9 AS DEPTD9, "
                StrSql = StrSql + "PlantCONFIG.Y10 AS DEPTD10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.Y11 AS DEPTD11, "
                StrSql = StrSql + "PlantCONFIG.Y12 AS DEPTD12, "
                StrSql = StrSql + "PlantCONFIG.Y13 AS DEPTD13, "
                StrSql = StrSql + "PlantCONFIG.Y14 AS DEPTD14, "
                StrSql = StrSql + "PlantCONFIG.Y15 AS DEPTD15, "
                'END
                StrSql = StrSql + "PlantCONFIG.D1 AS DEPTE1, "
                StrSql = StrSql + "PlantCONFIG.D2 AS DEPTE2, "
                StrSql = StrSql + "PlantCONFIG.D3 AS DEPTE3, "
                StrSql = StrSql + "PlantCONFIG.D4 AS DEPTE4, "
                StrSql = StrSql + "PlantCONFIG.D5 AS DEPTE5, "
                StrSql = StrSql + "PlantCONFIG.D6 AS DEPTE6, "
                StrSql = StrSql + "PlantCONFIG.D7 AS DEPTE7, "
                StrSql = StrSql + "PlantCONFIG.D8 AS DEPTE8, "
                StrSql = StrSql + "PlantCONFIG.D9 AS DEPTE9, "
                StrSql = StrSql + "PlantCONFIG.D10 AS DEPTE10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.D11 AS DEPTE11, "
                StrSql = StrSql + "PlantCONFIG.D12 AS DEPTE12, "
                StrSql = StrSql + "PlantCONFIG.D13 AS DEPTE13, "
                StrSql = StrSql + "PlantCONFIG.D14 AS DEPTE14, "
                StrSql = StrSql + "PlantCONFIG.D15 AS DEPTE15, "
                'END
                StrSql = StrSql + "PlantCONFIG.Z1 AS DEPTF1, "
                StrSql = StrSql + "PlantCONFIG.Z2 AS DEPTF2, "
                StrSql = StrSql + "PlantCONFIG.Z3 AS DEPTF3, "
                StrSql = StrSql + "PlantCONFIG.Z4 AS DEPTF4, "
                StrSql = StrSql + "PlantCONFIG.Z5 AS DEPTF5, "
                StrSql = StrSql + "PlantCONFIG.Z6 AS DEPTF6, "
                StrSql = StrSql + "PlantCONFIG.Z7 AS DEPTF7, "
                StrSql = StrSql + "PlantCONFIG.Z8 AS DEPTF8, "
                StrSql = StrSql + "PlantCONFIG.Z9 AS DEPTF9, "
                StrSql = StrSql + "PlantCONFIG.Z10 AS DEPTF10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.Z11 AS DEPTF11, "
                StrSql = StrSql + "PlantCONFIG.Z12 AS DEPTF12, "
                StrSql = StrSql + "PlantCONFIG.Z13 AS DEPTF13, "
                StrSql = StrSql + "PlantCONFIG.Z14 AS DEPTF14, "
                StrSql = StrSql + "PlantCONFIG.Z15 AS DEPTF15, "
                'END
                StrSql = StrSql + "PlantCONFIG.B1 AS DEPTG1, "
                StrSql = StrSql + "PlantCONFIG.B2 AS DEPTG2, "
                StrSql = StrSql + "PlantCONFIG.B3 AS DEPTG3, "
                StrSql = StrSql + "PlantCONFIG.B4 AS DEPTG4, "
                StrSql = StrSql + "PlantCONFIG.B5 AS DEPTG5, "
                StrSql = StrSql + "PlantCONFIG.B6 AS DEPTG6, "
                StrSql = StrSql + "PlantCONFIG.B7 AS DEPTG7, "
                StrSql = StrSql + "PlantCONFIG.B8 AS DEPTG8, "
                StrSql = StrSql + "PlantCONFIG.B9 AS DEPTG9, "
                StrSql = StrSql + "PlantCONFIG.B10 AS DEPTG10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.B11 AS DEPTG11, "
                StrSql = StrSql + "PlantCONFIG.B12 AS DEPTG12, "
                StrSql = StrSql + "PlantCONFIG.B13 AS DEPTG13, "
                StrSql = StrSql + "PlantCONFIG.B14 AS DEPTG14, "
                StrSql = StrSql + "PlantCONFIG.B15 AS DEPTG15, "
                'END
                StrSql = StrSql + "PlantCONFIG.R1 AS DEPTH1, "
                StrSql = StrSql + "PlantCONFIG.R2 AS DEPTH2, "
                StrSql = StrSql + "PlantCONFIG.R3 AS DEPTH3, "
                StrSql = StrSql + "PlantCONFIG.R4 AS DEPTH4, "
                StrSql = StrSql + "PlantCONFIG.R5 AS DEPTH5, "
                StrSql = StrSql + "PlantCONFIG.R6 AS DEPTH6, "
                StrSql = StrSql + "PlantCONFIG.R7 AS DEPTH7, "
                StrSql = StrSql + "PlantCONFIG.R8 AS DEPTH8, "
                StrSql = StrSql + "PlantCONFIG.R9 AS DEPTH9, "
                StrSql = StrSql + "PlantCONFIG.R10 AS DEPTH10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.R11 AS DEPTH11, "
                StrSql = StrSql + "PlantCONFIG.R12 AS DEPTH12, "
                StrSql = StrSql + "PlantCONFIG.R13 AS DEPTH13, "
                StrSql = StrSql + "PlantCONFIG.R14 AS DEPTH14, "
                StrSql = StrSql + "PlantCONFIG.R15 AS DEPTH15, "
                'END
                StrSql = StrSql + "PlantCONFIG.K1 AS DEPTI1, "
                StrSql = StrSql + "PlantCONFIG.K2 AS DEPTI2, "
                StrSql = StrSql + "PlantCONFIG.K3 AS DEPTI3, "
                StrSql = StrSql + "PlantCONFIG.K4 AS DEPTI4, "
                StrSql = StrSql + "PlantCONFIG.K5 AS DEPTI5, "
                StrSql = StrSql + "PlantCONFIG.K6 AS DEPTI6, "
                StrSql = StrSql + "PlantCONFIG.K7 AS DEPTI7, "
                StrSql = StrSql + "PlantCONFIG.K8 AS DEPTI8, "
                StrSql = StrSql + "PlantCONFIG.K9 AS DEPTI9, "
                StrSql = StrSql + "PlantCONFIG.K10 AS DEPTI10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.K11 AS DEPTI11, "
                StrSql = StrSql + "PlantCONFIG.K12 AS DEPTI12, "
                StrSql = StrSql + "PlantCONFIG.K13 AS DEPTI13, "
                StrSql = StrSql + "PlantCONFIG.K14 AS DEPTI14, "
                StrSql = StrSql + "PlantCONFIG.K15 AS DEPTI15, "
                'END 
                StrSql = StrSql + "PlantCONFIG.P1 AS DEPTJ1, "
                StrSql = StrSql + "PlantCONFIG.P2 AS DEPTJ2, "
                StrSql = StrSql + "PlantCONFIG.P3 AS DEPTJ3, "
                StrSql = StrSql + "PlantCONFIG.P4 AS DEPTJ4, "
                StrSql = StrSql + "PlantCONFIG.P5 AS DEPTJ5, "
                StrSql = StrSql + "PlantCONFIG.P6 AS DEPTJ6, "
                StrSql = StrSql + "PlantCONFIG.P7 AS DEPTJ7, "
                StrSql = StrSql + "PlantCONFIG.P8 AS DEPTJ8, "
                StrSql = StrSql + "PlantCONFIG.P9 AS DEPTJ9, "
                StrSql = StrSql + "PlantCONFIG.P10 AS DEPTJ10, "
                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.P11 AS DEPTJ11, "
                StrSql = StrSql + "PlantCONFIG.P12 AS DEPTJ12, "
                StrSql = StrSql + "PlantCONFIG.P13 AS DEPTJ13, "
                StrSql = StrSql + "PlantCONFIG.P14 AS DEPTJ14, "
                StrSql = StrSql + "PlantCONFIG.P15 AS DEPTJ15, "
                'END

                'PS CHANGE
                StrSql = StrSql + "PlantCONFIG.Q1 AS DEPTK1, "
                StrSql = StrSql + "PlantCONFIG.Q2 AS DEPTK2, "
                StrSql = StrSql + "PlantCONFIG.Q3 AS DEPTK3, "
                StrSql = StrSql + "PlantCONFIG.Q4 AS DEPTK4, "
                StrSql = StrSql + "PlantCONFIG.Q5 AS DEPTK5, "
                StrSql = StrSql + "PlantCONFIG.Q6 AS DEPTK6, "
                StrSql = StrSql + "PlantCONFIG.Q7 AS DEPTK7, "
                StrSql = StrSql + "PlantCONFIG.Q8 AS DEPTK8, "
                StrSql = StrSql + "PlantCONFIG.Q9 AS DEPTK9, "
                StrSql = StrSql + "PlantCONFIG.Q10 AS DEPTK10, "
                StrSql = StrSql + "PlantCONFIG.Q11 AS DEPTK11, "
                StrSql = StrSql + "PlantCONFIG.Q12 AS DEPTK12, "
                StrSql = StrSql + "PlantCONFIG.Q13 AS DEPTK13, "
                StrSql = StrSql + "PlantCONFIG.Q14 AS DEPTK14, "
                StrSql = StrSql + "PlantCONFIG.Q15 AS DEPTK15, "

                StrSql = StrSql + "PlantCONFIG.L1 AS DEPTL1, "
                StrSql = StrSql + "PlantCONFIG.L2 AS DEPTL2, "
                StrSql = StrSql + "PlantCONFIG.L3 AS DEPTL3, "
                StrSql = StrSql + "PlantCONFIG.L4 AS DEPTL4, "
                StrSql = StrSql + "PlantCONFIG.L5 AS DEPTL5, "
                StrSql = StrSql + "PlantCONFIG.L6 AS DEPTL6, "
                StrSql = StrSql + "PlantCONFIG.L7 AS DEPTL7, "
                StrSql = StrSql + "PlantCONFIG.L8 AS DEPTL8, "
                StrSql = StrSql + "PlantCONFIG.L9 AS DEPTL9, "
                StrSql = StrSql + "PlantCONFIG.L10 AS DEPTL10, "
                StrSql = StrSql + "PlantCONFIG.L11 AS DEPTL11, "
                StrSql = StrSql + "PlantCONFIG.L12 AS DEPTL12, "
                StrSql = StrSql + "PlantCONFIG.L13 AS DEPTL13, "
                StrSql = StrSql + "PlantCONFIG.L14 AS DEPTL14, "
                StrSql = StrSql + "PlantCONFIG.L15 AS DEPTL15, "

                StrSql = StrSql + "PlantCONFIG.U1 AS DEPTM1, "
                StrSql = StrSql + "PlantCONFIG.U2 AS DEPTM2, "
                StrSql = StrSql + "PlantCONFIG.U3 AS DEPTM3, "
                StrSql = StrSql + "PlantCONFIG.U4 AS DEPTM4, "
                StrSql = StrSql + "PlantCONFIG.U5 AS DEPTM5, "
                StrSql = StrSql + "PlantCONFIG.U6 AS DEPTM6, "
                StrSql = StrSql + "PlantCONFIG.U7 AS DEPTM7, "
                StrSql = StrSql + "PlantCONFIG.U8 AS DEPTM8, "
                StrSql = StrSql + "PlantCONFIG.U9 AS DEPTM9, "
                StrSql = StrSql + "PlantCONFIG.U10 AS DEPTM10, "
                StrSql = StrSql + "PlantCONFIG.U11 AS DEPTM11, "
                StrSql = StrSql + "PlantCONFIG.U12 AS DEPTM12, "
                StrSql = StrSql + "PlantCONFIG.U13 AS DEPTM13, "
                StrSql = StrSql + "PlantCONFIG.U14 AS DEPTM14, "
                StrSql = StrSql + "PlantCONFIG.U15 AS DEPTM15, "

                StrSql = StrSql + "PlantCONFIG.N1 AS DEPTN1, "
                StrSql = StrSql + "PlantCONFIG.N2 AS DEPTN2, "
                StrSql = StrSql + "PlantCONFIG.N3 AS DEPTN3, "
                StrSql = StrSql + "PlantCONFIG.N4 AS DEPTN4, "
                StrSql = StrSql + "PlantCONFIG.N5 AS DEPTN5, "
                StrSql = StrSql + "PlantCONFIG.N6 AS DEPTN6, "
                StrSql = StrSql + "PlantCONFIG.N7 AS DEPTN7, "
                StrSql = StrSql + "PlantCONFIG.N8 AS DEPTN8, "
                StrSql = StrSql + "PlantCONFIG.N9 AS DEPTN9, "
                StrSql = StrSql + "PlantCONFIG.N10 AS DEPTN10, "
                StrSql = StrSql + "PlantCONFIG.N11 AS DEPTN11, "
                StrSql = StrSql + "PlantCONFIG.N12 AS DEPTN12, "
                StrSql = StrSql + "PlantCONFIG.N13 AS DEPTN13, "
                StrSql = StrSql + "PlantCONFIG.N14 AS DEPTN14, "
                StrSql = StrSql + "PlantCONFIG.N15 AS DEPTN15, "

                StrSql = StrSql + "PlantCONFIG.V1 AS DEPTO1, "
                StrSql = StrSql + "PlantCONFIG.V2 AS DEPTO2, "
                StrSql = StrSql + "PlantCONFIG.V3 AS DEPTO3, "
                StrSql = StrSql + "PlantCONFIG.V4 AS DEPTO4, "
                StrSql = StrSql + "PlantCONFIG.V5 AS DEPTO5, "
                StrSql = StrSql + "PlantCONFIG.V6 AS DEPTO6, "
                StrSql = StrSql + "PlantCONFIG.V7 AS DEPTO7, "
                StrSql = StrSql + "PlantCONFIG.V8 AS DEPTO8, "
                StrSql = StrSql + "PlantCONFIG.V9 AS DEPTO9, "
                StrSql = StrSql + "PlantCONFIG.V10 AS DEPTO10, "
                StrSql = StrSql + "PlantCONFIG.V11 AS DEPTO11, "
                StrSql = StrSql + "PlantCONFIG.V12 AS DEPTO12, "
                StrSql = StrSql + "PlantCONFIG.V13 AS DEPTO13, "
                StrSql = StrSql + "PlantCONFIG.V14 AS DEPTO14, "
                StrSql = StrSql + "PlantCONFIG.V15 AS DEPTO15 "
                'END
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "PlantCONFIG "
                StrSql = StrSql + "WHERE PlantCONFIG.CASEID = " + CaseId.ToString() + ""
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPlanConfigDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEquipmentInDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT 	EQUIP.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS ASSESTCOSTUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN 'square feet'  ELSE 'square meters' END AS PLANTAREAUNIT, "
                StrSql = StrSql + "EQUIP.M1 AS ASSETID1, "
                StrSql = StrSql + "EQUIP.M2  AS ASSETID2, "
                StrSql = StrSql + "EQUIP.M3  AS ASSETID3, "
                StrSql = StrSql + "EQUIP.M4  AS ASSETID4, "
                StrSql = StrSql + "EQUIP.M5  AS ASSETID5, "
                StrSql = StrSql + "EQUIP.M6  AS ASSETID6, "
                StrSql = StrSql + "EQUIP.M7  AS ASSETID7, "
                StrSql = StrSql + "EQUIP.M8  AS ASSETID8, "
                StrSql = StrSql + "EQUIP.M9 AS ASSETID9, "
                StrSql = StrSql + "EQUIP.M10 AS ASSETID10, "
                StrSql = StrSql + "EQUIP.M11 AS ASSETID11, "
                StrSql = StrSql + "EQUIP.M12 AS ASSETID12, "
                StrSql = StrSql + "EQUIP.M13 AS ASSETID13, "
                StrSql = StrSql + "EQUIP.M14 AS ASSETID14, "
                StrSql = StrSql + "EQUIP.M15 AS ASSETID15, "
                StrSql = StrSql + "EQUIP.M16 AS ASSETID16, "
                StrSql = StrSql + "EQUIP.M17 AS ASSETID17, "
                StrSql = StrSql + "EQUIP.M18 AS ASSETID18, "
                StrSql = StrSql + "EQUIP.M19 AS ASSETID19, "
                StrSql = StrSql + "EQUIP.M20 AS ASSETID20, "
                StrSql = StrSql + "EQUIP.M21 AS ASSETID21, "
                StrSql = StrSql + "EQUIP.M22 AS ASSETID22, "
                StrSql = StrSql + "EQUIP.M23 AS ASSETID23, "
                StrSql = StrSql + "EQUIP.M24 AS ASSETID24, "
                StrSql = StrSql + "EQUIP.M25 AS ASSETID25, "
                StrSql = StrSql + "EQUIP.M26 AS ASSETID26, "
                StrSql = StrSql + "EQUIP.M27 AS ASSETID27, "
                StrSql = StrSql + "EQUIP.M28 AS ASSETID28, "
                StrSql = StrSql + "EQUIP.M29 AS ASSETID29, "
                StrSql = StrSql + "EQUIP.M30 AS ASSETID30, "
                'StrSql = StrSql + "(EQUIP1.COST *  PREF.CURR) AS ASSETS1, "
                'StrSql = StrSql + "(EQUIP2.COST *  PREF.CURR) AS ASSETS2, "
                'StrSql = StrSql + "(EQUIP3.COST *  PREF.CURR) AS ASSETS3, "
                'StrSql = StrSql + "(EQUIP4.COST *  PREF.CURR) AS ASSETS4, "
                'StrSql = StrSql + "(EQUIP5.COST *  PREF.CURR) AS ASSETS5, "
                'StrSql = StrSql + "(EQUIP6.COST *  PREF.CURR) AS ASSETS6, "
                'StrSql = StrSql + "(EQUIP7.COST *  PREF.CURR) AS ASSETS7, "
                'StrSql = StrSql + "(EQUIP8.COST *  PREF.CURR) AS ASSETS8, "
                'StrSql = StrSql + "(EQUIP9.COST *  PREF.CURR) AS ASSETS9, "
                'StrSql = StrSql + "(EQUIP10.COST *  PREF.CURR) AS ASSETS10, "
                'StrSql = StrSql + "(EQUIP11.COST *  PREF.CURR) AS ASSETS11, "
                'StrSql = StrSql + "(EQUIP12.COST *  PREF.CURR) AS ASSETS12, "
                'StrSql = StrSql + "(EQUIP13.COST *  PREF.CURR) AS ASSETS13, "
                'StrSql = StrSql + "(EQUIP14.COST *  PREF.CURR) AS ASSETS14, "
                'StrSql = StrSql + "(EQUIP15.COST *  PREF.CURR) AS ASSETS15, "
                'StrSql = StrSql + "(EQUIP16.COST *  PREF.CURR) AS ASSETS16, "
                'StrSql = StrSql + "(EQUIP17.COST *  PREF.CURR) AS ASSETS17, "
                'StrSql = StrSql + "(EQUIP18.COST *  PREF.CURR) AS ASSETS18, "
                'StrSql = StrSql + "(EQUIP19.COST *  PREF.CURR) AS ASSETS19, "
                'StrSql = StrSql + "(EQUIP20.COST *  PREF.CURR) AS ASSETS20, "
                'StrSql = StrSql + "(EQUIP21.COST *  PREF.CURR) AS ASSETS21, "
                'StrSql = StrSql + "(EQUIP22.COST *  PREF.CURR) AS ASSETS22, "
                'StrSql = StrSql + "(EQUIP23.COST *  PREF.CURR) AS ASSETS23, "
                'StrSql = StrSql + "(EQUIP24.COST *  PREF.CURR) AS ASSETS24, "
                'StrSql = StrSql + "(EQUIP25.COST *  PREF.CURR) AS ASSETS25, "
                'StrSql = StrSql + "(EQUIP26.COST *  PREF.CURR) AS ASSETS26, "
                'StrSql = StrSql + "(EQUIP27.COST *  PREF.CURR) AS ASSETS27, "
                'StrSql = StrSql + "(EQUIP28.COST *  PREF.CURR) AS ASSETS28, "
                'StrSql = StrSql + "(EQUIP29.COST *  PREF.CURR) AS ASSETS29, "
                'StrSql = StrSql + "(EQUIP30.COST *  PREF.CURR) AS ASSETS30, "

                StrSql = StrSql + "NVL((EQUIPARCH1.COST *  PREF.CURR),0) AS ASSETS1, "
                StrSql = StrSql + "NVL((EQUIPARCH2.COST *  PREF.CURR),0) AS ASSETS2, "
                StrSql = StrSql + "NVL((EQUIPARCH3.COST *  PREF.CURR),0) AS ASSETS3, "
                StrSql = StrSql + "NVL((EQUIPARCH4.COST *  PREF.CURR),0) AS ASSETS4, "
                StrSql = StrSql + "NVL((EQUIPARCH5.COST *  PREF.CURR),0) AS ASSETS5, "
                StrSql = StrSql + "NVL((EQUIPARCH6.COST *  PREF.CURR),0) AS ASSETS6, "
                StrSql = StrSql + "NVL((EQUIPARCH7.COST *  PREF.CURR),0) AS ASSETS7, "
                StrSql = StrSql + "NVL((EQUIPARCH8.COST *  PREF.CURR),0) AS ASSETS8, "
                StrSql = StrSql + "NVL((EQUIPARCH9.COST *  PREF.CURR),0) AS ASSETS9, "
                StrSql = StrSql + "NVL((EQUIPARCH10.COST *  PREF.CURR),0) AS ASSETS10, "
                StrSql = StrSql + "NVL((EQUIPARCH11.COST *  PREF.CURR),0) AS ASSETS11, "
                StrSql = StrSql + "NVL((EQUIPARCH12.COST *  PREF.CURR),0) AS ASSETS12, "
                StrSql = StrSql + "NVL((EQUIPARCH13.COST *  PREF.CURR),0) AS ASSETS13, "
                StrSql = StrSql + "NVL((EQUIPARCH14.COST *  PREF.CURR),0) AS ASSETS14, "
                StrSql = StrSql + "NVL((EQUIPARCH15.COST *  PREF.CURR),0) AS ASSETS15, "
                StrSql = StrSql + "NVL((EQUIPARCH16.COST *  PREF.CURR),0) AS ASSETS16, "
                StrSql = StrSql + "NVL((EQUIPARCH17.COST *  PREF.CURR),0) AS ASSETS17, "
                StrSql = StrSql + "NVL((EQUIPARCH18.COST *  PREF.CURR),0) AS ASSETS18, "
                StrSql = StrSql + "NVL((EQUIPARCH19.COST *  PREF.CURR),0) AS ASSETS19, "
                StrSql = StrSql + "NVL((EQUIPARCH20.COST *  PREF.CURR),0) AS ASSETS20, "
                StrSql = StrSql + "NVL((EQUIPARCH21.COST *  PREF.CURR),0) AS ASSETS21, "
                StrSql = StrSql + "NVL((EQUIPARCH22.COST *  PREF.CURR),0) AS ASSETS22, "
                StrSql = StrSql + "NVL((EQUIPARCH23.COST *  PREF.CURR),0) AS ASSETS23, "
                StrSql = StrSql + "NVL((EQUIPARCH24.COST *  PREF.CURR),0) AS ASSETS24, "
                StrSql = StrSql + "NVL((EQUIPARCH25.COST *  PREF.CURR),0) AS ASSETS25, "
                StrSql = StrSql + "NVL((EQUIPARCH26.COST *  PREF.CURR),0) AS ASSETS26, "
                StrSql = StrSql + "NVL((EQUIPARCH27.COST *  PREF.CURR),0) AS ASSETS27, "
                StrSql = StrSql + "NVL((EQUIPARCH28.COST *  PREF.CURR),0) AS ASSETS28, "
                StrSql = StrSql + "NVL((EQUIPARCH29.COST *  PREF.CURR),0) AS ASSETS29, "
                StrSql = StrSql + "NVL((EQUIPARCH30.COST *  PREF.CURR),0) AS ASSETS30, "

                StrSql = StrSql + "(EQCOS.M1*  PREF.CURR) AS ASSETP1, "
                StrSql = StrSql + "(EQCOS.M2*  PREF.CURR) AS ASSETP2, "
                StrSql = StrSql + "(EQCOS.M3*  PREF.CURR) AS ASSETP3, "
                StrSql = StrSql + "(EQCOS.M4*  PREF.CURR) AS ASSETP4, "
                StrSql = StrSql + "(EQCOS.M5*  PREF.CURR) AS ASSETP5, "
                StrSql = StrSql + "(EQCOS.M6*  PREF.CURR) AS ASSETP6, "
                StrSql = StrSql + "(EQCOS.M7*  PREF.CURR) AS ASSETP7, "
                StrSql = StrSql + "(EQCOS.M8*  PREF.CURR) AS ASSETP8, "
                StrSql = StrSql + "(EQCOS.M9*  PREF.CURR) AS ASSETP9, "
                StrSql = StrSql + "(EQCOS.M10*  PREF.CURR) AS ASSETP10, "
                StrSql = StrSql + "(EQCOS.M11*  PREF.CURR) AS ASSETP11, "
                StrSql = StrSql + "(EQCOS.M12*  PREF.CURR) AS ASSETP12, "
                StrSql = StrSql + "(EQCOS.M13*  PREF.CURR) AS ASSETP13, "
                StrSql = StrSql + "(EQCOS.M14*  PREF.CURR) AS ASSETP14, "
                StrSql = StrSql + "(EQCOS.M15*  PREF.CURR) AS ASSETP15, "
                StrSql = StrSql + "(EQCOS.M16*  PREF.CURR) AS ASSETP16, "
                StrSql = StrSql + "(EQCOS.M17*  PREF.CURR) AS ASSETP17, "
                StrSql = StrSql + "(EQCOS.M18*  PREF.CURR) AS ASSETP18, "
                StrSql = StrSql + "(EQCOS.M19*  PREF.CURR) AS ASSETP19, "
                StrSql = StrSql + "(EQCOS.M20*  PREF.CURR) AS ASSETP20, "
                StrSql = StrSql + "(EQCOS.M21*  PREF.CURR) AS ASSETP21, "
                StrSql = StrSql + "(EQCOS.M22*  PREF.CURR) AS ASSETP22, "
                StrSql = StrSql + "(EQCOS.M23*  PREF.CURR) AS ASSETP23, "
                StrSql = StrSql + "(EQCOS.M24*  PREF.CURR) AS ASSETP24, "
                StrSql = StrSql + "(EQCOS.M25*  PREF.CURR) AS ASSETP25, "
                StrSql = StrSql + "(EQCOS.M26*  PREF.CURR) AS ASSETP26, "
                StrSql = StrSql + "(EQCOS.M27*  PREF.CURR) AS ASSETP27, "
                StrSql = StrSql + "(EQCOS.M28*  PREF.CURR) AS ASSETP28, "
                StrSql = StrSql + "(EQCOS.M29*  PREF.CURR) AS ASSETP29, "
                StrSql = StrSql + "(EQCOS.M30*  PREF.CURR) AS ASSETP30, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP1.AREATYPE )AREADE1, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP2.AREATYPE )AREADE2, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP3.AREATYPE )AREADE3, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP4.AREATYPE )AREADE4, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP5.AREATYPE )AREADE5, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP6.AREATYPE )AREADE6, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP7.AREATYPE )AREADE7, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP8.AREATYPE )AREADE8, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP9.AREATYPE )AREADE9, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP10.AREATYPE )AREADE10, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP11.AREATYPE )AREADE11, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP12.AREATYPE )AREADE12, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP13.AREATYPE )AREADE13, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP14.AREATYPE )AREADE14, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP15.AREATYPE )AREADE15, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP16.AREATYPE )AREADE16, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP17.AREATYPE )AREADE17, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP18.AREATYPE )AREADE18, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP19.AREATYPE )AREADE19, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP20.AREATYPE )AREADE20, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP21.AREATYPE )AREADE21, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP22.AREATYPE )AREADE22, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP23.AREATYPE )AREADE23, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP24.AREATYPE )AREADE24, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP25.AREATYPE )AREADE25, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP26.AREATYPE )AREADE26, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP27.AREATYPE )AREADE27, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP28.AREATYPE )AREADE28, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP29.AREATYPE )AREADE29, "
                StrSql = StrSql + "(SELECT AREADE1||' '||AREADE2 FROM AREATYPE WHERE AREAID=EQUIP30.AREATYPE )AREADE30, "
                StrSql = StrSql + "(EQUIP1.AREA *  PREF.CONVAREA2) AS PARS1, "
                StrSql = StrSql + "(EQUIP2.AREA *  PREF.CONVAREA2) AS PARS2, "
                StrSql = StrSql + "(EQUIP3.AREA *  PREF.CONVAREA2) AS PARS3, "
                StrSql = StrSql + "(EQUIP4.AREA *  PREF.CONVAREA2) AS PARS4, "
                StrSql = StrSql + "(EQUIP5.AREA *  PREF.CONVAREA2) AS PARS5, "
                StrSql = StrSql + "(EQUIP6.AREA *  PREF.CONVAREA2) AS PARS6, "
                StrSql = StrSql + "(EQUIP7.AREA *  PREF.CONVAREA2) AS PARS7, "
                StrSql = StrSql + "(EQUIP8.AREA *  PREF.CONVAREA2) AS PARS8, "
                StrSql = StrSql + "(EQUIP9.AREA *  PREF.CONVAREA2) AS PARS9, "
                StrSql = StrSql + "(EQUIP10.AREA *  PREF.CONVAREA2) AS PARS10, "
                StrSql = StrSql + "(EQUIP11.AREA *  PREF.CONVAREA2) AS PARS11, "
                StrSql = StrSql + "(EQUIP12.AREA *  PREF.CONVAREA2) AS PARS12, "
                StrSql = StrSql + "(EQUIP13.AREA *  PREF.CONVAREA2) AS PARS13, "
                StrSql = StrSql + "(EQUIP14.AREA *  PREF.CONVAREA2) AS PARS14, "
                StrSql = StrSql + "(EQUIP15.AREA *  PREF.CONVAREA2) AS PARS15, "
                StrSql = StrSql + "(EQUIP16.AREA *  PREF.CONVAREA2) AS PARS16, "
                StrSql = StrSql + "(EQUIP17.AREA *  PREF.CONVAREA2) AS PARS17, "
                StrSql = StrSql + "(EQUIP18.AREA *  PREF.CONVAREA2) AS PARS18, "
                StrSql = StrSql + "(EQUIP19.AREA *  PREF.CONVAREA2) AS PARS19, "
                StrSql = StrSql + "(EQUIP20.AREA *  PREF.CONVAREA2) AS PARS20, "
                StrSql = StrSql + "(EQUIP21.AREA *  PREF.CONVAREA2) AS PARS21, "
                StrSql = StrSql + "(EQUIP22.AREA *  PREF.CONVAREA2) AS PARS22, "
                StrSql = StrSql + "(EQUIP23.AREA *  PREF.CONVAREA2) AS PARS23, "
                StrSql = StrSql + "(EQUIP24.AREA *  PREF.CONVAREA2) AS PARS24, "
                StrSql = StrSql + "(EQUIP25.AREA *  PREF.CONVAREA2) AS PARS25, "
                StrSql = StrSql + "(EQUIP26.AREA *  PREF.CONVAREA2) AS PARS26, "
                StrSql = StrSql + "(EQUIP27.AREA *  PREF.CONVAREA2) AS PARS27, "
                StrSql = StrSql + "(EQUIP28.AREA *  PREF.CONVAREA2) AS PARS28, "
                StrSql = StrSql + "(EQUIP29.AREA *  PREF.CONVAREA2) AS PARS29, "
                StrSql = StrSql + "(EQUIP30.AREA *  PREF.CONVAREA2) AS PARS30, "
                StrSql = StrSql + "(EQAR.M1*  PREF.CONVAREA2) AS PARP1, "
                StrSql = StrSql + "(EQAR.M2*  PREF.CONVAREA2) AS PARP2, "
                StrSql = StrSql + "(EQAR.M3*  PREF.CONVAREA2) AS PARP3, "
                StrSql = StrSql + "(EQAR.M4*  PREF.CONVAREA2) AS PARP4, "
                StrSql = StrSql + "(EQAR.M5*  PREF.CONVAREA2) AS PARP5, "
                StrSql = StrSql + "(EQAR.M6*  PREF.CONVAREA2) AS PARP6, "
                StrSql = StrSql + "(EQAR.M7*  PREF.CONVAREA2) AS PARP7, "
                StrSql = StrSql + "(EQAR.M8*  PREF.CONVAREA2) AS PARP8, "
                StrSql = StrSql + "(EQAR.M9*  PREF.CONVAREA2) AS PARP9, "
                StrSql = StrSql + "(EQAR.M10*  PREF.CONVAREA2) AS PARP10, "
                StrSql = StrSql + "(EQAR.M11*  PREF.CONVAREA2) AS PARP11, "
                StrSql = StrSql + "(EQAR.M12*  PREF.CONVAREA2) AS PARP12, "
                StrSql = StrSql + "(EQAR.M13*  PREF.CONVAREA2) AS PARP13, "
                StrSql = StrSql + "(EQAR.M14*  PREF.CONVAREA2) AS PARP14, "
                StrSql = StrSql + "(EQAR.M15*  PREF.CONVAREA2) AS PARP15, "
                StrSql = StrSql + "(EQAR.M16*  PREF.CONVAREA2) AS PARP16, "
                StrSql = StrSql + "(EQAR.M17*  PREF.CONVAREA2) AS PARP17, "
                StrSql = StrSql + "(EQAR.M18*  PREF.CONVAREA2) AS PARP18, "
                StrSql = StrSql + "(EQAR.M19*  PREF.CONVAREA2) AS PARP19, "
                StrSql = StrSql + "(EQAR.M20*  PREF.CONVAREA2) AS PARP20, "
                StrSql = StrSql + "(EQAR.M21*  PREF.CONVAREA2) AS PARP21, "
                StrSql = StrSql + "(EQAR.M22*  PREF.CONVAREA2) AS PARP22, "
                StrSql = StrSql + "(EQAR.M23*  PREF.CONVAREA2) AS PARP23, "
                StrSql = StrSql + "(EQAR.M24*  PREF.CONVAREA2) AS PARP24, "
                StrSql = StrSql + "(EQAR.M25*  PREF.CONVAREA2) AS PARP25, "
                StrSql = StrSql + "(EQAR.M26*  PREF.CONVAREA2) AS PARP26, "
                StrSql = StrSql + "(EQAR.M27*  PREF.CONVAREA2) AS PARP27, "
                StrSql = StrSql + "(EQAR.M28*  PREF.CONVAREA2) AS PARP28, "
                StrSql = StrSql + "(EQAR.M29*  PREF.CONVAREA2) AS PARP29, "
                StrSql = StrSql + "(EQAR.M30*  PREF.CONVAREA2) AS PARP30, "
                StrSql = StrSql + "EQUIP1.INSTKW AS ECS1, "
                StrSql = StrSql + "EQUIP2.INSTKW AS ECS2, "
                StrSql = StrSql + "EQUIP3.INSTKW AS ECS3, "
                StrSql = StrSql + "EQUIP4.INSTKW AS ECS4, "
                StrSql = StrSql + "EQUIP5.INSTKW AS ECS5, "
                StrSql = StrSql + "EQUIP6.INSTKW AS ECS6, "
                StrSql = StrSql + "EQUIP7.INSTKW AS ECS7, "
                StrSql = StrSql + "EQUIP8.INSTKW AS ECS8, "
                StrSql = StrSql + "EQUIP9.INSTKW AS ECS9, "
                StrSql = StrSql + "EQUIP10.INSTKW AS ECS10, "
                StrSql = StrSql + "EQUIP11.INSTKW AS ECS11, "
                StrSql = StrSql + "EQUIP12.INSTKW AS ECS12, "
                StrSql = StrSql + "EQUIP13.INSTKW AS ECS13, "
                StrSql = StrSql + "EQUIP14.INSTKW AS ECS14, "
                StrSql = StrSql + "EQUIP15.INSTKW AS ECS15, "
                StrSql = StrSql + "EQUIP16.INSTKW AS ECS16, "
                StrSql = StrSql + "EQUIP17.INSTKW AS ECS17, "
                StrSql = StrSql + "EQUIP18.INSTKW AS ECS18, "
                StrSql = StrSql + "EQUIP19.INSTKW AS ECS19, "
                StrSql = StrSql + "EQUIP20.INSTKW AS ECS20, "
                StrSql = StrSql + "EQUIP21.INSTKW AS ECS21, "
                StrSql = StrSql + "EQUIP22.INSTKW AS ECS22, "
                StrSql = StrSql + "EQUIP23.INSTKW AS ECS23, "
                StrSql = StrSql + "EQUIP24.INSTKW AS ECS24, "
                StrSql = StrSql + "EQUIP25.INSTKW AS ECS25, "
                StrSql = StrSql + "EQUIP26.INSTKW AS ECS26, "
                StrSql = StrSql + "EQUIP27.INSTKW AS ECS27, "
                StrSql = StrSql + "EQUIP28.INSTKW AS ECS28, "
                StrSql = StrSql + "EQUIP29.INSTKW AS ECS29, "
                StrSql = StrSql + "EQUIP30.INSTKW AS ECS30, "
                StrSql = StrSql + "EQEGPREF.M1 AS ECP1, "
                StrSql = StrSql + "EQEGPREF.M2 AS ECP2, "
                StrSql = StrSql + "EQEGPREF.M3 AS ECP3, "
                StrSql = StrSql + "EQEGPREF.M4 AS ECP4, "
                StrSql = StrSql + "EQEGPREF.M5 AS ECP5, "
                StrSql = StrSql + "EQEGPREF.M6 AS ECP6, "
                StrSql = StrSql + "EQEGPREF.M7 AS ECP7, "
                StrSql = StrSql + "EQEGPREF.M8 AS ECP8, "
                StrSql = StrSql + "EQEGPREF.M9 AS ECP9, "
                StrSql = StrSql + "EQEGPREF.M10 AS ECP10, "
                StrSql = StrSql + "EQEGPREF.M11 AS ECP11, "
                StrSql = StrSql + "EQEGPREF.M12 AS ECP12, "
                StrSql = StrSql + "EQEGPREF.M13 AS ECP13, "
                StrSql = StrSql + "EQEGPREF.M14 AS ECP14, "
                StrSql = StrSql + "EQEGPREF.M15 AS ECP15, "
                StrSql = StrSql + "EQEGPREF.M16 AS ECP16, "
                StrSql = StrSql + "EQEGPREF.M17 AS ECP17, "
                StrSql = StrSql + "EQEGPREF.M18 AS ECP18, "
                StrSql = StrSql + "EQEGPREF.M19 AS ECP19, "
                StrSql = StrSql + "EQEGPREF.M20 AS ECP20, "
                StrSql = StrSql + "EQEGPREF.M21 AS ECP21, "
                StrSql = StrSql + "EQEGPREF.M22 AS ECP22, "
                StrSql = StrSql + "EQEGPREF.M23 AS ECP23, "
                StrSql = StrSql + "EQEGPREF.M24 AS ECP24, "
                StrSql = StrSql + "EQEGPREF.M25 AS ECP25, "
                StrSql = StrSql + "EQEGPREF.M26 AS ECP26, "
                StrSql = StrSql + "EQEGPREF.M27 AS ECP27, "
                StrSql = StrSql + "EQEGPREF.M28 AS ECP28, "
                StrSql = StrSql + "EQEGPREF.M29 AS ECP29, "
                StrSql = StrSql + "EQEGPREF.M30 AS ECP30, "
                StrSql = StrSql + "EQUIP1.NTGKW AS NGCS1, "
                StrSql = StrSql + "EQUIP2.NTGKW AS NGCS2, "
                StrSql = StrSql + "EQUIP3.NTGKW AS NGCS3, "
                StrSql = StrSql + "EQUIP4.NTGKW AS NGCS4, "
                StrSql = StrSql + "EQUIP5.NTGKW AS NGCS5, "
                StrSql = StrSql + "EQUIP6.NTGKW AS NGCS6, "
                StrSql = StrSql + "EQUIP7.NTGKW AS NGCS7, "
                StrSql = StrSql + "EQUIP8.NTGKW AS NGCS8, "
                StrSql = StrSql + "EQUIP9.NTGKW AS NGCS9, "
                StrSql = StrSql + "EQUIP10.NTGKW AS NGCS10, "
                StrSql = StrSql + "EQUIP11.NTGKW AS NGCS11, "
                StrSql = StrSql + "EQUIP12.NTGKW AS NGCS12, "
                StrSql = StrSql + "EQUIP13.NTGKW AS NGCS13, "
                StrSql = StrSql + "EQUIP14.NTGKW AS NGCS14, "
                StrSql = StrSql + "EQUIP15.NTGKW AS NGCS15, "
                StrSql = StrSql + "EQUIP16.NTGKW AS NGCS16, "
                StrSql = StrSql + "EQUIP17.NTGKW AS NGCS17, "
                StrSql = StrSql + "EQUIP18.NTGKW AS NGCS18, "
                StrSql = StrSql + "EQUIP19.NTGKW AS NGCS19, "
                StrSql = StrSql + "EQUIP20.NTGKW AS NGCS20, "
                StrSql = StrSql + "EQUIP21.NTGKW AS NGCS21, "
                StrSql = StrSql + "EQUIP22.NTGKW AS NGCS22, "
                StrSql = StrSql + "EQUIP23.NTGKW AS NGCS23, "
                StrSql = StrSql + "EQUIP24.NTGKW AS NGCS24, "
                StrSql = StrSql + "EQUIP25.NTGKW AS NGCS25, "
                StrSql = StrSql + "EQUIP26.NTGKW AS NGCS26, "
                StrSql = StrSql + "EQUIP27.NTGKW AS NGCS27, "
                StrSql = StrSql + "EQUIP28.NTGKW AS NGCS28, "
                StrSql = StrSql + "EQUIP29.NTGKW AS NGCS29, "
                StrSql = StrSql + "EQUIP30.NTGKW AS NGCS30, "
                StrSql = StrSql + "EQNGPREF.M1 AS NGCP1, "
                StrSql = StrSql + "EQNGPREF.M2 AS NGCP2, "
                StrSql = StrSql + "EQNGPREF.M3 AS NGCP3, "
                StrSql = StrSql + "EQNGPREF.M4 AS NGCP4, "
                StrSql = StrSql + "EQNGPREF.M5 AS NGCP5, "
                StrSql = StrSql + "EQNGPREF.M6 AS NGCP6, "
                StrSql = StrSql + "EQNGPREF.M7 AS NGCP7, "
                StrSql = StrSql + "EQNGPREF.M8 AS NGCP8, "
                StrSql = StrSql + "EQNGPREF.M9 AS NGCP9, "
                StrSql = StrSql + "EQNGPREF.M10 AS NGCP10, "
                StrSql = StrSql + "EQNGPREF.M11 AS NGCP11, "
                StrSql = StrSql + "EQNGPREF.M12 AS NGCP12, "
                StrSql = StrSql + "EQNGPREF.M13 AS NGCP13, "
                StrSql = StrSql + "EQNGPREF.M14 AS NGCP14, "
                StrSql = StrSql + "EQNGPREF.M15 AS NGCP15, "
                StrSql = StrSql + "EQNGPREF.M16 AS NGCP16, "
                StrSql = StrSql + "EQNGPREF.M17 AS NGCP17, "
                StrSql = StrSql + "EQNGPREF.M18 AS NGCP18, "
                StrSql = StrSql + "EQNGPREF.M19 AS NGCP19, "
                StrSql = StrSql + "EQNGPREF.M20 AS NGCP20, "
                StrSql = StrSql + "EQNGPREF.M21 AS NGCP21, "
                StrSql = StrSql + "EQNGPREF.M22 AS NGCP22, "
                StrSql = StrSql + "EQNGPREF.M23 AS NGCP23, "
                StrSql = StrSql + "EQNGPREF.M24 AS NGCP24, "
                StrSql = StrSql + "EQNGPREF.M25 AS NGCP25, "
                StrSql = StrSql + "EQNGPREF.M26 AS NGCP26, "
                StrSql = StrSql + "EQNGPREF.M27 AS NGCP27, "
                StrSql = StrSql + "EQNGPREF.M28 AS NGCP28, "
                StrSql = StrSql + "EQNGPREF.M29 AS NGCP29, "
                StrSql = StrSql + "EQNGPREF.M30 AS NGCP30, "
                StrSql = StrSql + "EQDEP.M1 AS DEP1, "
                StrSql = StrSql + "EQDEP.M2 AS DEP2, "
                StrSql = StrSql + "EQDEP.M3 AS DEP3, "
                StrSql = StrSql + "EQDEP.M4 AS DEP4, "
                StrSql = StrSql + "EQDEP.M5 AS DEP5, "
                StrSql = StrSql + "EQDEP.M6 AS DEP6, "
                StrSql = StrSql + "EQDEP.M7 AS DEP7, "
                StrSql = StrSql + "EQDEP.M8 AS DEP8, "
                StrSql = StrSql + "EQDEP.M9 AS DEP9, "
                StrSql = StrSql + "EQDEP.M10 AS DEP10, "
                StrSql = StrSql + "EQDEP.M11 AS DEP11, "
                StrSql = StrSql + "EQDEP.M12 AS DEP12, "
                StrSql = StrSql + "EQDEP.M13 AS DEP13, "
                StrSql = StrSql + "EQDEP.M14 AS DEP14, "
                StrSql = StrSql + "EQDEP.M15 AS DEP15, "
                StrSql = StrSql + "EQDEP.M16 AS DEP16, "
                StrSql = StrSql + "EQDEP.M17 AS DEP17, "
                StrSql = StrSql + "EQDEP.M18 AS DEP18, "
                StrSql = StrSql + "EQDEP.M19 AS DEP19, "
                StrSql = StrSql + "EQDEP.M20 AS DEP20, "
                StrSql = StrSql + "EQDEP.M21 AS DEP21, "
                StrSql = StrSql + "EQDEP.M22 AS DEP22, "
                StrSql = StrSql + "EQDEP.M23 AS DEP23, "
                StrSql = StrSql + "EQDEP.M24 AS DEP24, "
                StrSql = StrSql + "EQDEP.M25 AS DEP25, "
                StrSql = StrSql + "EQDEP.M26 AS DEP26, "
                StrSql = StrSql + "EQDEP.M27 AS DEP27, "
                StrSql = StrSql + "EQDEP.M28 AS DEP28, "
                StrSql = StrSql + "EQDEP.M29 AS DEP29, "
                StrSql = StrSql + "EQDEP.M30 AS DEP30, "
                'BUG#344
                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30 "
                'END BUG#344
                StrSql = StrSql + "FROM EQUIPMENTTYPE EQUIP "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIP.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIP.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIP.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIP.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIP.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIP.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIP.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIP.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIP.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIP.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIP.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIP.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIP.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIP.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIP.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIP.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIP.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIP.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIP.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIP.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIP.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIP.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIP.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIP.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIP.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIP.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIP.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIP.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIP.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIP.M30 "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTCOST EQCOS "
                StrSql = StrSql + "ON EQCOS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTAREA EQAR "
                StrSql = StrSql + "ON EQAR.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPENERGYPREF EQEGPREF "
                StrSql = StrSql + "ON EQEGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPNATURALGASPREF EQNGPREF "
                StrSql = StrSql + "ON EQNGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTDEP EQDEP "
                StrSql = StrSql + "ON EQDEP.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTNUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIP.CASEID "

                'EQUIPARCH 
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH1 "
                StrSql = StrSql + "ON EQUIPARCH1.EQUIPID=EQUIP.M1 AND EQUIPARCH1.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH1.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH2 "
                StrSql = StrSql + "ON EQUIPARCH2.EQUIPID=EQUIP.M2 AND EQUIPARCH2.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH2.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH3 "
                StrSql = StrSql + "ON EQUIPARCH3.EQUIPID=EQUIP.M3 AND EQUIPARCH3.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH3.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH4 "
                StrSql = StrSql + "ON EQUIPARCH4.EQUIPID=EQUIP.M4 AND EQUIPARCH4.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH4.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH5 "
                StrSql = StrSql + "ON EQUIPARCH5.EQUIPID=EQUIP.M5 AND EQUIPARCH5.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH5.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH6 "
                StrSql = StrSql + "ON EQUIPARCH6.EQUIPID=EQUIP.M6 AND EQUIPARCH6.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH6.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH7 "
                StrSql = StrSql + "ON EQUIPARCH7.EQUIPID=EQUIP.M7 AND EQUIPARCH7.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH7.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH8 "
                StrSql = StrSql + "ON EQUIPARCH8.EQUIPID=EQUIP.M8 AND EQUIPARCH8.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH8.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH9 "
                StrSql = StrSql + "ON EQUIPARCH9.EQUIPID=EQUIP.M9 AND EQUIPARCH9.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH9.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH10 "
                StrSql = StrSql + "ON EQUIPARCH10.EQUIPID=EQUIP.M10 AND EQUIPARCH10.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH10.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH11 "
                StrSql = StrSql + "ON EQUIPARCH11.EQUIPID=EQUIP.M11 AND EQUIPARCH11.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH11.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH12 "
                StrSql = StrSql + "ON EQUIPARCH12.EQUIPID=EQUIP.M12 AND EQUIPARCH12.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH12.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH13 "
                StrSql = StrSql + "ON EQUIPARCH13.EQUIPID=EQUIP.M13 AND EQUIPARCH13.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH13.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH14 "
                StrSql = StrSql + "ON EQUIPARCH14.EQUIPID=EQUIP.M14 AND EQUIPARCH14.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH14.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH15 "
                StrSql = StrSql + "ON EQUIPARCH15.EQUIPID=EQUIP.M15 AND EQUIPARCH15.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH15.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH16 "
                StrSql = StrSql + "ON EQUIPARCH16.EQUIPID=EQUIP.M16 AND EQUIPARCH16.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH16.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH17 "
                StrSql = StrSql + "ON EQUIPARCH17.EQUIPID=EQUIP.M17 AND EQUIPARCH17.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH17.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH18 "
                StrSql = StrSql + "ON EQUIPARCH18.EQUIPID=EQUIP.M18 AND EQUIPARCH18.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH18.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH19 "
                StrSql = StrSql + "ON EQUIPARCH19.EQUIPID=EQUIP.M19 AND EQUIPARCH19.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH19.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH20 "
                StrSql = StrSql + "ON EQUIPARCH20.EQUIPID=EQUIP.M20 AND EQUIPARCH20.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH20.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH21 "
                StrSql = StrSql + "ON EQUIPARCH21.EQUIPID=EQUIP.M21 AND EQUIPARCH21.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH21.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH22 "
                StrSql = StrSql + "ON EQUIPARCH22.EQUIPID=EQUIP.M22 AND EQUIPARCH22.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH22.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH23 "
                StrSql = StrSql + "ON EQUIPARCH23.EQUIPID=EQUIP.M23 AND EQUIPARCH23.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH23.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH24 "
                StrSql = StrSql + "ON EQUIPARCH24.EQUIPID=EQUIP.M24 AND EQUIPARCH24.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH24.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH25 "
                StrSql = StrSql + "ON EQUIPARCH25.EQUIPID=EQUIP.M25 AND EQUIPARCH25.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH25.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH26 "
                StrSql = StrSql + "ON EQUIPARCH26.EQUIPID=EQUIP.M26 AND EQUIPARCH26.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH26.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH27 "
                StrSql = StrSql + "ON EQUIPARCH27.EQUIPID=EQUIP.M27 AND EQUIPARCH27.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH27.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH28 "
                StrSql = StrSql + "ON EQUIPARCH28.EQUIPID=EQUIP.M28 AND EQUIPARCH28.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH28.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH29 "
                StrSql = StrSql + "ON EQUIPARCH29.EQUIPID=EQUIP.M29 AND EQUIPARCH29.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH29.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH30 "
                StrSql = StrSql + "ON EQUIPARCH30.EQUIPID=EQUIP.M30 AND EQUIPARCH30.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH30.EFFDATE =PREF.EFFDATE "
                'END
                StrSql = StrSql + "WHERE EQUIP.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetSupportEquipmentInDetailsNEW002(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT 	EQUIP.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS ASSESTCOSTUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN 'SQUARE FEET'  ELSE 'SQUARE METERS' END AS PLANTAREAUNIT, "
                StrSql = StrSql + "EQUIP.M1 AS ASSETID1, "
                StrSql = StrSql + "EQUIP.M2  AS ASSETID2, "
                StrSql = StrSql + "EQUIP.M3  AS ASSETID3, "
                StrSql = StrSql + "EQUIP.M4  AS ASSETID4, "
                StrSql = StrSql + "EQUIP.M5  AS ASSETID5, "
                StrSql = StrSql + "EQUIP.M6  AS ASSETID6, "
                StrSql = StrSql + "EQUIP.M7  AS ASSETID7, "
                StrSql = StrSql + "EQUIP.M8  AS ASSETID8, "
                StrSql = StrSql + "EQUIP.M9 AS ASSETID9, "
                StrSql = StrSql + "EQUIP.M10 AS ASSETID10, "
                StrSql = StrSql + "EQUIP.M11 AS ASSETID11, "
                StrSql = StrSql + "EQUIP.M12 AS ASSETID12, "
                StrSql = StrSql + "EQUIP.M13 AS ASSETID13, "
                StrSql = StrSql + "EQUIP.M14 AS ASSETID14, "
                StrSql = StrSql + "EQUIP.M15 AS ASSETID15, "
                StrSql = StrSql + "EQUIP.M16 AS ASSETID16, "
                StrSql = StrSql + "EQUIP.M17 AS ASSETID17, "
                StrSql = StrSql + "EQUIP.M18 AS ASSETID18, "
                StrSql = StrSql + "EQUIP.M19 AS ASSETID19, "
                StrSql = StrSql + "EQUIP.M20 AS ASSETID20, "
                StrSql = StrSql + "EQUIP.M21 AS ASSETID21, "
                StrSql = StrSql + "EQUIP.M22 AS ASSETID22, "
                StrSql = StrSql + "EQUIP.M23 AS ASSETID23, "
                StrSql = StrSql + "EQUIP.M24 AS ASSETID24, "
                StrSql = StrSql + "EQUIP.M25 AS ASSETID25, "
                StrSql = StrSql + "EQUIP.M26 AS ASSETID26, "
                StrSql = StrSql + "EQUIP.M27 AS ASSETID27, "
                StrSql = StrSql + "EQUIP.M28 AS ASSETID28, "
                StrSql = StrSql + "EQUIP.M29 AS ASSETID29, "
                StrSql = StrSql + "EQUIP.M30 AS ASSETID30, "
                'StrSql = StrSql + "(EQUIP1.COST *  PREF.CURR) AS ASSETS1, "
                'StrSql = StrSql + "(EQUIP2.COST *  PREF.CURR) AS ASSETS2, "
                'StrSql = StrSql + "(EQUIP3.COST *  PREF.CURR) AS ASSETS3, "
                'StrSql = StrSql + "(EQUIP4.COST *  PREF.CURR) AS ASSETS4, "
                'StrSql = StrSql + "(EQUIP5.COST *  PREF.CURR) AS ASSETS5, "
                'StrSql = StrSql + "(EQUIP6.COST *  PREF.CURR) AS ASSETS6, "
                'StrSql = StrSql + "(EQUIP7.COST *  PREF.CURR) AS ASSETS7, "
                'StrSql = StrSql + "(EQUIP8.COST *  PREF.CURR) AS ASSETS8, "
                'StrSql = StrSql + "(EQUIP9.COST *  PREF.CURR) AS ASSETS9, "
                'StrSql = StrSql + "(EQUIP10.COST *  PREF.CURR) AS ASSETS10, "
                'StrSql = StrSql + "(EQUIP11.COST *  PREF.CURR) AS ASSETS11, "
                'StrSql = StrSql + "(EQUIP12.COST *  PREF.CURR) AS ASSETS12, "
                'StrSql = StrSql + "(EQUIP13.COST *  PREF.CURR) AS ASSETS13, "
                'StrSql = StrSql + "(EQUIP14.COST *  PREF.CURR) AS ASSETS14, "
                'StrSql = StrSql + "(EQUIP15.COST *  PREF.CURR) AS ASSETS15, "
                'StrSql = StrSql + "(EQUIP16.COST *  PREF.CURR) AS ASSETS16, "
                'StrSql = StrSql + "(EQUIP17.COST *  PREF.CURR) AS ASSETS17, "
                'StrSql = StrSql + "(EQUIP18.COST *  PREF.CURR) AS ASSETS18, "
                'StrSql = StrSql + "(EQUIP19.COST *  PREF.CURR) AS ASSETS19, "
                'StrSql = StrSql + "(EQUIP20.COST *  PREF.CURR) AS ASSETS20, "
                'StrSql = StrSql + "(EQUIP21.COST *  PREF.CURR) AS ASSETS21, "
                'StrSql = StrSql + "(EQUIP22.COST *  PREF.CURR) AS ASSETS22, "
                'StrSql = StrSql + "(EQUIP23.COST *  PREF.CURR) AS ASSETS23, "
                'StrSql = StrSql + "(EQUIP24.COST *  PREF.CURR) AS ASSETS24, "
                'StrSql = StrSql + "(EQUIP25.COST *  PREF.CURR) AS ASSETS25, "
                'StrSql = StrSql + "(EQUIP26.COST *  PREF.CURR) AS ASSETS26, "
                'StrSql = StrSql + "(EQUIP27.COST *  PREF.CURR) AS ASSETS27, "
                'StrSql = StrSql + "(EQUIP28.COST *  PREF.CURR) AS ASSETS28, "
                'StrSql = StrSql + "(EQUIP29.COST *  PREF.CURR) AS ASSETS29, "
                'StrSql = StrSql + "(EQUIP30.COST *  PREF.CURR) AS ASSETS30, "
                StrSql = StrSql + "NVL((EQUIP2ARCH1.COST *  PREF.CURR),0) AS ASSETS1, "
                StrSql = StrSql + "NVL((EQUIP2ARCH2.COST *  PREF.CURR),0) AS ASSETS2, "
                StrSql = StrSql + "NVL((EQUIP2ARCH3.COST *  PREF.CURR),0) AS ASSETS3, "
                StrSql = StrSql + "NVL((EQUIP2ARCH4.COST *  PREF.CURR),0) AS ASSETS4, "
                StrSql = StrSql + "NVL((EQUIP2ARCH5.COST *  PREF.CURR),0) AS ASSETS5, "
                StrSql = StrSql + "NVL((EQUIP2ARCH6.COST *  PREF.CURR),0) AS ASSETS6, "
                StrSql = StrSql + "NVL((EQUIP2ARCH7.COST *  PREF.CURR),0) AS ASSETS7, "
                StrSql = StrSql + "NVL((EQUIP2ARCH8.COST *  PREF.CURR),0) AS ASSETS8, "
                StrSql = StrSql + "NVL((EQUIP2ARCH9.COST *  PREF.CURR),0) AS ASSETS9, "
                StrSql = StrSql + "NVL((EQUIP2ARCH10.COST *  PREF.CURR),0) AS ASSETS10, "
                StrSql = StrSql + "NVL((EQUIP2ARCH11.COST *  PREF.CURR),0) AS ASSETS11, "
                StrSql = StrSql + "NVL((EQUIP2ARCH12.COST *  PREF.CURR),0) AS ASSETS12, "
                StrSql = StrSql + "NVL((EQUIP2ARCH13.COST *  PREF.CURR),0) AS ASSETS13, "
                StrSql = StrSql + "NVL((EQUIP2ARCH14.COST *  PREF.CURR),0) AS ASSETS14, "
                StrSql = StrSql + "NVL((EQUIP2ARCH15.COST *  PREF.CURR),0) AS ASSETS15, "
                StrSql = StrSql + "NVL((EQUIP2ARCH16.COST *  PREF.CURR),0) AS ASSETS16, "
                StrSql = StrSql + "NVL((EQUIP2ARCH17.COST *  PREF.CURR),0) AS ASSETS17, "
                StrSql = StrSql + "NVL((EQUIP2ARCH18.COST *  PREF.CURR),0) AS ASSETS18, "
                StrSql = StrSql + "NVL((EQUIP2ARCH19.COST *  PREF.CURR),0) AS ASSETS19, "
                StrSql = StrSql + "NVL((EQUIP2ARCH20.COST *  PREF.CURR),0) AS ASSETS20, "
                StrSql = StrSql + "NVL((EQUIP2ARCH21.COST *  PREF.CURR),0) AS ASSETS21, "
                StrSql = StrSql + "NVL((EQUIP2ARCH22.COST *  PREF.CURR),0) AS ASSETS22, "
                StrSql = StrSql + "NVL((EQUIP2ARCH23.COST *  PREF.CURR),0) AS ASSETS23, "
                StrSql = StrSql + "NVL((EQUIP2ARCH24.COST *  PREF.CURR),0) AS ASSETS24, "
                StrSql = StrSql + "NVL((EQUIP2ARCH25.COST *  PREF.CURR),0) AS ASSETS25, "
                StrSql = StrSql + "NVL((EQUIP2ARCH26.COST *  PREF.CURR),0) AS ASSETS26, "
                StrSql = StrSql + "NVL((EQUIP2ARCH27.COST *  PREF.CURR),0) AS ASSETS27, "
                StrSql = StrSql + "NVL((EQUIP2ARCH28.COST *  PREF.CURR),0) AS ASSETS28, "
                StrSql = StrSql + "NVL((EQUIP2ARCH29.COST *  PREF.CURR),0) AS ASSETS29, "
                StrSql = StrSql + "NVL((EQUIP2ARCH30.COST *  PREF.CURR),0) AS ASSETS30, "

                StrSql = StrSql + "(EQCOS.M1*  PREF.CURR) AS ASSETP1, "
                StrSql = StrSql + "(EQCOS.M2*  PREF.CURR) AS ASSETP2, "
                StrSql = StrSql + "(EQCOS.M3*  PREF.CURR) AS ASSETP3, "
                StrSql = StrSql + "(EQCOS.M4*  PREF.CURR) AS ASSETP4, "
                StrSql = StrSql + "(EQCOS.M5*  PREF.CURR) AS ASSETP5, "
                StrSql = StrSql + "(EQCOS.M6*  PREF.CURR) AS ASSETP6, "
                StrSql = StrSql + "(EQCOS.M7*  PREF.CURR) AS ASSETP7, "
                StrSql = StrSql + "(EQCOS.M8*  PREF.CURR) AS ASSETP8, "
                StrSql = StrSql + "(EQCOS.M9*  PREF.CURR) AS ASSETP9, "
                StrSql = StrSql + "(EQCOS.M10*  PREF.CURR) AS ASSETP10, "
                StrSql = StrSql + "(EQCOS.M11*  PREF.CURR) AS ASSETP11, "
                StrSql = StrSql + "(EQCOS.M12*  PREF.CURR) AS ASSETP12, "
                StrSql = StrSql + "(EQCOS.M13*  PREF.CURR) AS ASSETP13, "
                StrSql = StrSql + "(EQCOS.M14*  PREF.CURR) AS ASSETP14, "
                StrSql = StrSql + "(EQCOS.M15*  PREF.CURR) AS ASSETP15, "
                StrSql = StrSql + "(EQCOS.M16*  PREF.CURR) AS ASSETP16, "
                StrSql = StrSql + "(EQCOS.M17*  PREF.CURR) AS ASSETP17, "
                StrSql = StrSql + "(EQCOS.M18*  PREF.CURR) AS ASSETP18, "
                StrSql = StrSql + "(EQCOS.M19*  PREF.CURR) AS ASSETP19, "
                StrSql = StrSql + "(EQCOS.M20*  PREF.CURR) AS ASSETP20, "
                StrSql = StrSql + "(EQCOS.M21*  PREF.CURR) AS ASSETP21, "
                StrSql = StrSql + "(EQCOS.M22*  PREF.CURR) AS ASSETP22, "
                StrSql = StrSql + "(EQCOS.M23*  PREF.CURR) AS ASSETP23, "
                StrSql = StrSql + "(EQCOS.M24*  PREF.CURR) AS ASSETP24, "
                StrSql = StrSql + "(EQCOS.M25*  PREF.CURR) AS ASSETP25, "
                StrSql = StrSql + "(EQCOS.M26*  PREF.CURR) AS ASSETP26, "
                StrSql = StrSql + "(EQCOS.M27*  PREF.CURR) AS ASSETP27, "
                StrSql = StrSql + "(EQCOS.M28*  PREF.CURR) AS ASSETP28, "
                StrSql = StrSql + "(EQCOS.M29*  PREF.CURR) AS ASSETP29, "
                StrSql = StrSql + "(EQCOS.M30*  PREF.CURR) AS ASSETP30, "
                StrSql = StrSql + "EQUIP1.INSTKW AS ECS1, "
                StrSql = StrSql + "EQUIP2.INSTKW AS ECS2, "
                StrSql = StrSql + "EQUIP3.INSTKW AS ECS3, "
                StrSql = StrSql + "EQUIP4.INSTKW AS ECS4, "
                StrSql = StrSql + "EQUIP5.INSTKW AS ECS5, "
                StrSql = StrSql + "EQUIP6.INSTKW AS ECS6, "
                StrSql = StrSql + "EQUIP7.INSTKW AS ECS7, "
                StrSql = StrSql + "EQUIP8.INSTKW AS ECS8, "
                StrSql = StrSql + "EQUIP9.INSTKW AS ECS9, "
                StrSql = StrSql + "EQUIP10.INSTKW AS ECS10, "
                StrSql = StrSql + "EQUIP11.INSTKW AS ECS11, "
                StrSql = StrSql + "EQUIP12.INSTKW AS ECS12, "
                StrSql = StrSql + "EQUIP13.INSTKW AS ECS13, "
                StrSql = StrSql + "EQUIP14.INSTKW AS ECS14, "
                StrSql = StrSql + "EQUIP15.INSTKW AS ECS15, "
                StrSql = StrSql + "EQUIP16.INSTKW AS ECS16, "
                StrSql = StrSql + "EQUIP17.INSTKW AS ECS17, "
                StrSql = StrSql + "EQUIP18.INSTKW AS ECS18, "
                StrSql = StrSql + "EQUIP19.INSTKW AS ECS19, "
                StrSql = StrSql + "EQUIP20.INSTKW AS ECS20, "
                StrSql = StrSql + "EQUIP21.INSTKW AS ECS21, "
                StrSql = StrSql + "EQUIP22.INSTKW AS ECS22, "
                StrSql = StrSql + "EQUIP23.INSTKW AS ECS23, "
                StrSql = StrSql + "EQUIP24.INSTKW AS ECS24, "
                StrSql = StrSql + "EQUIP25.INSTKW AS ECS25, "
                StrSql = StrSql + "EQUIP26.INSTKW AS ECS26, "
                StrSql = StrSql + "EQUIP27.INSTKW AS ECS27, "
                StrSql = StrSql + "EQUIP28.INSTKW AS ECS28, "
                StrSql = StrSql + "EQUIP29.INSTKW AS ECS29, "
                StrSql = StrSql + "EQUIP30.INSTKW AS ECS30, "
                StrSql = StrSql + "EQEGPREF.M1 AS ECP1, "
                StrSql = StrSql + "EQEGPREF.M2 AS ECP2, "
                StrSql = StrSql + "EQEGPREF.M3 AS ECP3, "
                StrSql = StrSql + "EQEGPREF.M4 AS ECP4, "
                StrSql = StrSql + "EQEGPREF.M5 AS ECP5, "
                StrSql = StrSql + "EQEGPREF.M6 AS ECP6, "
                StrSql = StrSql + "EQEGPREF.M7 AS ECP7, "
                StrSql = StrSql + "EQEGPREF.M8 AS ECP8, "
                StrSql = StrSql + "EQEGPREF.M9 AS ECP9, "
                StrSql = StrSql + "EQEGPREF.M10 AS ECP10, "
                StrSql = StrSql + "EQEGPREF.M11 AS ECP11, "
                StrSql = StrSql + "EQEGPREF.M12 AS ECP12, "
                StrSql = StrSql + "EQEGPREF.M13 AS ECP13, "
                StrSql = StrSql + "EQEGPREF.M14 AS ECP14, "
                StrSql = StrSql + "EQEGPREF.M15 AS ECP15, "
                StrSql = StrSql + "EQEGPREF.M16 AS ECP16, "
                StrSql = StrSql + "EQEGPREF.M17 AS ECP17, "
                StrSql = StrSql + "EQEGPREF.M18 AS ECP18, "
                StrSql = StrSql + "EQEGPREF.M19 AS ECP19, "
                StrSql = StrSql + "EQEGPREF.M20 AS ECP20, "
                StrSql = StrSql + "EQEGPREF.M21 AS ECP21, "
                StrSql = StrSql + "EQEGPREF.M22 AS ECP22, "
                StrSql = StrSql + "EQEGPREF.M23 AS ECP23, "
                StrSql = StrSql + "EQEGPREF.M24 AS ECP24, "
                StrSql = StrSql + "EQEGPREF.M25 AS ECP25, "
                StrSql = StrSql + "EQEGPREF.M26 AS ECP26, "
                StrSql = StrSql + "EQEGPREF.M27 AS ECP27, "
                StrSql = StrSql + "EQEGPREF.M28 AS ECP28, "
                StrSql = StrSql + "EQEGPREF.M29 AS ECP29, "
                StrSql = StrSql + "EQEGPREF.M30 AS ECP30, "
                StrSql = StrSql + "EQUIP1.NTGKW AS NGCS1, "
                StrSql = StrSql + "EQUIP2.NTGKW AS NGCS2, "
                StrSql = StrSql + "EQUIP3.NTGKW AS NGCS3, "
                StrSql = StrSql + "EQUIP4.NTGKW AS NGCS4, "
                StrSql = StrSql + "EQUIP5.NTGKW AS NGCS5, "
                StrSql = StrSql + "EQUIP6.NTGKW AS NGCS6, "
                StrSql = StrSql + "EQUIP7.NTGKW AS NGCS7, "
                StrSql = StrSql + "EQUIP8.NTGKW AS NGCS8, "
                StrSql = StrSql + "EQUIP9.NTGKW AS NGCS9, "
                StrSql = StrSql + "EQUIP10.NTGKW AS NGCS10, "
                StrSql = StrSql + "EQUIP11.NTGKW AS NGCS11, "
                StrSql = StrSql + "EQUIP12.NTGKW AS NGCS12, "
                StrSql = StrSql + "EQUIP13.NTGKW AS NGCS13, "
                StrSql = StrSql + "EQUIP14.NTGKW AS NGCS14, "
                StrSql = StrSql + "EQUIP15.NTGKW AS NGCS15, "
                StrSql = StrSql + "EQUIP16.NTGKW AS NGCS16, "
                StrSql = StrSql + "EQUIP17.NTGKW AS NGCS17, "
                StrSql = StrSql + "EQUIP18.NTGKW AS NGCS18, "
                StrSql = StrSql + "EQUIP19.NTGKW AS NGCS19, "
                StrSql = StrSql + "EQUIP20.NTGKW AS NGCS20, "
                StrSql = StrSql + "EQUIP21.NTGKW AS NGCS21, "
                StrSql = StrSql + "EQUIP22.NTGKW AS NGCS22, "
                StrSql = StrSql + "EQUIP23.NTGKW AS NGCS23, "
                StrSql = StrSql + "EQUIP24.NTGKW AS NGCS24, "
                StrSql = StrSql + "EQUIP25.NTGKW AS NGCS25, "
                StrSql = StrSql + "EQUIP26.NTGKW AS NGCS26, "
                StrSql = StrSql + "EQUIP27.NTGKW AS NGCS27, "
                StrSql = StrSql + "EQUIP28.NTGKW AS NGCS28, "
                StrSql = StrSql + "EQUIP29.NTGKW AS NGCS29, "
                StrSql = StrSql + "EQUIP30.NTGKW AS NGCS30, "
                StrSql = StrSql + "EQNGPREF.M1 AS NGCP1, "
                StrSql = StrSql + "EQNGPREF.M2 AS NGCP2, "
                StrSql = StrSql + "EQNGPREF.M3 AS NGCP3, "
                StrSql = StrSql + "EQNGPREF.M4 AS NGCP4, "
                StrSql = StrSql + "EQNGPREF.M5 AS NGCP5, "
                StrSql = StrSql + "EQNGPREF.M6 AS NGCP6, "
                StrSql = StrSql + "EQNGPREF.M7 AS NGCP7, "
                StrSql = StrSql + "EQNGPREF.M8 AS NGCP8, "
                StrSql = StrSql + "EQNGPREF.M9 AS NGCP9, "
                StrSql = StrSql + "EQNGPREF.M10 AS NGCP10, "
                StrSql = StrSql + "EQNGPREF.M11 AS NGCP11, "
                StrSql = StrSql + "EQNGPREF.M12 AS NGCP12, "
                StrSql = StrSql + "EQNGPREF.M13 AS NGCP13, "
                StrSql = StrSql + "EQNGPREF.M14 AS NGCP14, "
                StrSql = StrSql + "EQNGPREF.M15 AS NGCP15, "
                StrSql = StrSql + "EQNGPREF.M16 AS NGCP16, "
                StrSql = StrSql + "EQNGPREF.M17 AS NGCP17, "
                StrSql = StrSql + "EQNGPREF.M18 AS NGCP18, "
                StrSql = StrSql + "EQNGPREF.M19 AS NGCP19, "
                StrSql = StrSql + "EQNGPREF.M20 AS NGCP20, "
                StrSql = StrSql + "EQNGPREF.M21 AS NGCP21, "
                StrSql = StrSql + "EQNGPREF.M22 AS NGCP22, "
                StrSql = StrSql + "EQNGPREF.M23 AS NGCP23, "
                StrSql = StrSql + "EQNGPREF.M24 AS NGCP24, "
                StrSql = StrSql + "EQNGPREF.M25 AS NGCP25, "
                StrSql = StrSql + "EQNGPREF.M26 AS NGCP26, "
                StrSql = StrSql + "EQNGPREF.M27 AS NGCP27, "
                StrSql = StrSql + "EQNGPREF.M28 AS NGCP28, "
                StrSql = StrSql + "EQNGPREF.M29 AS NGCP29, "
                StrSql = StrSql + "EQNGPREF.M30 AS NGCP30, "
                StrSql = StrSql + "EQHRS.M1 AS HRS1, "
                StrSql = StrSql + "EQHRS.M2 AS HRS2, "
                StrSql = StrSql + "EQHRS.M3 AS HRS3, "
                StrSql = StrSql + "EQHRS.M4 AS HRS4, "
                StrSql = StrSql + "EQHRS.M5 AS HRS5, "
                StrSql = StrSql + "EQHRS.M6 AS HRS6, "
                StrSql = StrSql + "EQHRS.M7 AS HRS7, "
                StrSql = StrSql + "EQHRS.M8 AS HRS8, "
                StrSql = StrSql + "EQHRS.M9 AS HRS9, "
                StrSql = StrSql + "EQHRS.M10 AS HRS10, "
                StrSql = StrSql + "EQHRS.M11 AS HRS11, "
                StrSql = StrSql + "EQHRS.M12 AS HRS12, "
                StrSql = StrSql + "EQHRS.M13 AS HRS13, "
                StrSql = StrSql + "EQHRS.M14 AS HRS14, "
                StrSql = StrSql + "EQHRS.M15 AS HRS15, "
                StrSql = StrSql + "EQHRS.M16 AS HRS16, "
                StrSql = StrSql + "EQHRS.M17 AS HRS17, "
                StrSql = StrSql + "EQHRS.M18 AS HRS18, "
                StrSql = StrSql + "EQHRS.M19 AS HRS19, "
                StrSql = StrSql + "EQHRS.M20 AS HRS20, "
                StrSql = StrSql + "EQHRS.M21 AS HRS21, "
                StrSql = StrSql + "EQHRS.M22 AS HRS22, "
                StrSql = StrSql + "EQHRS.M23 AS HRS23, "
                StrSql = StrSql + "EQHRS.M24 AS HRS24, "
                StrSql = StrSql + "EQHRS.M25 AS HRS25, "
                StrSql = StrSql + "EQHRS.M26 AS HRS26, "
                StrSql = StrSql + "EQHRS.M27 AS HRS27, "
                StrSql = StrSql + "EQHRS.M28 AS HRS28, "
                StrSql = StrSql + "EQHRS.M29 AS HRS29, "
                StrSql = StrSql + "EQHRS.M30 AS HRS30, "
                StrSql = StrSql + "EQCOSTTYPE.M1 AS COSTTYPE1, "
                StrSql = StrSql + "EQCOSTTYPE.M2 AS COSTTYPE2, "
                StrSql = StrSql + "EQCOSTTYPE.M3 AS COSTTYPE3, "
                StrSql = StrSql + "EQCOSTTYPE.M4 AS COSTTYPE4, "
                StrSql = StrSql + "EQCOSTTYPE.M5 AS COSTTYPE5, "
                StrSql = StrSql + "EQCOSTTYPE.M6 AS COSTTYPE6, "
                StrSql = StrSql + "EQCOSTTYPE.M7 AS COSTTYPE7, "
                StrSql = StrSql + "EQCOSTTYPE.M8 AS COSTTYPE8, "
                StrSql = StrSql + "EQCOSTTYPE.M9 AS COSTTYPE9, "
                StrSql = StrSql + "EQCOSTTYPE.M10 AS COSTTYPE10, "
                StrSql = StrSql + "EQCOSTTYPE.M11 AS COSTTYPE11, "
                StrSql = StrSql + "EQCOSTTYPE.M12 AS COSTTYPE12, "
                StrSql = StrSql + "EQCOSTTYPE.M13 AS COSTTYPE13, "
                StrSql = StrSql + "EQCOSTTYPE.M14 AS COSTTYPE14, "
                StrSql = StrSql + "EQCOSTTYPE.M15 AS COSTTYPE15, "
                StrSql = StrSql + "EQCOSTTYPE.M16 AS COSTTYPE16, "
                StrSql = StrSql + "EQCOSTTYPE.M17 AS COSTTYPE17, "
                StrSql = StrSql + "EQCOSTTYPE.M18 AS COSTTYPE18, "
                StrSql = StrSql + "EQCOSTTYPE.M19 AS COSTTYPE19, "
                StrSql = StrSql + "EQCOSTTYPE.M20 AS COSTTYPE20, "
                StrSql = StrSql + "EQCOSTTYPE.M21 AS COSTTYPE21, "
                StrSql = StrSql + "EQCOSTTYPE.M22 AS COSTTYPE22, "
                StrSql = StrSql + "EQCOSTTYPE.M23 AS COSTTYPE23, "
                StrSql = StrSql + "EQCOSTTYPE.M24 AS COSTTYPE24, "
                StrSql = StrSql + "EQCOSTTYPE.M25 AS COSTTYPE25, "
                StrSql = StrSql + "EQCOSTTYPE.M26 AS COSTTYPE26, "
                StrSql = StrSql + "EQCOSTTYPE.M27 AS COSTTYPE27, "
                StrSql = StrSql + "EQCOSTTYPE.M28 AS COSTTYPE28, "
                StrSql = StrSql + "EQCOSTTYPE.M29 AS COSTTYPE29, "
                StrSql = StrSql + "EQCOSTTYPE.M30 AS COSTTYPE30, "
                StrSql = StrSql + "EQDEP.M1 AS DEP1, "
                StrSql = StrSql + "EQDEP.M2 AS DEP2, "
                StrSql = StrSql + "EQDEP.M3 AS DEP3, "
                StrSql = StrSql + "EQDEP.M4 AS DEP4, "
                StrSql = StrSql + "EQDEP.M5 AS DEP5, "
                StrSql = StrSql + "EQDEP.M6 AS DEP6, "
                StrSql = StrSql + "EQDEP.M7 AS DEP7, "
                StrSql = StrSql + "EQDEP.M8 AS DEP8, "
                StrSql = StrSql + "EQDEP.M9 AS DEP9, "
                StrSql = StrSql + "EQDEP.M10 AS DEP10, "
                StrSql = StrSql + "EQDEP.M11 AS DEP11, "
                StrSql = StrSql + "EQDEP.M12 AS DEP12, "
                StrSql = StrSql + "EQDEP.M13 AS DEP13, "
                StrSql = StrSql + "EQDEP.M14 AS DEP14, "
                StrSql = StrSql + "EQDEP.M15 AS DEP15, "
                StrSql = StrSql + "EQDEP.M16 AS DEP16, "
                StrSql = StrSql + "EQDEP.M17 AS DEP17, "
                StrSql = StrSql + "EQDEP.M18 AS DEP18, "
                StrSql = StrSql + "EQDEP.M19 AS DEP19, "
                StrSql = StrSql + "EQDEP.M20 AS DEP20, "
                StrSql = StrSql + "EQDEP.M21 AS DEP21, "
                StrSql = StrSql + "EQDEP.M22 AS DEP22, "
                StrSql = StrSql + "EQDEP.M23 AS DEP23, "
                StrSql = StrSql + "EQDEP.M24 AS DEP24, "
                StrSql = StrSql + "EQDEP.M25 AS DEP25, "
                StrSql = StrSql + "EQDEP.M26 AS DEP26, "
                StrSql = StrSql + "EQDEP.M27 AS DEP27, "
                StrSql = StrSql + "EQDEP.M28 AS DEP28, "
                StrSql = StrSql + "EQDEP.M29 AS DEP29, "
                StrSql = StrSql + "EQDEP.M30 AS DEP30, "

                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30 "

                StrSql = StrSql + "FROM EQUIPMENT2TYPE EQUIP "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIP.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIP.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIP.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIP.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIP.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIP.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIP.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIP.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIP.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIP.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIP.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIP.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIP.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIP.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIP.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIP.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIP.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIP.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIP.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIP.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIP.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIP.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIP.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIP.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIP.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIP.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIP.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIP.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIP.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIP.M30 "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2COST EQCOS "
                StrSql = StrSql + "ON EQCOS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIP2ENERGYPREF EQEGPREF "
                StrSql = StrSql + "ON EQEGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIP2NATURALGASPREF EQNGPREF "
                StrSql = StrSql + "ON EQNGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN Equipment2DEP EQDEP "
                StrSql = StrSql + "ON EQDEP.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2MAHRS EQHRS "
                StrSql = StrSql + "ON EQHRS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2COSTTYPE EQCOSTTYPE "
                StrSql = StrSql + "ON EQCOSTTYPE.CASEID=EQUIP.CASEID "

                StrSql = StrSql + "INNER JOIN EQUIPMENT2NUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIP.CASEID "

                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH1 "
                StrSql = StrSql + "ON EQUIP2ARCH1.EQUIPID=EQUIP.M1 AND EQUIP2ARCH1.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH1.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH2 "
                StrSql = StrSql + "ON EQUIP2ARCH2.EQUIPID=EQUIP.M2 AND EQUIP2ARCH2.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH2.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH3 "
                StrSql = StrSql + "ON EQUIP2ARCH3.EQUIPID=EQUIP.M3 AND EQUIP2ARCH3.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH3.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH4 "
                StrSql = StrSql + "ON EQUIP2ARCH4.EQUIPID=EQUIP.M4 AND EQUIP2ARCH4.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH4.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH5 "
                StrSql = StrSql + "ON EQUIP2ARCH5.EQUIPID=EQUIP.M5 AND EQUIP2ARCH5.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH5.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH6 "
                StrSql = StrSql + "ON EQUIP2ARCH6.EQUIPID=EQUIP.M6 AND EQUIP2ARCH6.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH6.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH7 "
                StrSql = StrSql + "ON EQUIP2ARCH7.EQUIPID=EQUIP.M7 AND EQUIP2ARCH7.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH7.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH8 "
                StrSql = StrSql + "ON EQUIP2ARCH8.EQUIPID=EQUIP.M8 AND EQUIP2ARCH8.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH8.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH9 "
                StrSql = StrSql + "ON EQUIP2ARCH9.EQUIPID=EQUIP.M9 AND EQUIP2ARCH9.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH9.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH10 "
                StrSql = StrSql + "ON EQUIP2ARCH10.EQUIPID=EQUIP.M10 AND EQUIP2ARCH10.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH10.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH11 "
                StrSql = StrSql + "ON EQUIP2ARCH11.EQUIPID=EQUIP.M11 AND EQUIP2ARCH11.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH11.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH12 "
                StrSql = StrSql + "ON EQUIP2ARCH12.EQUIPID=EQUIP.M12 AND EQUIP2ARCH12.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH12.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH13 "
                StrSql = StrSql + "ON EQUIP2ARCH13.EQUIPID=EQUIP.M13 AND EQUIP2ARCH13.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH13.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH14 "
                StrSql = StrSql + "ON EQUIP2ARCH14.EQUIPID=EQUIP.M14 AND EQUIP2ARCH14.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH14.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH15 "
                StrSql = StrSql + "ON EQUIP2ARCH15.EQUIPID=EQUIP.M15 AND EQUIP2ARCH15.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH15.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH16 "
                StrSql = StrSql + "ON EQUIP2ARCH16.EQUIPID=EQUIP.M16 AND EQUIP2ARCH16.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH16.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH17 "
                StrSql = StrSql + "ON EQUIP2ARCH17.EQUIPID=EQUIP.M17 AND EQUIP2ARCH17.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH17.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH18 "
                StrSql = StrSql + "ON EQUIP2ARCH18.EQUIPID=EQUIP.M18 AND EQUIP2ARCH18.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH18.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH19 "
                StrSql = StrSql + "ON EQUIP2ARCH19.EQUIPID=EQUIP.M19 AND EQUIP2ARCH19.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH19.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH20 "
                StrSql = StrSql + "ON EQUIP2ARCH20.EQUIPID=EQUIP.M20 AND EQUIP2ARCH20.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH20.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH21 "
                StrSql = StrSql + "ON EQUIP2ARCH21.EQUIPID=EQUIP.M21 AND EQUIP2ARCH21.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH21.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH22 "
                StrSql = StrSql + "ON EQUIP2ARCH22.EQUIPID=EQUIP.M22 AND EQUIP2ARCH22.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH22.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH23 "
                StrSql = StrSql + "ON EQUIP2ARCH23.EQUIPID=EQUIP.M23 AND EQUIP2ARCH23.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH23.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH24 "
                StrSql = StrSql + "ON EQUIP2ARCH24.EQUIPID=EQUIP.M24 AND EQUIP2ARCH24.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH24.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH25 "
                StrSql = StrSql + "ON EQUIP2ARCH25.EQUIPID=EQUIP.M25 AND EQUIP2ARCH25.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH25.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH26 "
                StrSql = StrSql + "ON EQUIP2ARCH26.EQUIPID=EQUIP.M26 AND EQUIP2ARCH26.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH26.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH27 "
                StrSql = StrSql + "ON EQUIP2ARCH27.EQUIPID=EQUIP.M27 AND EQUIP2ARCH27.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH27.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH28 "
                StrSql = StrSql + "ON EQUIP2ARCH28.EQUIPID=EQUIP.M28 AND EQUIP2ARCH28.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH28.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH29 "
                StrSql = StrSql + "ON EQUIP2ARCH29.EQUIPID=EQUIP.M29 AND EQUIP2ARCH29.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH29.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH30 "
                StrSql = StrSql + "ON EQUIP2ARCH30.EQUIPID=EQUIP.M30 AND EQUIP2ARCH30.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH30.EFFDATE =PREF.EFFDATE "

                StrSql = StrSql + "WHERE EQUIP.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetSupportEquipmentInDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT 	EQUIP.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS ASSESTCOSTUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN 'SQUARE FEET'  ELSE 'SQUARE METERS' END AS PLANTAREAUNIT, "
                StrSql = StrSql + "EQUIP.M1 AS ASSETID1, "
                StrSql = StrSql + "EQUIP.M2  AS ASSETID2, "
                StrSql = StrSql + "EQUIP.M3  AS ASSETID3, "
                StrSql = StrSql + "EQUIP.M4  AS ASSETID4, "
                StrSql = StrSql + "EQUIP.M5  AS ASSETID5, "
                StrSql = StrSql + "EQUIP.M6  AS ASSETID6, "
                StrSql = StrSql + "EQUIP.M7  AS ASSETID7, "
                StrSql = StrSql + "EQUIP.M8  AS ASSETID8, "
                StrSql = StrSql + "EQUIP.M9 AS ASSETID9, "
                StrSql = StrSql + "EQUIP.M10 AS ASSETID10, "
                StrSql = StrSql + "EQUIP.M11 AS ASSETID11, "
                StrSql = StrSql + "EQUIP.M12 AS ASSETID12, "
                StrSql = StrSql + "EQUIP.M13 AS ASSETID13, "
                StrSql = StrSql + "EQUIP.M14 AS ASSETID14, "
                StrSql = StrSql + "EQUIP.M15 AS ASSETID15, "
                StrSql = StrSql + "EQUIP.M16 AS ASSETID16, "
                StrSql = StrSql + "EQUIP.M17 AS ASSETID17, "
                StrSql = StrSql + "EQUIP.M18 AS ASSETID18, "
                StrSql = StrSql + "EQUIP.M19 AS ASSETID19, "
                StrSql = StrSql + "EQUIP.M20 AS ASSETID20, "
                StrSql = StrSql + "EQUIP.M21 AS ASSETID21, "
                StrSql = StrSql + "EQUIP.M22 AS ASSETID22, "
                StrSql = StrSql + "EQUIP.M23 AS ASSETID23, "
                StrSql = StrSql + "EQUIP.M24 AS ASSETID24, "
                StrSql = StrSql + "EQUIP.M25 AS ASSETID25, "
                StrSql = StrSql + "EQUIP.M26 AS ASSETID26, "
                StrSql = StrSql + "EQUIP.M27 AS ASSETID27, "
                StrSql = StrSql + "EQUIP.M28 AS ASSETID28, "
                StrSql = StrSql + "EQUIP.M29 AS ASSETID29, "
                StrSql = StrSql + "EQUIP.M30 AS ASSETID30, "
                'StrSql = StrSql + "(EQUIP1.COST *  PREF.CURR) AS ASSETS1, "
                'StrSql = StrSql + "(EQUIP2.COST *  PREF.CURR) AS ASSETS2, "
                'StrSql = StrSql + "(EQUIP3.COST *  PREF.CURR) AS ASSETS3, "
                'StrSql = StrSql + "(EQUIP4.COST *  PREF.CURR) AS ASSETS4, "
                'StrSql = StrSql + "(EQUIP5.COST *  PREF.CURR) AS ASSETS5, "
                'StrSql = StrSql + "(EQUIP6.COST *  PREF.CURR) AS ASSETS6, "
                'StrSql = StrSql + "(EQUIP7.COST *  PREF.CURR) AS ASSETS7, "
                'StrSql = StrSql + "(EQUIP8.COST *  PREF.CURR) AS ASSETS8, "
                'StrSql = StrSql + "(EQUIP9.COST *  PREF.CURR) AS ASSETS9, "
                'StrSql = StrSql + "(EQUIP10.COST *  PREF.CURR) AS ASSETS10, "
                'StrSql = StrSql + "(EQUIP11.COST *  PREF.CURR) AS ASSETS11, "
                'StrSql = StrSql + "(EQUIP12.COST *  PREF.CURR) AS ASSETS12, "
                'StrSql = StrSql + "(EQUIP13.COST *  PREF.CURR) AS ASSETS13, "
                'StrSql = StrSql + "(EQUIP14.COST *  PREF.CURR) AS ASSETS14, "
                'StrSql = StrSql + "(EQUIP15.COST *  PREF.CURR) AS ASSETS15, "
                'StrSql = StrSql + "(EQUIP16.COST *  PREF.CURR) AS ASSETS16, "
                'StrSql = StrSql + "(EQUIP17.COST *  PREF.CURR) AS ASSETS17, "
                'StrSql = StrSql + "(EQUIP18.COST *  PREF.CURR) AS ASSETS18, "
                'StrSql = StrSql + "(EQUIP19.COST *  PREF.CURR) AS ASSETS19, "
                'StrSql = StrSql + "(EQUIP20.COST *  PREF.CURR) AS ASSETS20, "
                'StrSql = StrSql + "(EQUIP21.COST *  PREF.CURR) AS ASSETS21, "
                'StrSql = StrSql + "(EQUIP22.COST *  PREF.CURR) AS ASSETS22, "
                'StrSql = StrSql + "(EQUIP23.COST *  PREF.CURR) AS ASSETS23, "
                'StrSql = StrSql + "(EQUIP24.COST *  PREF.CURR) AS ASSETS24, "
                'StrSql = StrSql + "(EQUIP25.COST *  PREF.CURR) AS ASSETS25, "
                'StrSql = StrSql + "(EQUIP26.COST *  PREF.CURR) AS ASSETS26, "
                'StrSql = StrSql + "(EQUIP27.COST *  PREF.CURR) AS ASSETS27, "
                'StrSql = StrSql + "(EQUIP28.COST *  PREF.CURR) AS ASSETS28, "
                'StrSql = StrSql + "(EQUIP29.COST *  PREF.CURR) AS ASSETS29, "
                'StrSql = StrSql + "(EQUIP30.COST *  PREF.CURR) AS ASSETS30, "
                StrSql = StrSql + "NVL((EQUIP2ARCH1.COST *  PREF.CURR),0) AS ASSETS1, "
                StrSql = StrSql + "NVL((EQUIP2ARCH2.COST *  PREF.CURR),0) AS ASSETS2, "
                StrSql = StrSql + "NVL((EQUIP2ARCH3.COST *  PREF.CURR),0) AS ASSETS3, "
                StrSql = StrSql + "NVL((EQUIP2ARCH4.COST *  PREF.CURR),0) AS ASSETS4, "
                StrSql = StrSql + "NVL((EQUIP2ARCH5.COST *  PREF.CURR),0) AS ASSETS5, "
                StrSql = StrSql + "NVL((EQUIP2ARCH6.COST *  PREF.CURR),0) AS ASSETS6, "
                StrSql = StrSql + "NVL((EQUIP2ARCH7.COST *  PREF.CURR),0) AS ASSETS7, "
                StrSql = StrSql + "NVL((EQUIP2ARCH8.COST *  PREF.CURR),0) AS ASSETS8, "
                StrSql = StrSql + "NVL((EQUIP2ARCH9.COST *  PREF.CURR),0) AS ASSETS9, "
                StrSql = StrSql + "NVL((EQUIP2ARCH10.COST *  PREF.CURR),0) AS ASSETS10, "
                StrSql = StrSql + "NVL((EQUIP2ARCH11.COST *  PREF.CURR),0) AS ASSETS11, "
                StrSql = StrSql + "NVL((EQUIP2ARCH12.COST *  PREF.CURR),0) AS ASSETS12, "
                StrSql = StrSql + "NVL((EQUIP2ARCH13.COST *  PREF.CURR),0) AS ASSETS13, "
                StrSql = StrSql + "NVL((EQUIP2ARCH14.COST *  PREF.CURR),0) AS ASSETS14, "
                StrSql = StrSql + "NVL((EQUIP2ARCH15.COST *  PREF.CURR),0) AS ASSETS15, "
                StrSql = StrSql + "NVL((EQUIP2ARCH16.COST *  PREF.CURR),0) AS ASSETS16, "
                StrSql = StrSql + "NVL((EQUIP2ARCH17.COST *  PREF.CURR),0) AS ASSETS17, "
                StrSql = StrSql + "NVL((EQUIP2ARCH18.COST *  PREF.CURR),0) AS ASSETS18, "
                StrSql = StrSql + "NVL((EQUIP2ARCH19.COST *  PREF.CURR),0) AS ASSETS19, "
                StrSql = StrSql + "NVL((EQUIP2ARCH20.COST *  PREF.CURR),0) AS ASSETS20, "
                StrSql = StrSql + "NVL((EQUIP2ARCH21.COST *  PREF.CURR),0) AS ASSETS21, "
                StrSql = StrSql + "NVL((EQUIP2ARCH22.COST *  PREF.CURR),0) AS ASSETS22, "
                StrSql = StrSql + "NVL((EQUIP2ARCH23.COST *  PREF.CURR),0) AS ASSETS23, "
                StrSql = StrSql + "NVL((EQUIP2ARCH24.COST *  PREF.CURR),0) AS ASSETS24, "
                StrSql = StrSql + "NVL((EQUIP2ARCH25.COST *  PREF.CURR),0) AS ASSETS25, "
                StrSql = StrSql + "NVL((EQUIP2ARCH26.COST *  PREF.CURR),0) AS ASSETS26, "
                StrSql = StrSql + "NVL((EQUIP2ARCH27.COST *  PREF.CURR),0) AS ASSETS27, "
                StrSql = StrSql + "NVL((EQUIP2ARCH28.COST *  PREF.CURR),0) AS ASSETS28, "
                StrSql = StrSql + "NVL((EQUIP2ARCH29.COST *  PREF.CURR),0) AS ASSETS29, "
                StrSql = StrSql + "NVL((EQUIP2ARCH30.COST *  PREF.CURR),0) AS ASSETS30, "
                StrSql = StrSql + "(EQCOS.M1*  PREF.CURR) AS ASSETP1, "
                StrSql = StrSql + "(EQCOS.M2*  PREF.CURR) AS ASSETP2, "
                StrSql = StrSql + "(EQCOS.M3*  PREF.CURR) AS ASSETP3, "
                StrSql = StrSql + "(EQCOS.M4*  PREF.CURR) AS ASSETP4, "
                StrSql = StrSql + "(EQCOS.M5*  PREF.CURR) AS ASSETP5, "
                StrSql = StrSql + "(EQCOS.M6*  PREF.CURR) AS ASSETP6, "
                StrSql = StrSql + "(EQCOS.M7*  PREF.CURR) AS ASSETP7, "
                StrSql = StrSql + "(EQCOS.M8*  PREF.CURR) AS ASSETP8, "
                StrSql = StrSql + "(EQCOS.M9*  PREF.CURR) AS ASSETP9, "
                StrSql = StrSql + "(EQCOS.M10*  PREF.CURR) AS ASSETP10, "
                StrSql = StrSql + "(EQCOS.M11*  PREF.CURR) AS ASSETP11, "
                StrSql = StrSql + "(EQCOS.M12*  PREF.CURR) AS ASSETP12, "
                StrSql = StrSql + "(EQCOS.M13*  PREF.CURR) AS ASSETP13, "
                StrSql = StrSql + "(EQCOS.M14*  PREF.CURR) AS ASSETP14, "
                StrSql = StrSql + "(EQCOS.M15*  PREF.CURR) AS ASSETP15, "
                StrSql = StrSql + "(EQCOS.M16*  PREF.CURR) AS ASSETP16, "
                StrSql = StrSql + "(EQCOS.M17*  PREF.CURR) AS ASSETP17, "
                StrSql = StrSql + "(EQCOS.M18*  PREF.CURR) AS ASSETP18, "
                StrSql = StrSql + "(EQCOS.M19*  PREF.CURR) AS ASSETP19, "
                StrSql = StrSql + "(EQCOS.M20*  PREF.CURR) AS ASSETP20, "
                StrSql = StrSql + "(EQCOS.M21*  PREF.CURR) AS ASSETP21, "
                StrSql = StrSql + "(EQCOS.M22*  PREF.CURR) AS ASSETP22, "
                StrSql = StrSql + "(EQCOS.M23*  PREF.CURR) AS ASSETP23, "
                StrSql = StrSql + "(EQCOS.M24*  PREF.CURR) AS ASSETP24, "
                StrSql = StrSql + "(EQCOS.M25*  PREF.CURR) AS ASSETP25, "
                StrSql = StrSql + "(EQCOS.M26*  PREF.CURR) AS ASSETP26, "
                StrSql = StrSql + "(EQCOS.M27*  PREF.CURR) AS ASSETP27, "
                StrSql = StrSql + "(EQCOS.M28*  PREF.CURR) AS ASSETP28, "
                StrSql = StrSql + "(EQCOS.M29*  PREF.CURR) AS ASSETP29, "
                StrSql = StrSql + "(EQCOS.M30*  PREF.CURR) AS ASSETP30, "
                StrSql = StrSql + "EQUIP1.INSTKW AS ECS1, "
                StrSql = StrSql + "EQUIP2.INSTKW AS ECS2, "
                StrSql = StrSql + "EQUIP3.INSTKW AS ECS3, "
                StrSql = StrSql + "EQUIP4.INSTKW AS ECS4, "
                StrSql = StrSql + "EQUIP5.INSTKW AS ECS5, "
                StrSql = StrSql + "EQUIP6.INSTKW AS ECS6, "
                StrSql = StrSql + "EQUIP7.INSTKW AS ECS7, "
                StrSql = StrSql + "EQUIP8.INSTKW AS ECS8, "
                StrSql = StrSql + "EQUIP9.INSTKW AS ECS9, "
                StrSql = StrSql + "EQUIP10.INSTKW AS ECS10, "
                StrSql = StrSql + "EQUIP11.INSTKW AS ECS11, "
                StrSql = StrSql + "EQUIP12.INSTKW AS ECS12, "
                StrSql = StrSql + "EQUIP13.INSTKW AS ECS13, "
                StrSql = StrSql + "EQUIP14.INSTKW AS ECS14, "
                StrSql = StrSql + "EQUIP15.INSTKW AS ECS15, "
                StrSql = StrSql + "EQUIP16.INSTKW AS ECS16, "
                StrSql = StrSql + "EQUIP17.INSTKW AS ECS17, "
                StrSql = StrSql + "EQUIP18.INSTKW AS ECS18, "
                StrSql = StrSql + "EQUIP19.INSTKW AS ECS19, "
                StrSql = StrSql + "EQUIP20.INSTKW AS ECS20, "
                StrSql = StrSql + "EQUIP21.INSTKW AS ECS21, "
                StrSql = StrSql + "EQUIP22.INSTKW AS ECS22, "
                StrSql = StrSql + "EQUIP23.INSTKW AS ECS23, "
                StrSql = StrSql + "EQUIP24.INSTKW AS ECS24, "
                StrSql = StrSql + "EQUIP25.INSTKW AS ECS25, "
                StrSql = StrSql + "EQUIP26.INSTKW AS ECS26, "
                StrSql = StrSql + "EQUIP27.INSTKW AS ECS27, "
                StrSql = StrSql + "EQUIP28.INSTKW AS ECS28, "
                StrSql = StrSql + "EQUIP29.INSTKW AS ECS29, "
                StrSql = StrSql + "EQUIP30.INSTKW AS ECS30, "
                StrSql = StrSql + "EQEGPREF.M1 AS ECP1, "
                StrSql = StrSql + "EQEGPREF.M2 AS ECP2, "
                StrSql = StrSql + "EQEGPREF.M3 AS ECP3, "
                StrSql = StrSql + "EQEGPREF.M4 AS ECP4, "
                StrSql = StrSql + "EQEGPREF.M5 AS ECP5, "
                StrSql = StrSql + "EQEGPREF.M6 AS ECP6, "
                StrSql = StrSql + "EQEGPREF.M7 AS ECP7, "
                StrSql = StrSql + "EQEGPREF.M8 AS ECP8, "
                StrSql = StrSql + "EQEGPREF.M9 AS ECP9, "
                StrSql = StrSql + "EQEGPREF.M10 AS ECP10, "
                StrSql = StrSql + "EQEGPREF.M11 AS ECP11, "
                StrSql = StrSql + "EQEGPREF.M12 AS ECP12, "
                StrSql = StrSql + "EQEGPREF.M13 AS ECP13, "
                StrSql = StrSql + "EQEGPREF.M14 AS ECP14, "
                StrSql = StrSql + "EQEGPREF.M15 AS ECP15, "
                StrSql = StrSql + "EQEGPREF.M16 AS ECP16, "
                StrSql = StrSql + "EQEGPREF.M17 AS ECP17, "
                StrSql = StrSql + "EQEGPREF.M18 AS ECP18, "
                StrSql = StrSql + "EQEGPREF.M19 AS ECP19, "
                StrSql = StrSql + "EQEGPREF.M20 AS ECP20, "
                StrSql = StrSql + "EQEGPREF.M21 AS ECP21, "
                StrSql = StrSql + "EQEGPREF.M22 AS ECP22, "
                StrSql = StrSql + "EQEGPREF.M23 AS ECP23, "
                StrSql = StrSql + "EQEGPREF.M24 AS ECP24, "
                StrSql = StrSql + "EQEGPREF.M25 AS ECP25, "
                StrSql = StrSql + "EQEGPREF.M26 AS ECP26, "
                StrSql = StrSql + "EQEGPREF.M27 AS ECP27, "
                StrSql = StrSql + "EQEGPREF.M28 AS ECP28, "
                StrSql = StrSql + "EQEGPREF.M29 AS ECP29, "
                StrSql = StrSql + "EQEGPREF.M30 AS ECP30, "
                StrSql = StrSql + "EQUIP1.NTGKW AS NGCS1, "
                StrSql = StrSql + "EQUIP2.NTGKW AS NGCS2, "
                StrSql = StrSql + "EQUIP3.NTGKW AS NGCS3, "
                StrSql = StrSql + "EQUIP4.NTGKW AS NGCS4, "
                StrSql = StrSql + "EQUIP5.NTGKW AS NGCS5, "
                StrSql = StrSql + "EQUIP6.NTGKW AS NGCS6, "
                StrSql = StrSql + "EQUIP7.NTGKW AS NGCS7, "
                StrSql = StrSql + "EQUIP8.NTGKW AS NGCS8, "
                StrSql = StrSql + "EQUIP9.NTGKW AS NGCS9, "
                StrSql = StrSql + "EQUIP10.NTGKW AS NGCS10, "
                StrSql = StrSql + "EQUIP11.NTGKW AS NGCS11, "
                StrSql = StrSql + "EQUIP12.NTGKW AS NGCS12, "
                StrSql = StrSql + "EQUIP13.NTGKW AS NGCS13, "
                StrSql = StrSql + "EQUIP14.NTGKW AS NGCS14, "
                StrSql = StrSql + "EQUIP15.NTGKW AS NGCS15, "
                StrSql = StrSql + "EQUIP16.NTGKW AS NGCS16, "
                StrSql = StrSql + "EQUIP17.NTGKW AS NGCS17, "
                StrSql = StrSql + "EQUIP18.NTGKW AS NGCS18, "
                StrSql = StrSql + "EQUIP19.NTGKW AS NGCS19, "
                StrSql = StrSql + "EQUIP20.NTGKW AS NGCS20, "
                StrSql = StrSql + "EQUIP21.NTGKW AS NGCS21, "
                StrSql = StrSql + "EQUIP22.NTGKW AS NGCS22, "
                StrSql = StrSql + "EQUIP23.NTGKW AS NGCS23, "
                StrSql = StrSql + "EQUIP24.NTGKW AS NGCS24, "
                StrSql = StrSql + "EQUIP25.NTGKW AS NGCS25, "
                StrSql = StrSql + "EQUIP26.NTGKW AS NGCS26, "
                StrSql = StrSql + "EQUIP27.NTGKW AS NGCS27, "
                StrSql = StrSql + "EQUIP28.NTGKW AS NGCS28, "
                StrSql = StrSql + "EQUIP29.NTGKW AS NGCS29, "
                StrSql = StrSql + "EQUIP30.NTGKW AS NGCS30, "
                StrSql = StrSql + "EQNGPREF.M1 AS NGCP1, "
                StrSql = StrSql + "EQNGPREF.M2 AS NGCP2, "
                StrSql = StrSql + "EQNGPREF.M3 AS NGCP3, "
                StrSql = StrSql + "EQNGPREF.M4 AS NGCP4, "
                StrSql = StrSql + "EQNGPREF.M5 AS NGCP5, "
                StrSql = StrSql + "EQNGPREF.M6 AS NGCP6, "
                StrSql = StrSql + "EQNGPREF.M7 AS NGCP7, "
                StrSql = StrSql + "EQNGPREF.M8 AS NGCP8, "
                StrSql = StrSql + "EQNGPREF.M9 AS NGCP9, "
                StrSql = StrSql + "EQNGPREF.M10 AS NGCP10, "
                StrSql = StrSql + "EQNGPREF.M11 AS NGCP11, "
                StrSql = StrSql + "EQNGPREF.M12 AS NGCP12, "
                StrSql = StrSql + "EQNGPREF.M13 AS NGCP13, "
                StrSql = StrSql + "EQNGPREF.M14 AS NGCP14, "
                StrSql = StrSql + "EQNGPREF.M15 AS NGCP15, "
                StrSql = StrSql + "EQNGPREF.M16 AS NGCP16, "
                StrSql = StrSql + "EQNGPREF.M17 AS NGCP17, "
                StrSql = StrSql + "EQNGPREF.M18 AS NGCP18, "
                StrSql = StrSql + "EQNGPREF.M19 AS NGCP19, "
                StrSql = StrSql + "EQNGPREF.M20 AS NGCP20, "
                StrSql = StrSql + "EQNGPREF.M21 AS NGCP21, "
                StrSql = StrSql + "EQNGPREF.M22 AS NGCP22, "
                StrSql = StrSql + "EQNGPREF.M23 AS NGCP23, "
                StrSql = StrSql + "EQNGPREF.M24 AS NGCP24, "
                StrSql = StrSql + "EQNGPREF.M25 AS NGCP25, "
                StrSql = StrSql + "EQNGPREF.M26 AS NGCP26, "
                StrSql = StrSql + "EQNGPREF.M27 AS NGCP27, "
                StrSql = StrSql + "EQNGPREF.M28 AS NGCP28, "
                StrSql = StrSql + "EQNGPREF.M29 AS NGCP29, "
                StrSql = StrSql + "EQNGPREF.M30 AS NGCP30, "
                StrSql = StrSql + "EQHRS.M1 AS HRS1, "
                StrSql = StrSql + "EQHRS.M2 AS HRS2, "
                StrSql = StrSql + "EQHRS.M3 AS HRS3, "
                StrSql = StrSql + "EQHRS.M4 AS HRS4, "
                StrSql = StrSql + "EQHRS.M5 AS HRS5, "
                StrSql = StrSql + "EQHRS.M6 AS HRS6, "
                StrSql = StrSql + "EQHRS.M7 AS HRS7, "
                StrSql = StrSql + "EQHRS.M8 AS HRS8, "
                StrSql = StrSql + "EQHRS.M9 AS HRS9, "
                StrSql = StrSql + "EQHRS.M10 AS HRS10, "
                StrSql = StrSql + "EQHRS.M11 AS HRS11, "
                StrSql = StrSql + "EQHRS.M12 AS HRS12, "
                StrSql = StrSql + "EQHRS.M13 AS HRS13, "
                StrSql = StrSql + "EQHRS.M14 AS HRS14, "
                StrSql = StrSql + "EQHRS.M15 AS HRS15, "
                StrSql = StrSql + "EQHRS.M16 AS HRS16, "
                StrSql = StrSql + "EQHRS.M17 AS HRS17, "
                StrSql = StrSql + "EQHRS.M18 AS HRS18, "
                StrSql = StrSql + "EQHRS.M19 AS HRS19, "
                StrSql = StrSql + "EQHRS.M20 AS HRS20, "
                StrSql = StrSql + "EQHRS.M21 AS HRS21, "
                StrSql = StrSql + "EQHRS.M22 AS HRS22, "
                StrSql = StrSql + "EQHRS.M23 AS HRS23, "
                StrSql = StrSql + "EQHRS.M24 AS HRS24, "
                StrSql = StrSql + "EQHRS.M25 AS HRS25, "
                StrSql = StrSql + "EQHRS.M26 AS HRS26, "
                StrSql = StrSql + "EQHRS.M27 AS HRS27, "
                StrSql = StrSql + "EQHRS.M28 AS HRS28, "
                StrSql = StrSql + "EQHRS.M29 AS HRS29, "
                StrSql = StrSql + "EQHRS.M30 AS HRS30, "
                StrSql = StrSql + "EQCOSTTYPE.M1 AS COSTTYPE1, "
                StrSql = StrSql + "EQCOSTTYPE.M2 AS COSTTYPE2, "
                StrSql = StrSql + "EQCOSTTYPE.M3 AS COSTTYPE3, "
                StrSql = StrSql + "EQCOSTTYPE.M4 AS COSTTYPE4, "
                StrSql = StrSql + "EQCOSTTYPE.M5 AS COSTTYPE5, "
                StrSql = StrSql + "EQCOSTTYPE.M6 AS COSTTYPE6, "
                StrSql = StrSql + "EQCOSTTYPE.M7 AS COSTTYPE7, "
                StrSql = StrSql + "EQCOSTTYPE.M8 AS COSTTYPE8, "
                StrSql = StrSql + "EQCOSTTYPE.M9 AS COSTTYPE9, "
                StrSql = StrSql + "EQCOSTTYPE.M10 AS COSTTYPE10, "
                StrSql = StrSql + "EQCOSTTYPE.M11 AS COSTTYPE11, "
                StrSql = StrSql + "EQCOSTTYPE.M12 AS COSTTYPE12, "
                StrSql = StrSql + "EQCOSTTYPE.M13 AS COSTTYPE13, "
                StrSql = StrSql + "EQCOSTTYPE.M14 AS COSTTYPE14, "
                StrSql = StrSql + "EQCOSTTYPE.M15 AS COSTTYPE15, "
                StrSql = StrSql + "EQCOSTTYPE.M16 AS COSTTYPE16, "
                StrSql = StrSql + "EQCOSTTYPE.M17 AS COSTTYPE17, "
                StrSql = StrSql + "EQCOSTTYPE.M18 AS COSTTYPE18, "
                StrSql = StrSql + "EQCOSTTYPE.M19 AS COSTTYPE19, "
                StrSql = StrSql + "EQCOSTTYPE.M20 AS COSTTYPE20, "
                StrSql = StrSql + "EQCOSTTYPE.M21 AS COSTTYPE21, "
                StrSql = StrSql + "EQCOSTTYPE.M22 AS COSTTYPE22, "
                StrSql = StrSql + "EQCOSTTYPE.M23 AS COSTTYPE23, "
                StrSql = StrSql + "EQCOSTTYPE.M24 AS COSTTYPE24, "
                StrSql = StrSql + "EQCOSTTYPE.M25 AS COSTTYPE25, "
                StrSql = StrSql + "EQCOSTTYPE.M26 AS COSTTYPE26, "
                StrSql = StrSql + "EQCOSTTYPE.M27 AS COSTTYPE27, "
                StrSql = StrSql + "EQCOSTTYPE.M28 AS COSTTYPE28, "
                StrSql = StrSql + "EQCOSTTYPE.M29 AS COSTTYPE29, "
                StrSql = StrSql + "EQCOSTTYPE.M30 AS COSTTYPE30, "
                StrSql = StrSql + "EQDEP.M1 AS DEP1, "
                StrSql = StrSql + "EQDEP.M2 AS DEP2, "
                StrSql = StrSql + "EQDEP.M3 AS DEP3, "
                StrSql = StrSql + "EQDEP.M4 AS DEP4, "
                StrSql = StrSql + "EQDEP.M5 AS DEP5, "
                StrSql = StrSql + "EQDEP.M6 AS DEP6, "
                StrSql = StrSql + "EQDEP.M7 AS DEP7, "
                StrSql = StrSql + "EQDEP.M8 AS DEP8, "
                StrSql = StrSql + "EQDEP.M9 AS DEP9, "
                StrSql = StrSql + "EQDEP.M10 AS DEP10, "
                StrSql = StrSql + "EQDEP.M11 AS DEP11, "
                StrSql = StrSql + "EQDEP.M12 AS DEP12, "
                StrSql = StrSql + "EQDEP.M13 AS DEP13, "
                StrSql = StrSql + "EQDEP.M14 AS DEP14, "
                StrSql = StrSql + "EQDEP.M15 AS DEP15, "
                StrSql = StrSql + "EQDEP.M16 AS DEP16, "
                StrSql = StrSql + "EQDEP.M17 AS DEP17, "
                StrSql = StrSql + "EQDEP.M18 AS DEP18, "
                StrSql = StrSql + "EQDEP.M19 AS DEP19, "
                StrSql = StrSql + "EQDEP.M20 AS DEP20, "
                StrSql = StrSql + "EQDEP.M21 AS DEP21, "
                StrSql = StrSql + "EQDEP.M22 AS DEP22, "
                StrSql = StrSql + "EQDEP.M23 AS DEP23, "
                StrSql = StrSql + "EQDEP.M24 AS DEP24, "
                StrSql = StrSql + "EQDEP.M25 AS DEP25, "
                StrSql = StrSql + "EQDEP.M26 AS DEP26, "
                StrSql = StrSql + "EQDEP.M27 AS DEP27, "
                StrSql = StrSql + "EQDEP.M28 AS DEP28, "
                StrSql = StrSql + "EQDEP.M29 AS DEP29, "
                StrSql = StrSql + "EQDEP.M30 AS DEP30, "

                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30 "

                StrSql = StrSql + "FROM EQUIPMENT2TYPE EQUIP "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIP.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIP.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIP.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIP.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIP.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIP.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIP.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIP.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIP.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIP.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIP.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIP.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIP.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIP.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIP.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIP.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIP.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIP.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIP.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIP.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIP.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIP.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIP.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIP.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIP.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIP.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIP.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIP.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIP.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIP.M30 "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2COST EQCOS "
                StrSql = StrSql + "ON EQCOS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIP2ENERGYPREF EQEGPREF "
                StrSql = StrSql + "ON EQEGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIP2NATURALGASPREF EQNGPREF "
                StrSql = StrSql + "ON EQNGPREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN Equipment2DEP EQDEP "
                StrSql = StrSql + "ON EQDEP.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2MAHRS EQHRS "
                StrSql = StrSql + "ON EQHRS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2COSTTYPE EQCOSTTYPE "
                StrSql = StrSql + "ON EQCOSTTYPE.CASEID=EQUIP.CASEID "

                StrSql = StrSql + "INNER JOIN EQUIPMENT2NUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIP.CASEID "

                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH1 "
                StrSql = StrSql + "ON EQUIP2ARCH1.EQUIPID=EQUIP.M1 AND EQUIP2ARCH1.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH1.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH2 "
                StrSql = StrSql + "ON EQUIP2ARCH2.EQUIPID=EQUIP.M2 AND EQUIP2ARCH2.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH2.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH3 "
                StrSql = StrSql + "ON EQUIP2ARCH3.EQUIPID=EQUIP.M3 AND EQUIP2ARCH3.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH3.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH4 "
                StrSql = StrSql + "ON EQUIP2ARCH4.EQUIPID=EQUIP.M4 AND EQUIP2ARCH4.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH4.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH5 "
                StrSql = StrSql + "ON EQUIP2ARCH5.EQUIPID=EQUIP.M5 AND EQUIP2ARCH5.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH5.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH6 "
                StrSql = StrSql + "ON EQUIP2ARCH6.EQUIPID=EQUIP.M6 AND EQUIP2ARCH6.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH6.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH7 "
                StrSql = StrSql + "ON EQUIP2ARCH7.EQUIPID=EQUIP.M7 AND EQUIP2ARCH7.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH7.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH8 "
                StrSql = StrSql + "ON EQUIP2ARCH8.EQUIPID=EQUIP.M8 AND EQUIP2ARCH8.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH8.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH9 "
                StrSql = StrSql + "ON EQUIP2ARCH9.EQUIPID=EQUIP.M9 AND EQUIP2ARCH9.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH9.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH10 "
                StrSql = StrSql + "ON EQUIP2ARCH10.EQUIPID=EQUIP.M10 AND EQUIP2ARCH10.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH10.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH11 "
                StrSql = StrSql + "ON EQUIP2ARCH11.EQUIPID=EQUIP.M11 AND EQUIP2ARCH11.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH11.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH12 "
                StrSql = StrSql + "ON EQUIP2ARCH12.EQUIPID=EQUIP.M12 AND EQUIP2ARCH12.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH12.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH13 "
                StrSql = StrSql + "ON EQUIP2ARCH13.EQUIPID=EQUIP.M13 AND EQUIP2ARCH13.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH13.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH14 "
                StrSql = StrSql + "ON EQUIP2ARCH14.EQUIPID=EQUIP.M14 AND EQUIP2ARCH14.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH14.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH15 "
                StrSql = StrSql + "ON EQUIP2ARCH15.EQUIPID=EQUIP.M15 AND EQUIP2ARCH15.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH15.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH16 "
                StrSql = StrSql + "ON EQUIP2ARCH16.EQUIPID=EQUIP.M16 AND EQUIP2ARCH16.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH16.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH17 "
                StrSql = StrSql + "ON EQUIP2ARCH17.EQUIPID=EQUIP.M17 AND EQUIP2ARCH17.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH17.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH18 "
                StrSql = StrSql + "ON EQUIP2ARCH18.EQUIPID=EQUIP.M18 AND EQUIP2ARCH18.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH18.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH19 "
                StrSql = StrSql + "ON EQUIP2ARCH19.EQUIPID=EQUIP.M19 AND EQUIP2ARCH19.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH19.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH20 "
                StrSql = StrSql + "ON EQUIP2ARCH20.EQUIPID=EQUIP.M20 AND EQUIP2ARCH20.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH20.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH21 "
                StrSql = StrSql + "ON EQUIP2ARCH21.EQUIPID=EQUIP.M21 AND EQUIP2ARCH21.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH21.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH22 "
                StrSql = StrSql + "ON EQUIP2ARCH22.EQUIPID=EQUIP.M22 AND EQUIP2ARCH22.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH22.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH23 "
                StrSql = StrSql + "ON EQUIP2ARCH23.EQUIPID=EQUIP.M23 AND EQUIP2ARCH23.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH23.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH24 "
                StrSql = StrSql + "ON EQUIP2ARCH24.EQUIPID=EQUIP.M24 AND EQUIP2ARCH24.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH24.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH25 "
                StrSql = StrSql + "ON EQUIP2ARCH25.EQUIPID=EQUIP.M25 AND EQUIP2ARCH25.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH25.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH26 "
                StrSql = StrSql + "ON EQUIP2ARCH26.EQUIPID=EQUIP.M26 AND EQUIP2ARCH26.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH26.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH27 "
                StrSql = StrSql + "ON EQUIP2ARCH27.EQUIPID=EQUIP.M27 AND EQUIP2ARCH27.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH27.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH28 "
                StrSql = StrSql + "ON EQUIP2ARCH28.EQUIPID=EQUIP.M28 AND EQUIP2ARCH28.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH28.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH29 "
                StrSql = StrSql + "ON EQUIP2ARCH29.EQUIPID=EQUIP.M29 AND EQUIP2ARCH29.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH29.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH30 "
                StrSql = StrSql + "ON EQUIP2ARCH30.EQUIPID=EQUIP.M30 AND EQUIP2ARCH30.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH30.EFFDATE =PREF.EFFDATE "

                StrSql = StrSql + "WHERE EQUIP.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetOperationInDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT  EQUIPT.CASEID,  "
                StrSql = StrSql + "PREF.TITLE9 AS WEBWIDTHUNIT, "
                StrSql = StrSql + "PREF.TITLE8 AS INSTRUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "(EQUIP1.EQUIPDE1 ||' ' || EQUIP1.EQUIPDE2) AS 	EQUIPDES1, "
                StrSql = StrSql + "(EQUIP2.EQUIPDE1 ||' ' || EQUIP2.EQUIPDE2) AS 	EQUIPDES2, "
                StrSql = StrSql + "(EQUIP3.EQUIPDE1 ||' ' || EQUIP3.EQUIPDE2) AS 	EQUIPDES3, "
                StrSql = StrSql + "(EQUIP4.EQUIPDE1 ||' ' || EQUIP4.EQUIPDE2) AS 	EQUIPDES4, "
                StrSql = StrSql + "(EQUIP5.EQUIPDE1 ||' ' || EQUIP5.EQUIPDE2) AS 	EQUIPDES5, "
                StrSql = StrSql + "(EQUIP6.EQUIPDE1 ||' ' || EQUIP6.EQUIPDE2) AS 	EQUIPDES6, "
                StrSql = StrSql + "(EQUIP7.EQUIPDE1 ||' ' || EQUIP7.EQUIPDE2) AS 	EQUIPDES7, "
                StrSql = StrSql + "(EQUIP8.EQUIPDE1 ||' ' || EQUIP8.EQUIPDE2) AS 	EQUIPDES8, "
                StrSql = StrSql + "(EQUIP9.EQUIPDE1 ||' ' || EQUIP9.EQUIPDE2) AS 	EQUIPDES9, "
                StrSql = StrSql + "(EQUIP10.EQUIPDE1 ||' ' || EQUIP10.EQUIPDE2) AS EQUIPDES10, "
                StrSql = StrSql + "(EQUIP11.EQUIPDE1 ||' ' || EQUIP11.EQUIPDE2) AS 	EQUIPDES11, "
                StrSql = StrSql + "(EQUIP12.EQUIPDE1 ||' ' || EQUIP12.EQUIPDE2) AS 	EQUIPDES12, "
                StrSql = StrSql + "(EQUIP13.EQUIPDE1 ||' ' || EQUIP13.EQUIPDE2) AS 	EQUIPDES13, "
                StrSql = StrSql + "(EQUIP14.EQUIPDE1 ||' ' || EQUIP14.EQUIPDE2) AS 	EQUIPDES14, "
                StrSql = StrSql + "(EQUIP15.EQUIPDE1 ||' ' || EQUIP15.EQUIPDE2) AS 	EQUIPDES15, "
                StrSql = StrSql + "(EQUIP16.EQUIPDE1 ||' ' || EQUIP16.EQUIPDE2) AS 	EQUIPDES16, "
                StrSql = StrSql + "(EQUIP17.EQUIPDE1 ||' ' || EQUIP17.EQUIPDE2) AS 	EQUIPDES17, "
                StrSql = StrSql + "(EQUIP18.EQUIPDE1 ||' ' || EQUIP18.EQUIPDE2) AS 	EQUIPDES18, "
                StrSql = StrSql + "(EQUIP19.EQUIPDE1 ||' ' || EQUIP19.EQUIPDE2) AS 	EQUIPDES19, "
                StrSql = StrSql + "(EQUIP20.EQUIPDE1 ||' ' || EQUIP20.EQUIPDE2) AS  EQUIPDES20, "
                StrSql = StrSql + "(EQUIP21.EQUIPDE1 ||' ' || EQUIP21.EQUIPDE2) AS 	EQUIPDES21, "
                StrSql = StrSql + "(EQUIP22.EQUIPDE1 ||' ' || EQUIP22.EQUIPDE2) AS 	EQUIPDES22, "
                StrSql = StrSql + "(EQUIP23.EQUIPDE1 ||' ' || EQUIP23.EQUIPDE2) AS 	EQUIPDES23, "
                StrSql = StrSql + "(EQUIP24.EQUIPDE1 ||' ' || EQUIP24.EQUIPDE2) AS 	EQUIPDES24, "
                StrSql = StrSql + "(EQUIP25.EQUIPDE1 ||' ' || EQUIP25.EQUIPDE2) AS 	EQUIPDES25, "
                StrSql = StrSql + "(EQUIP26.EQUIPDE1 ||' ' || EQUIP26.EQUIPDE2) AS 	EQUIPDES26, "
                StrSql = StrSql + "(EQUIP27.EQUIPDE1 ||' ' || EQUIP27.EQUIPDE2) AS 	EQUIPDES27, "
                StrSql = StrSql + "(EQUIP28.EQUIPDE1 ||' ' || EQUIP28.EQUIPDE2) AS 	EQUIPDES28, "
                StrSql = StrSql + "(EQUIP29.EQUIPDE1 ||' ' || EQUIP29.EQUIPDE2) AS 	EQUIPDES29, "
                StrSql = StrSql + "(EQUIP30.EQUIPDE1 ||' ' || EQUIP30.EQUIPDE2) AS EQUIPDES30, "
                StrSql = StrSql + "EQUIP1.ISASSIST AS ISASSIST1,"
                StrSql = StrSql + "EQUIP2.ISASSIST As ISASSIST2,"
                StrSql = StrSql + "EQUIP3.ISASSIST AS ISASSIST3,"
                StrSql = StrSql + "EQUIP4.ISASSIST As ISASSIST4,"
                StrSql = StrSql + "EQUIP5.ISASSIST AS ISASSIST5,"
                StrSql = StrSql + "EQUIP6.ISASSIST As ISASSIST6,"
                StrSql = StrSql + "EQUIP7.ISASSIST AS ISASSIST7,"
                StrSql = StrSql + "EQUIP8.ISASSIST As ISASSIST8,"
                StrSql = StrSql + "EQUIP9.ISASSIST AS ISASSIST9,"
                StrSql = StrSql + "EQUIP10.ISASSIST As ISASSIST10,"
                StrSql = StrSql + "EQUIP11.ISASSIST AS ISASSIST11,"
                StrSql = StrSql + "EQUIP12.ISASSIST As ISASSIST12,"
                StrSql = StrSql + "EQUIP13.ISASSIST AS ISASSIST13,"
                StrSql = StrSql + "EQUIP14.ISASSIST As ISASSIST14,"
                StrSql = StrSql + "EQUIP15.ISASSIST AS ISASSIST15,"
                StrSql = StrSql + "EQUIP16.ISASSIST As ISASSIST16,"
                StrSql = StrSql + "EQUIP17.ISASSIST AS ISASSIST17,"
                StrSql = StrSql + "EQUIP18.ISASSIST As ISASSIST18,"
                StrSql = StrSql + "EQUIP19.ISASSIST AS ISASSIST19,"
                StrSql = StrSql + "EQUIP20.ISASSIST As ISASSIST20,"
                StrSql = StrSql + "EQUIP21.ISASSIST AS ISASSIST21,"
                StrSql = StrSql + "EQUIP22.ISASSIST As ISASSIST22,"
                StrSql = StrSql + "EQUIP23.ISASSIST AS ISASSIST23,"
                StrSql = StrSql + "EQUIP24.ISASSIST As ISASSIST24,"
                StrSql = StrSql + "EQUIP25.ISASSIST AS ISASSIST25,"
                StrSql = StrSql + "EQUIP26.ISASSIST As ISASSIST26,"
                StrSql = StrSql + "EQUIP27.ISASSIST AS ISASSIST27,"
                StrSql = StrSql + "EQUIP28.ISASSIST As ISASSIST28,"
                StrSql = StrSql + "EQUIP29.ISASSIST AS ISASSIST29,"
                StrSql = StrSql + "EQUIP30.ISASSIST As ISASSIST30,"
                StrSql = StrSql + "EQUIP1.PAGEURL AS PAGEURL1,"
                StrSql = StrSql + "EQUIP2.PAGEURL As PAGEURL2,"
                StrSql = StrSql + "EQUIP3.PAGEURL AS PAGEURL3,"
                StrSql = StrSql + "EQUIP4.PAGEURL As PAGEURL4,"
                StrSql = StrSql + "EQUIP5.PAGEURL AS PAGEURL5,"
                StrSql = StrSql + "EQUIP6.PAGEURL As PAGEURL6,"
                StrSql = StrSql + "EQUIP7.PAGEURL AS PAGEURL7,"
                StrSql = StrSql + "EQUIP8.PAGEURL As PAGEURL8,"
                StrSql = StrSql + "EQUIP9.PAGEURL AS PAGEURL9,"
                StrSql = StrSql + "EQUIP10.PAGEURL As PAGEURL10,"
                StrSql = StrSql + "EQUIP11.PAGEURL AS PAGEURL11,"
                StrSql = StrSql + "EQUIP12.PAGEURL As PAGEURL12,"
                StrSql = StrSql + "EQUIP13.PAGEURL AS PAGEURL13,"
                StrSql = StrSql + "EQUIP14.PAGEURL As PAGEURL14,"
                StrSql = StrSql + "EQUIP15.PAGEURL AS PAGEURL15,"
                StrSql = StrSql + "EQUIP16.PAGEURL As PAGEURL16,"
                StrSql = StrSql + "EQUIP17.PAGEURL AS PAGEURL17,"
                StrSql = StrSql + "EQUIP18.PAGEURL As PAGEURL18,"
                StrSql = StrSql + "EQUIP19.PAGEURL AS PAGEURL19,"
                StrSql = StrSql + "EQUIP20.PAGEURL As PAGEURL20,"
                StrSql = StrSql + "EQUIP21.PAGEURL AS PAGEURL21,"
                StrSql = StrSql + "EQUIP22.PAGEURL As PAGEURL22,"
                StrSql = StrSql + "EQUIP23.PAGEURL AS PAGEURL23,"
                StrSql = StrSql + "EQUIP24.PAGEURL As PAGEURL24,"
                StrSql = StrSql + "EQUIP25.PAGEURL AS PAGEURL25,"
                StrSql = StrSql + "EQUIP26.PAGEURL As PAGEURL26,"
                StrSql = StrSql + "EQUIP27.PAGEURL AS PAGEURL27,"
                StrSql = StrSql + "EQUIP28.PAGEURL As PAGEURL28,"
                StrSql = StrSql + "EQUIP29.PAGEURL AS PAGEURL29,"
                StrSql = StrSql + "EQUIP30.PAGEURL As PAGEURL30,"
                StrSql = StrSql + "EQUIPT.M1 AS ASSETID1, "
                StrSql = StrSql + "EQUIPT.M2  AS ASSETID2, "
                StrSql = StrSql + "EQUIPT.M3  AS ASSETID3, "
                StrSql = StrSql + "EQUIPT.M4  AS ASSETID4, "
                StrSql = StrSql + "EQUIPT.M5  AS ASSETID5, "
                StrSql = StrSql + "EQUIPT.M6  AS ASSETID6, "
                StrSql = StrSql + "EQUIPT.M7  AS ASSETID7, "
                StrSql = StrSql + "EQUIPT.M8  AS ASSETID8, "
                StrSql = StrSql + "EQUIPT.M9 AS ASSETID9, "
                StrSql = StrSql + "EQUIPT.M10 AS ASSETID10, "
                StrSql = StrSql + "EQUIPT.M11 AS ASSETID11, "
                StrSql = StrSql + "EQUIPT.M12 AS ASSETID12, "
                StrSql = StrSql + "EQUIPT.M13 AS ASSETID13, "
                StrSql = StrSql + "EQUIPT.M14 AS ASSETID14, "
                StrSql = StrSql + "EQUIPT.M15 AS ASSETID15, "
                StrSql = StrSql + "EQUIPT.M16 AS ASSETID16, "
                StrSql = StrSql + "EQUIPT.M17 AS ASSETID17, "
                StrSql = StrSql + "EQUIPT.M18 AS ASSETID18, "
                StrSql = StrSql + "EQUIPT.M19 AS ASSETID19, "
                StrSql = StrSql + "EQUIPT.M20 AS ASSETID20, "
                StrSql = StrSql + "EQUIPT.M21 AS ASSETID21, "
                StrSql = StrSql + "EQUIPT.M22 AS ASSETID22, "
                StrSql = StrSql + "EQUIPT.M23 AS ASSETID23, "
                StrSql = StrSql + "EQUIPT.M24 AS ASSETID24, "
                StrSql = StrSql + "EQUIPT.M25 AS ASSETID25, "
                StrSql = StrSql + "EQUIPT.M26 AS ASSETID26, "
                StrSql = StrSql + "EQUIPT.M27 AS ASSETID27, "
                StrSql = StrSql + "EQUIPT.M28 AS ASSETID28, "
                StrSql = StrSql + "EQUIPT.M29 AS ASSETID29, "
                StrSql = StrSql + "EQUIPT.M30 AS ASSETID30, "
                StrSql = StrSql + "CASE EQUIP1.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M1*PREF.CONVTHICK) END AS OPWebWidth1, "
                StrSql = StrSql + "CASE EQUIP2.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M2*PREF.CONVTHICK) END AS OPWebWidth2, "
                StrSql = StrSql + "CASE EQUIP3.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M3*PREF.CONVTHICK) END AS OPWebWidth3, "
                StrSql = StrSql + "CASE EQUIP4.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M4*PREF.CONVTHICK) END AS OPWebWidth4, "
                StrSql = StrSql + "CASE EQUIP5.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M5*PREF.CONVTHICK) END AS OPWebWidth5, "
                StrSql = StrSql + "CASE EQUIP6.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M6*PREF.CONVTHICK) END AS OPWebWidth6, "
                StrSql = StrSql + "CASE EQUIP7.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M7*PREF.CONVTHICK) END AS OPWebWidth7, "
                StrSql = StrSql + "CASE EQUIP8.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M8*PREF.CONVTHICK) END AS OPWebWidth8, "
                StrSql = StrSql + "CASE EQUIP9.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M9*PREF.CONVTHICK) END AS OPWebWidth9, "
                StrSql = StrSql + "CASE EQUIP10.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M10*PREF.CONVTHICK) END AS OPWebWidth10, "
                StrSql = StrSql + "CASE EQUIP11.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M11*PREF.CONVTHICK) END AS OPWebWidth11, "
                StrSql = StrSql + "CASE EQUIP12.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M12*PREF.CONVTHICK) END AS OPWebWidth12, "
                StrSql = StrSql + "CASE EQUIP13.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M13*PREF.CONVTHICK) END AS OPWebWidth13, "
                StrSql = StrSql + "CASE EQUIP14.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M14*PREF.CONVTHICK) END AS OPWebWidth14, "
                StrSql = StrSql + "CASE EQUIP15.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M15*PREF.CONVTHICK) END AS OPWebWidth15, "
                StrSql = StrSql + "CASE EQUIP16.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M16*PREF.CONVTHICK) END AS OPWebWidth16, "
                StrSql = StrSql + "CASE EQUIP17.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M17*PREF.CONVTHICK) END AS OPWebWidth17, "
                StrSql = StrSql + "CASE EQUIP18.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M18*PREF.CONVTHICK) END AS OPWebWidth18, "
                StrSql = StrSql + "CASE EQUIP19.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M19*PREF.CONVTHICK) END AS OPWebWidth19, "
                StrSql = StrSql + "CASE EQUIP20.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M20*PREF.CONVTHICK) END AS OPWebWidth20, "
                StrSql = StrSql + "CASE EQUIP21.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M21*PREF.CONVTHICK) END AS OPWebWidth21, "
                StrSql = StrSql + "CASE EQUIP22.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M22*PREF.CONVTHICK) END AS OPWebWidth22, "
                StrSql = StrSql + "CASE EQUIP23.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M23*PREF.CONVTHICK) END AS OPWebWidth23, "
                StrSql = StrSql + "CASE EQUIP24.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M24*PREF.CONVTHICK) END AS OPWebWidth24, "
                StrSql = StrSql + "CASE EQUIP25.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M25*PREF.CONVTHICK) END AS OPWebWidth25, "
                StrSql = StrSql + "CASE EQUIP26.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M26*PREF.CONVTHICK) END AS OPWebWidth26, "
                StrSql = StrSql + "CASE EQUIP27.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M27*PREF.CONVTHICK) END AS OPWebWidth27, "
                StrSql = StrSql + "CASE EQUIP28.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M28*PREF.CONVTHICK) END AS OPWebWidth28, "
                StrSql = StrSql + "CASE EQUIP29.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M29*PREF.CONVTHICK) END AS OPWebWidth29, "
                StrSql = StrSql + "CASE EQUIP30.WIDTH  WHEN 0 THEN -1  ELSE (OPW.M30*PREF.CONVTHICK) END AS OPWebWidth30, "

                StrSql = StrSql + "(OPW.M1*PREF.CONVTHICK) AS OPWEBWIDTHPREF1, "
                StrSql = StrSql + "(OPW.M2*PREF.CONVTHICK) AS OPWEBWIDTHPREF2, "
                StrSql = StrSql + "(OPW.M3*PREF.CONVTHICK) AS OPWEBWIDTHPREF3, "
                StrSql = StrSql + "(OPW.M4*PREF.CONVTHICK) AS OPWEBWIDTHPREF4, "
                StrSql = StrSql + "(OPW.M5*PREF.CONVTHICK) AS OPWEBWIDTHPREF5, "
                StrSql = StrSql + "(OPW.M6*PREF.CONVTHICK) AS OPWEBWIDTHPREF6, "
                StrSql = StrSql + "(OPW.M7*PREF.CONVTHICK) AS OPWEBWIDTHPREF7, "
                StrSql = StrSql + "(OPW.M8*PREF.CONVTHICK) AS OPWEBWIDTHPREF8, "
                StrSql = StrSql + "(OPW.M9*PREF.CONVTHICK) AS OPWEBWIDTHPREF9, "
                StrSql = StrSql + "(OPW.M10*PREF.CONVTHICK) AS OPWEBWIDTHPREF10, "
                StrSql = StrSql + "(OPW.M11*PREF.CONVTHICK) AS OPWEBWIDTHPREF11, "
                StrSql = StrSql + "(OPW.M12*PREF.CONVTHICK) AS OPWEBWIDTHPREF12, "
                StrSql = StrSql + "(OPW.M13*PREF.CONVTHICK) AS OPWEBWIDTHPREF13, "
                StrSql = StrSql + "(OPW.M14*PREF.CONVTHICK) AS OPWEBWIDTHPREF14, "
                StrSql = StrSql + "(OPW.M15*PREF.CONVTHICK) AS OPWEBWIDTHPREF15, "
                StrSql = StrSql + "(OPW.M16*PREF.CONVTHICK) AS OPWEBWIDTHPREF16, "
                StrSql = StrSql + "(OPW.M17*PREF.CONVTHICK) AS OPWEBWIDTHPREF17, "
                StrSql = StrSql + "(OPW.M18*PREF.CONVTHICK) AS OPWEBWIDTHPREF18, "
                StrSql = StrSql + "(OPW.M19*PREF.CONVTHICK) AS OPWEBWIDTHPREF19, "
                StrSql = StrSql + "(OPW.M20*PREF.CONVTHICK) AS OPWEBWIDTHPREF20, "
                StrSql = StrSql + "(OPW.M21*PREF.CONVTHICK) AS OPWEBWIDTHPREF21, "
                StrSql = StrSql + "(OPW.M22*PREF.CONVTHICK) AS OPWEBWIDTHPREF22, "
                StrSql = StrSql + "(OPW.M23*PREF.CONVTHICK) AS OPWEBWIDTHPREF23, "
                StrSql = StrSql + "(OPW.M24*PREF.CONVTHICK) AS OPWEBWIDTHPREF24, "
                StrSql = StrSql + "(OPW.M25*PREF.CONVTHICK) AS OPWEBWIDTHPREF25, "
                StrSql = StrSql + "(OPW.M26*PREF.CONVTHICK) AS OPWEBWIDTHPREF26, "
                StrSql = StrSql + "(OPW.M27*PREF.CONVTHICK) AS OPWEBWIDTHPREF27, "
                StrSql = StrSql + "(OPW.M28*PREF.CONVTHICK) AS OPWEBWIDTHPREF28, "
                StrSql = StrSql + "(OPW.M29*PREF.CONVTHICK) AS OPWEBWIDTHPREF29, "
                StrSql = StrSql + "(OPW.M30*PREF.CONVTHICK) AS OPWEBWIDTHPREF30, "
                StrSql = StrSql + "(EQUIP1.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG1, "
                StrSql = StrSql + "(EQUIP2.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG2, "
                StrSql = StrSql + "(EQUIP3.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG3, "
                StrSql = StrSql + "(EQUIP4.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG4, "
                StrSql = StrSql + "(EQUIP5.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG5, "
                StrSql = StrSql + "(EQUIP6.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG6, "
                StrSql = StrSql + "(EQUIP7.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG7, "
                StrSql = StrSql + "(EQUIP8.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG8, "
                StrSql = StrSql + "(EQUIP9.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG9, "
                StrSql = StrSql + "(EQUIP10.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG10, "
                StrSql = StrSql + "(EQUIP11.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG11, "
                StrSql = StrSql + "(EQUIP12.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG12, "
                StrSql = StrSql + "(EQUIP13.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG13, "
                StrSql = StrSql + "(EQUIP14.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG14, "
                StrSql = StrSql + "(EQUIP15.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG15, "
                StrSql = StrSql + "(EQUIP16.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG16, "
                StrSql = StrSql + "(EQUIP17.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG17, "
                StrSql = StrSql + "(EQUIP18.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG18, "
                StrSql = StrSql + "(EQUIP19.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG19, "
                StrSql = StrSql + "(EQUIP20.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG20, "
                StrSql = StrSql + "(EQUIP21.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG21, "
                StrSql = StrSql + "(EQUIP22.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG22, "
                StrSql = StrSql + "(EQUIP23.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG23, "
                StrSql = StrSql + "(EQUIP24.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG24, "
                StrSql = StrSql + "(EQUIP25.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG25, "
                StrSql = StrSql + "(EQUIP26.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG26, "
                StrSql = StrSql + "(EQUIP27.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG27, "
                StrSql = StrSql + "(EQUIP28.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG28, "
                StrSql = StrSql + "(EQUIP29.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG29, "
                StrSql = StrSql + "(EQUIP30.WIDTH *  PREF.CONVTHICK) AS OPWEBWIDTHSUGG30, "
                StrSql = StrSql + "(OPE.M1) AS OPEXITSPREF1, "
                StrSql = StrSql + "(OPE.M2) AS OPEXITSPREF2, "
                StrSql = StrSql + "(OPE.M3) AS OPEXITSPREF3, "
                StrSql = StrSql + "(OPE.M4) AS OPEXITSPREF4, "
                StrSql = StrSql + "(OPE.M5) AS OPEXITSPREF5, "
                StrSql = StrSql + "(OPE.M6) AS OPEXITSPREF6, "
                StrSql = StrSql + "(OPE.M7) AS OPEXITSPREF7, "
                StrSql = StrSql + "(OPE.M8) AS OPEXITSPREF8, "
                StrSql = StrSql + "(OPE.M9) AS OPEXITSPREF9, "
                StrSql = StrSql + "(OPE.M10) AS OPEXITSPREF10, "
                StrSql = StrSql + "(OPE.M11) AS OPEXITSPREF11, "
                StrSql = StrSql + "(OPE.M12) AS OPEXITSPREF12, "
                StrSql = StrSql + "(OPE.M13) AS OPEXITSPREF13, "
                StrSql = StrSql + "(OPE.M14) AS OPEXITSPREF14, "
                StrSql = StrSql + "(OPE.M15) AS OPEXITSPREF15, "
                StrSql = StrSql + "(OPE.M16) AS OPEXITSPREF16, "
                StrSql = StrSql + "(OPE.M17) AS OPEXITSPREF17, "
                StrSql = StrSql + "(OPE.M18) AS OPEXITSPREF18, "
                StrSql = StrSql + "(OPE.M19) AS OPEXITSPREF19, "
                StrSql = StrSql + "(OPE.M20) AS OPEXITSPREF20, "
                StrSql = StrSql + "(OPE.M21) AS OPEXITSPREF21, "
                StrSql = StrSql + "(OPE.M22) AS OPEXITSPREF22, "
                StrSql = StrSql + "(OPE.M23) AS OPEXITSPREF23, "
                StrSql = StrSql + "(OPE.M24) AS OPEXITSPREF24, "
                StrSql = StrSql + "(OPE.M25) AS OPEXITSPREF25, "
                StrSql = StrSql + "(OPE.M26) AS OPEXITSPREF26, "
                StrSql = StrSql + "(OPE.M27) AS OPEXITSPREF27, "
                StrSql = StrSql + "(OPE.M28) AS OPEXITSPREF28, "
                StrSql = StrSql + "(OPE.M29) AS OPEXITSPREF29, "
                StrSql = StrSql + "(OPE.M30) AS OPEXITSPREF30, "
                StrSql = StrSql + "(EQUIP1.EXITS ) as OPEXITSSUGG1, "
                StrSql = StrSql + "(EQUIP2.EXITS ) as OPEXITSSUGG2, "
                StrSql = StrSql + "(EQUIP3.EXITS ) as OPEXITSSUGG3, "
                StrSql = StrSql + "(EQUIP4.EXITS ) as OPEXITSSUGG4, "
                StrSql = StrSql + "(EQUIP5.EXITS ) as OPEXITSSUGG5, "
                StrSql = StrSql + "(EQUIP6.EXITS ) as OPEXITSSUGG6, "
                StrSql = StrSql + "(EQUIP7.EXITS ) as OPEXITSSUGG7, "
                StrSql = StrSql + "(EQUIP8.EXITS ) as OPEXITSSUGG8, "
                StrSql = StrSql + "(EQUIP9.EXITS ) as OPEXITSSUGG9, "
                StrSql = StrSql + "(EQUIP10.EXITS ) as OPEXITSSUGG10, "
                StrSql = StrSql + "(EQUIP11.EXITS ) as OPEXITSSUGG11, "
                StrSql = StrSql + "(EQUIP12.EXITS ) as OPEXITSSUGG12, "
                StrSql = StrSql + "(EQUIP13.EXITS ) as OPEXITSSUGG13, "
                StrSql = StrSql + "(EQUIP14.EXITS ) as OPEXITSSUGG14, "
                StrSql = StrSql + "(EQUIP15.EXITS ) as OPEXITSSUGG15, "
                StrSql = StrSql + "(EQUIP16.EXITS ) as OPEXITSSUGG16, "
                StrSql = StrSql + "(EQUIP17.EXITS ) as OPEXITSSUGG17, "
                StrSql = StrSql + "(EQUIP18.EXITS ) as OPEXITSSUGG18, "
                StrSql = StrSql + "(EQUIP19.EXITS ) as OPEXITSSUGG19, "
                StrSql = StrSql + "(EQUIP20.EXITS ) as OPEXITSSUGG20, "
                StrSql = StrSql + "(EQUIP21.EXITS ) as OPEXITSSUGG21, "
                StrSql = StrSql + "(EQUIP22.EXITS ) as OPEXITSSUGG22, "
                StrSql = StrSql + "(EQUIP23.EXITS ) as OPEXITSSUGG23, "
                StrSql = StrSql + "(EQUIP24.EXITS ) as OPEXITSSUGG24, "
                StrSql = StrSql + "(EQUIP25.EXITS ) as OPEXITSSUGG25, "
                StrSql = StrSql + "(EQUIP26.EXITS ) as OPEXITSSUGG26, "
                StrSql = StrSql + "(EQUIP27.EXITS ) as OPEXITSSUGG27, "
                StrSql = StrSql + "(EQUIP28.EXITS ) as OPEXITSSUGG28, "
                StrSql = StrSql + "(EQUIP29.EXITS ) as OPEXITSSUGG29, "
                StrSql = StrSql + "(EQUIP30.EXITS ) as OPEXITSSUGG30, "

                StrSql = StrSql + "OMAXR.M1 AS OMAXRH1, "
                StrSql = StrSql + "OMAXR.M2  AS OMAXRH2, "
                StrSql = StrSql + "OMAXR.M3  AS OMAXRH3, "
                StrSql = StrSql + "OMAXR.M4  AS OMAXRH4, "
                StrSql = StrSql + "OMAXR.M5  AS OMAXRH5, "
                StrSql = StrSql + "OMAXR.M6  AS OMAXRH6, "
                StrSql = StrSql + "OMAXR.M7  AS OMAXRH7, "
                StrSql = StrSql + "OMAXR.M8  AS OMAXRH8, "
                StrSql = StrSql + "OMAXR.M9 AS OMAXRH9, "
                StrSql = StrSql + "OMAXR.M10 AS OMAXRH10, "
                StrSql = StrSql + "OMAXR.M11 AS OMAXRH11, "
                StrSql = StrSql + "OMAXR.M12 AS OMAXRH12, "
                StrSql = StrSql + "OMAXR.M13 AS OMAXRH13, "
                StrSql = StrSql + "OMAXR.M14 AS OMAXRH14, "
                StrSql = StrSql + "OMAXR.M15 AS OMAXRH15, "
                StrSql = StrSql + "OMAXR.M16 AS OMAXRH16, "
                StrSql = StrSql + "OMAXR.M17 AS OMAXRH17, "
                StrSql = StrSql + "OMAXR.M18 AS OMAXRH18, "
                StrSql = StrSql + "OMAXR.M19 AS OMAXRH19, "
                StrSql = StrSql + "OMAXR.M20 AS OMAXRH20, "
                StrSql = StrSql + "OMAXR.M21 AS OMAXRH21, "
                StrSql = StrSql + "OMAXR.M22 AS OMAXRH22, "
                StrSql = StrSql + "OMAXR.M23 AS OMAXRH23, "
                StrSql = StrSql + "OMAXR.M24 AS OMAXRH24, "
                StrSql = StrSql + "OMAXR.M25 AS OMAXRH25, "
                StrSql = StrSql + "OMAXR.M26 AS OMAXRH26, "
                StrSql = StrSql + "OMAXR.M27 AS OMAXRH27, "
                StrSql = StrSql + "OMAXR.M28 AS OMAXRH28, "
                StrSql = StrSql + "OMAXR.M29 AS OMAXRH29, "
                StrSql = StrSql + "OMAXR.M30 AS OMAXRH30, "
                StrSql = StrSql + "(CASE WHEN EQUIP1.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M1*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M1 "
                StrSql = StrSql + "END) AS OPINSTR1, "
                StrSql = StrSql + "(CASE WHEN EQUIP2.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M2*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M2 "
                StrSql = StrSql + "END) AS OPINSTR2, "
                StrSql = StrSql + "(CASE WHEN EQUIP3.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M3*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M3 "
                StrSql = StrSql + "END) AS OPINSTR3, "
                StrSql = StrSql + "(CASE WHEN EQUIP4.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M4*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M4 "
                StrSql = StrSql + "END) AS OPINSTR4, "
                StrSql = StrSql + "(CASE WHEN EQUIP5.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M5*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M5 "
                StrSql = StrSql + "END) AS OPINSTR5, "
                StrSql = StrSql + "(CASE WHEN EQUIP6.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M6*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M6 "
                StrSql = StrSql + "END) AS OPINSTR6, "
                StrSql = StrSql + "(CASE WHEN EQUIP7.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M7*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M7 "
                StrSql = StrSql + "END) AS OPINSTR7, "
                StrSql = StrSql + "(CASE WHEN EQUIP8.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M8*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M8 "
                StrSql = StrSql + "END) AS OPINSTR8, "
                StrSql = StrSql + "(CASE WHEN EQUIP9.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M9*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M9 "
                StrSql = StrSql + "END) AS OPINSTR9, "
                StrSql = StrSql + "(CASE WHEN EQUIP10.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M10*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M10 "
                StrSql = StrSql + "END) AS OPINSTR10, "
                StrSql = StrSql + "(CASE WHEN EQUIP11.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M11*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M11 "
                StrSql = StrSql + "END) AS OPINSTR11, "
                StrSql = StrSql + "(CASE WHEN EQUIP12.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M12*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M12 "
                StrSql = StrSql + "END) AS OPINSTR12, "
                StrSql = StrSql + "(CASE WHEN EQUIP13.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M13*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M13 "
                StrSql = StrSql + "END) AS OPINSTR13, "
                StrSql = StrSql + "(CASE WHEN EQUIP14.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M14*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M14 "
                StrSql = StrSql + "END) AS OPINSTR14, "
                StrSql = StrSql + "(CASE WHEN EQUIP15.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M15*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M15 "
                StrSql = StrSql + "END) AS OPINSTR15, "
                StrSql = StrSql + "(CASE WHEN EQUIP16.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M16*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M16 "
                StrSql = StrSql + "END) AS OPINSTR16, "
                StrSql = StrSql + "(CASE WHEN EQUIP17.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M17*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M17 "
                StrSql = StrSql + "END) AS OPINSTR17, "
                StrSql = StrSql + "(CASE WHEN EQUIP18.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M18*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M18 "
                StrSql = StrSql + "END) AS OPINSTR18, "
                StrSql = StrSql + "(CASE WHEN EQUIP19.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M19*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M19 "
                StrSql = StrSql + "END) AS OPINSTR19, "
                StrSql = StrSql + "(CASE WHEN EQUIP20.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M20*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M20 "
                StrSql = StrSql + "END) AS OPINSTR20, "
                StrSql = StrSql + "(CASE WHEN EQUIP21.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M21*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M21 "
                StrSql = StrSql + "END) AS OPINSTR21, "
                StrSql = StrSql + "(CASE WHEN EQUIP22.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M22*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M22 "
                StrSql = StrSql + "END) AS OPINSTR22, "
                StrSql = StrSql + "(CASE WHEN EQUIP23.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M23*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M23 "
                StrSql = StrSql + "END) AS OPINSTR23, "
                StrSql = StrSql + "(CASE WHEN EQUIP24.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M24*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M24 "
                StrSql = StrSql + "END) AS OPINSTR24, "
                StrSql = StrSql + "(CASE WHEN EQUIP25.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M25*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M25 "
                StrSql = StrSql + "END) AS OPINSTR25, "
                StrSql = StrSql + "(CASE WHEN EQUIP26.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M26*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M26 "
                StrSql = StrSql + "END) AS OPINSTR26, "
                StrSql = StrSql + "(CASE WHEN EQUIP27.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M27*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M27 "
                StrSql = StrSql + "END) AS OPINSTR27, "
                StrSql = StrSql + "(CASE WHEN EQUIP28.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M28*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M28 "
                StrSql = StrSql + "END) AS OPINSTR28, "
                StrSql = StrSql + "(CASE WHEN EQUIP29.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M29*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M29 "
                StrSql = StrSql + "END) AS OPINSTR29, "
                StrSql = StrSql + "(CASE WHEN EQUIP30.UNITS='fpm' THEN "
                StrSql = StrSql + "(OPGSR.M30*PREF.convthick2) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "OPGSR.M30 "
                StrSql = StrSql + "END) AS OPINSTR30, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP1.UNITS  ELSE EQUIP1.UNITS2 END AS Unit1, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP2.UNITS  ELSE EQUIP2.UNITS2 END AS Unit2, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP3.UNITS  ELSE EQUIP3.UNITS2 END AS Unit3, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP4.UNITS  ELSE EQUIP4.UNITS2 END AS Unit4, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP5.UNITS  ELSE EQUIP5.UNITS2 END AS Unit5, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP6.UNITS  ELSE EQUIP6.UNITS2 END AS Unit6, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP7.UNITS  ELSE EQUIP7.UNITS2 END AS Unit7, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP8.UNITS  ELSE EQUIP8.UNITS2 END AS Unit8, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP9.UNITS  ELSE EQUIP9.UNITS2 END AS Unit9, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP10.UNITS  ELSE EQUIP10.UNITS2 END AS Unit10, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP11.UNITS  ELSE EQUIP11.UNITS2 END AS Unit11, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP12.UNITS  ELSE EQUIP12.UNITS2 END AS Unit12, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP13.UNITS  ELSE EQUIP13.UNITS2 END AS Unit13, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP14.UNITS  ELSE EQUIP14.UNITS2 END AS Unit14, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP15.UNITS  ELSE EQUIP15.UNITS2 END AS Unit15, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP16.UNITS  ELSE EQUIP16.UNITS2 END AS Unit16, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP17.UNITS  ELSE EQUIP17.UNITS2 END AS Unit17, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP18.UNITS  ELSE EQUIP18.UNITS2 END AS Unit18, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP19.UNITS  ELSE EQUIP19.UNITS2 END AS Unit19, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP20.UNITS  ELSE EQUIP20.UNITS2 END AS Unit20, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP21.UNITS  ELSE EQUIP21.UNITS2 END AS Unit21, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP22.UNITS  ELSE EQUIP22.UNITS2 END AS Unit22, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP23.UNITS  ELSE EQUIP23.UNITS2 END AS Unit23, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP24.UNITS  ELSE EQUIP24.UNITS2 END AS Unit24, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP25.UNITS  ELSE EQUIP25.UNITS2 END AS Unit25, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP26.UNITS  ELSE EQUIP26.UNITS2 END AS Unit26, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP27.UNITS  ELSE EQUIP27.UNITS2 END AS Unit27, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP28.UNITS  ELSE EQUIP28.UNITS2 END AS Unit28, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP29.UNITS  ELSE EQUIP29.UNITS2 END AS Unit29, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP30.UNITS  ELSE EQUIP30.UNITS2 END AS Unit30, "
                StrSql = StrSql + "(OPLBSPERHOUR.M1 * PREF.CONVWT) AS INSTR1, "
                StrSql = StrSql + "(OPLBSPERHOUR.M2 * PREF.CONVWT) AS INSTR2, "
                StrSql = StrSql + "(OPLBSPERHOUR.M3 * PREF.CONVWT) AS INSTR3, "
                StrSql = StrSql + "(OPLBSPERHOUR.M4 * PREF.CONVWT) AS INSTR4, "
                StrSql = StrSql + "(OPLBSPERHOUR.M5 * PREF.CONVWT) AS INSTR5, "
                StrSql = StrSql + "(OPLBSPERHOUR.M6 * PREF.CONVWT) AS INSTR6, "
                StrSql = StrSql + "(OPLBSPERHOUR.M7 * PREF.CONVWT) AS INSTR7, "
                StrSql = StrSql + "(OPLBSPERHOUR.M8 * PREF.CONVWT) AS INSTR8, "
                StrSql = StrSql + "(OPLBSPERHOUR.M9 * PREF.CONVWT) AS INSTR9, "
                StrSql = StrSql + "(OPLBSPERHOUR.M10 * PREF.CONVWT) AS INSTR10, "
                StrSql = StrSql + "(OPLBSPERHOUR.M11 * PREF.CONVWT) AS INSTR11, "
                StrSql = StrSql + "(OPLBSPERHOUR.M12 * PREF.CONVWT) AS INSTR12, "
                StrSql = StrSql + "(OPLBSPERHOUR.M13 * PREF.CONVWT) AS INSTR13, "
                StrSql = StrSql + "(OPLBSPERHOUR.M14 * PREF.CONVWT) AS INSTR14, "
                StrSql = StrSql + "(OPLBSPERHOUR.M15 * PREF.CONVWT) AS INSTR15, "
                StrSql = StrSql + "(OPLBSPERHOUR.M16 * PREF.CONVWT) AS INSTR16, "
                StrSql = StrSql + "(OPLBSPERHOUR.M17 * PREF.CONVWT) AS INSTR17, "
                StrSql = StrSql + "(OPLBSPERHOUR.M18 * PREF.CONVWT) AS INSTR18, "
                StrSql = StrSql + "(OPLBSPERHOUR.M19 * PREF.CONVWT) AS INSTR19, "
                StrSql = StrSql + "(OPLBSPERHOUR.M20 * PREF.CONVWT) AS INSTR20, "
                StrSql = StrSql + "(OPLBSPERHOUR.M21 * PREF.CONVWT) AS INSTR21, "
                StrSql = StrSql + "(OPLBSPERHOUR.M22 * PREF.CONVWT) AS INSTR22, "
                StrSql = StrSql + "(OPLBSPERHOUR.M23 * PREF.CONVWT) AS INSTR23, "
                StrSql = StrSql + "(OPLBSPERHOUR.M24 * PREF.CONVWT) AS INSTR24, "
                StrSql = StrSql + "(OPLBSPERHOUR.M25 * PREF.CONVWT) AS INSTR25, "
                StrSql = StrSql + "(OPLBSPERHOUR.M26 * PREF.CONVWT) AS INSTR26, "
                StrSql = StrSql + "(OPLBSPERHOUR.M27 * PREF.CONVWT) AS INSTR27, "
                StrSql = StrSql + "(OPLBSPERHOUR.M28 * PREF.CONVWT) AS INSTR28, "
                StrSql = StrSql + "(OPLBSPERHOUR.M29 * PREF.CONVWT) AS INSTR29, "
                StrSql = StrSql + "(OPLBSPERHOUR.M30 * PREF.CONVWT) AS INSTR30, "
                StrSql = StrSql + "OPDT.M1 as DT1, "
                StrSql = StrSql + "OPDT.M2 as DT2, "
                StrSql = StrSql + "OPDT.M3 as DT3, "
                StrSql = StrSql + "OPDT.M4 as DT4, "
                StrSql = StrSql + "OPDT.M5 as DT5, "
                StrSql = StrSql + "OPDT.M6 as DT6, "
                StrSql = StrSql + "OPDT.M7 as DT7, "
                StrSql = StrSql + "OPDT.M8 as DT8, "
                StrSql = StrSql + "OPDT.M9 as DT9, "
                StrSql = StrSql + "OPDT.M10 as DT10, "
                StrSql = StrSql + "OPDT.M11 as DT11, "
                StrSql = StrSql + "OPDT.M12 as DT12, "
                StrSql = StrSql + "OPDT.M13 as DT13, "
                StrSql = StrSql + "OPDT.M14 as DT14, "
                StrSql = StrSql + "OPDT.M15 as DT15, "
                StrSql = StrSql + "OPDT.M16 as DT16, "
                StrSql = StrSql + "OPDT.M17 as DT17, "
                StrSql = StrSql + "OPDT.M18 as DT18, "
                StrSql = StrSql + "OPDT.M19 as DT19, "
                StrSql = StrSql + "OPDT.M20 as DT20, "
                StrSql = StrSql + "OPDT.M21 as DT21, "
                StrSql = StrSql + "OPDT.M22 as DT22, "
                StrSql = StrSql + "OPDT.M23 as DT23, "
                StrSql = StrSql + "OPDT.M24 as DT24, "
                StrSql = StrSql + "OPDT.M25 as DT25, "
                StrSql = StrSql + "OPDT.M26 as DT26, "
                StrSql = StrSql + "OPDT.M27 as DT27, "
                StrSql = StrSql + "OPDT.M28 as DT28, "
                StrSql = StrSql + "OPDT.M29 as DT29, "
                StrSql = StrSql + "OPDT.M30 as DT30, "
                StrSql = StrSql + "OPWASTE.M1 as OPWASTE1, "
                StrSql = StrSql + "OPWASTE.M2 as OPWASTE2, "
                StrSql = StrSql + "OPWASTE.M3 as OPWASTE3, "
                StrSql = StrSql + "OPWASTE.M4 as OPWASTE4, "
                StrSql = StrSql + "OPWASTE.M5 as OPWASTE5, "
                StrSql = StrSql + "OPWASTE.M6 as OPWASTE6, "
                StrSql = StrSql + "OPWASTE.M7 as OPWASTE7, "
                StrSql = StrSql + "OPWASTE.M8 as OPWASTE8, "
                StrSql = StrSql + "OPWASTE.M9 as OPWASTE9, "
                StrSql = StrSql + "OPWASTE.M10 as OPWASTE10, "
                StrSql = StrSql + "OPWASTE.M11 as OPWASTE11, "
                StrSql = StrSql + "OPWASTE.M12 as OPWASTE12, "
                StrSql = StrSql + "OPWASTE.M13 as OPWASTE13, "
                StrSql = StrSql + "OPWASTE.M14 as OPWASTE14, "
                StrSql = StrSql + "OPWASTE.M15 as OPWASTE15, "
                StrSql = StrSql + "OPWASTE.M16 as OPWASTE16, "
                StrSql = StrSql + "OPWASTE.M17 as OPWASTE17, "
                StrSql = StrSql + "OPWASTE.M18 as OPWASTE18, "
                StrSql = StrSql + "OPWASTE.M19 as OPWASTE19, "
                StrSql = StrSql + "OPWASTE.M20 as OPWASTE20, "
                StrSql = StrSql + "OPWASTE.M21 as OPWASTE21, "
                StrSql = StrSql + "OPWASTE.M22 as OPWASTE22, "
                StrSql = StrSql + "OPWASTE.M23 as OPWASTE23, "
                StrSql = StrSql + "OPWASTE.M24 as OPWASTE24, "
                StrSql = StrSql + "OPWASTE.M25 as OPWASTE25, "
                StrSql = StrSql + "OPWASTE.M26 as OPWASTE26, "
                StrSql = StrSql + "OPWASTE.M27 as OPWASTE27, "
                StrSql = StrSql + "OPWASTE.M28 as OPWASTE28, "
                StrSql = StrSql + "OPWASTE.M29 as OPWASTE29, "
                StrSql = StrSql + "OPWASTE.M30 as OPWASTE30, "
                StrSql = StrSql + "OPWASTE.W1 AS DESIGNWAST1, "
                StrSql = StrSql + "OPWASTE.W2 AS DESIGNWAST2, "
                StrSql = StrSql + "OPWASTE.W3 AS DESIGNWAST3, "
                StrSql = StrSql + "OPWASTE.W4 AS DESIGNWAST4, "
                StrSql = StrSql + "OPWASTE.W5 AS DESIGNWAST5, "
                StrSql = StrSql + "OPWASTE.W6 AS DESIGNWAST6, "
                StrSql = StrSql + "OPWASTE.W7 AS DESIGNWAST7, "
                StrSql = StrSql + "OPWASTE.W8 AS DESIGNWAST8, "
                StrSql = StrSql + "OPWASTE.W9 AS DESIGNWAST9, "
                StrSql = StrSql + "OPWASTE.W10 AS DESIGNWAST10, "
                StrSql = StrSql + "OPWASTE.W11 AS DESIGNWAST11, "
                StrSql = StrSql + "OPWASTE.W12 AS DESIGNWAST12, "
                StrSql = StrSql + "OPWASTE.W13 AS DESIGNWAST13, "
                StrSql = StrSql + "OPWASTE.W14 AS DESIGNWAST14, "
                StrSql = StrSql + "OPWASTE.W15 AS DESIGNWAST15, "
                StrSql = StrSql + "OPWASTE.W16 AS DESIGNWAST16, "
                StrSql = StrSql + "OPWASTE.W17 AS DESIGNWAST17, "
                StrSql = StrSql + "OPWASTE.W18 AS DESIGNWAST18, "
                StrSql = StrSql + "OPWASTE.W19 AS DESIGNWAST19, "
                StrSql = StrSql + "OPWASTE.W20 AS DESIGNWAST20, "
                StrSql = StrSql + "OPWASTE.W21 AS DESIGNWAST21, "
                StrSql = StrSql + "OPWASTE.W22 AS DESIGNWAST22, "
                StrSql = StrSql + "OPWASTE.W23 AS DESIGNWAST23, "
                StrSql = StrSql + "OPWASTE.W24 AS DESIGNWAST24, "
                StrSql = StrSql + "OPWASTE.W25 AS DESIGNWAST25, "
                StrSql = StrSql + "OPWASTE.W26 AS DESIGNWAST26, "
                StrSql = StrSql + "OPWASTE.W27 AS DESIGNWAST27, "
                StrSql = StrSql + "OPWASTE.W28 AS DESIGNWAST28, "
                StrSql = StrSql + "OPWASTE.W29 AS DESIGNWAST29, "
                StrSql = StrSql + "OPWASTE.W30 AS DESIGNWAST30,  "
                StrSql = StrSql + "EQUIP1.UNITS EqUnit1, "
                StrSql = StrSql + "EQUIP2.UNITS EqUnit2, "
                StrSql = StrSql + "EQUIP3.UNITS EqUnit3, "
                StrSql = StrSql + "EQUIP4.UNITS EqUnit4, "
                StrSql = StrSql + "EQUIP5.UNITS EqUnit5, "
                StrSql = StrSql + "EQUIP6.UNITS EqUnit6, "
                StrSql = StrSql + "EQUIP7.UNITS EqUnit7, "
                StrSql = StrSql + "EQUIP8.UNITS EqUnit8, "
                StrSql = StrSql + "EQUIP9.UNITS EqUnit9, "
                StrSql = StrSql + "EQUIP10.UNITS EqUnit10, "
                StrSql = StrSql + "EQUIP11.UNITS EqUnit11, "
                StrSql = StrSql + "EQUIP12.UNITS EqUnit12, "
                StrSql = StrSql + "EQUIP13.UNITS EqUnit13, "
                StrSql = StrSql + "EQUIP14.UNITS EqUnit14, "
                StrSql = StrSql + "EQUIP15.UNITS EqUnit15, "
                StrSql = StrSql + "EQUIP16.UNITS EqUnit16, "
                StrSql = StrSql + "EQUIP17.UNITS EqUnit17, "
                StrSql = StrSql + "EQUIP18.UNITS EqUnit18, "
                StrSql = StrSql + "EQUIP19.UNITS EqUnit19, "
                StrSql = StrSql + "EQUIP20.UNITS EqUnit20, "
                StrSql = StrSql + "EQUIP21.UNITS EqUnit21, "
                StrSql = StrSql + "EQUIP22.UNITS EqUnit22, "
                StrSql = StrSql + "EQUIP23.UNITS EqUnit23, "
                StrSql = StrSql + "EQUIP24.UNITS EqUnit24, "
                StrSql = StrSql + "EQUIP25.UNITS EqUnit25, "
                StrSql = StrSql + "EQUIP26.UNITS EqUnit26, "
                StrSql = StrSql + "EQUIP27.UNITS EqUnit27, "
                StrSql = StrSql + "EQUIP28.UNITS EqUnit28, "
                StrSql = StrSql + "EQUIP29.UNITS EqUnit29, "
                StrSql = StrSql + "EQUIP30.UNITS EqUnit30, "
                'Added for Bug#344
                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30, "
                'end of Bug3344

                'Equipment Label
                StrSql = StrSql + "(CASE WHEN EQUIPT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M1 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES1, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M2 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES2, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M3 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES3, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M4 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES4, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M5 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES5, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M6 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES6, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M7 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES7, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M8 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES8, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M9 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES9, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M10 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES10, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M11= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M11 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES11, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M12= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M12 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES12, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M13= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M13 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES13, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M14= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M14 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES14, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M15= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M15 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES15, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M16= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M16 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES16, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M17= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M17 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES17, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M18= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M18 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES18, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M19= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M19 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES19, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M20= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M20 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES20, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M21= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M21 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES21, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M22= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M22 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES22, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M23= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M23 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES23, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M24= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M24 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES24, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M25= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M25 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES25, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M26= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M26 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES26, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M27= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M27 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES27, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M28= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M28 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES28, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M29= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M29 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES29, "

                StrSql = StrSql + "(CASE WHEN EQUIPT.M30= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M30 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES30 "

                'end label
                StrSql = StrSql + "FROM EQUIPMENTTYPE EQUIPT "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIPT.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIPT.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIPT.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIPT.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIPT.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIPT.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIPT.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIPT.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIPT.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIPT.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIPT.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIPT.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIPT.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIPT.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIPT.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIPT.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIPT.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIPT.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIPT.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIPT.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIPT.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIPT.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIPT.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIPT.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIPT.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIPT.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIPT.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIPT.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIPT.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIPT.M30 "
                StrSql = StrSql + "INNER JOIN OPWEBWIDTH OPW "
                StrSql = StrSql + "ON OPW.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPMAXRUNHRS OMAXR "
                StrSql = StrSql + "ON OMAXR.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPINSTGRSRATE OPGSR "
                StrSql = StrSql + "ON OPGSR.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPLBSPERHOUR "
                StrSql = StrSql + "ON OPLBSPERHOUR.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPDOWNTIME OPDT "
                StrSql = StrSql + "ON OPDT.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPWASTE "
                StrSql = StrSql + "ON OPWASTE.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPEXITS OPE "
                StrSql = StrSql + "ON OPE.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTNUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIPT.CASEID "
                StrSql = StrSql + "WHERE EQUIPT.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPersonnelInDetails(ByVal CaseId As Integer, ByVal EFFCOUNTRY As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT PERSPOS.CASEID,  "
                StrSql = StrSql + "TO_CHAR(NVL(PERSPOS.EFFDATE,TO_DATE('Jan 01,1900','MON DD,YYYY')),'MON DD,YYYY')AS EFFDATE , "
                StrSql = StrSql + "PREF.title2 AS PREFTITLE2, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "PERSPOS.M1 AS PERSPOS1, "
                StrSql = StrSql + "PERSPOS.M2 AS PERSPOS2, "
                StrSql = StrSql + "PERSPOS.M3 AS PERSPOS3, "
                StrSql = StrSql + "PERSPOS.M4 AS PERSPOS4, "
                StrSql = StrSql + "PERSPOS.M5 AS PERSPOS5, "
                StrSql = StrSql + "PERSPOS.M6 AS PERSPOS6, "
                StrSql = StrSql + "PERSPOS.M7 AS PERSPOS7, "
                StrSql = StrSql + "PERSPOS.M8 AS PERSPOS8, "
                StrSql = StrSql + "PERSPOS.M9 AS PERSPOS9, "
                StrSql = StrSql + "PERSPOS.M10 AS PERSPOS10, "
                StrSql = StrSql + "PERSPOS.M11 AS PERSPOS11, "
                StrSql = StrSql + "PERSPOS.M12 AS PERSPOS12, "
                StrSql = StrSql + "PERSPOS.M13 AS PERSPOS13, "
                StrSql = StrSql + "PERSPOS.M14 AS PERSPOS14, "
                StrSql = StrSql + "PERSPOS.M15 AS PERSPOS15, "
                StrSql = StrSql + "PERSPOS.M16 AS PERSPOS16, "
                StrSql = StrSql + "PERSPOS.M17 AS PERSPOS17, "
                StrSql = StrSql + "PERSPOS.M18 AS PERSPOS18, "
                StrSql = StrSql + "PERSPOS.M19 AS PERSPOS19, "
                StrSql = StrSql + "PERSPOS.M20 AS PERSPOS20, "
                StrSql = StrSql + "PERSPOS.M21 AS PERSPOS21, "
                StrSql = StrSql + "PERSPOS.M22 AS PERSPOS22, "
                StrSql = StrSql + "PERSPOS.M23 AS PERSPOS23, "
                StrSql = StrSql + "PERSPOS.M24 AS PERSPOS24, "
                StrSql = StrSql + "PERSPOS.M25 AS PERSPOS25, "
                StrSql = StrSql + "PERSPOS.M26 AS PERSPOS26, "
                StrSql = StrSql + "PERSPOS.M27 AS PERSPOS27, "
                StrSql = StrSql + "PERSPOS.M28 AS PERSPOS28, "
                StrSql = StrSql + "PERSPOS.M29 AS PERSPOS29, "
                StrSql = StrSql + "PERSPOS.M30 AS PERSPOS30, "
                StrSql = StrSql + "PNUM.M1 AS PERNUM1, "
                StrSql = StrSql + "PNUM.M2 AS PERNUM2, "
                StrSql = StrSql + "PNUM.M3 AS PERNUM3, "
                StrSql = StrSql + "PNUM.M4 AS PERNUM4, "
                StrSql = StrSql + "PNUM.M5 AS PERNUM5, "
                StrSql = StrSql + "PNUM.M6 AS PERNUM6, "
                StrSql = StrSql + "PNUM.M7 AS PERNUM7, "
                StrSql = StrSql + "PNUM.M8 AS PERNUM8, "
                StrSql = StrSql + "PNUM.M9 AS PERNUM9, "
                StrSql = StrSql + "PNUM.M10 AS PERNUM10, "
                StrSql = StrSql + "PNUM.M11 AS PERNUM11, "
                StrSql = StrSql + "PNUM.M12 AS PERNUM12, "
                StrSql = StrSql + "PNUM.M13 AS PERNUM13, "
                StrSql = StrSql + "PNUM.M14 AS PERNUM14, "
                StrSql = StrSql + "PNUM.M15 AS PERNUM15, "
                StrSql = StrSql + "PNUM.M16 AS PERNUM16, "
                StrSql = StrSql + "PNUM.M17 AS PERNUM17, "
                StrSql = StrSql + "PNUM.M18 AS PERNUM18, "
                StrSql = StrSql + "PNUM.M19 AS PERNUM19, "
                StrSql = StrSql + "PNUM.M20 AS PERNUM20, "
                StrSql = StrSql + "PNUM.M21 AS PERNUM21, "
                StrSql = StrSql + "PNUM.M22 AS PERNUM22, "
                StrSql = StrSql + "PNUM.M23 AS PERNUM23, "
                StrSql = StrSql + "PNUM.M24 AS PERNUM24, "
                StrSql = StrSql + "PNUM.M25 AS PERNUM25, "
                StrSql = StrSql + "PNUM.M26 AS PERNUM26, "
                StrSql = StrSql + "PNUM.M27 AS PERNUM27, "
                StrSql = StrSql + "PNUM.M28 AS PERNUM28, "
                StrSql = StrSql + "PNUM.M29 AS PERNUM29, "
                StrSql = StrSql + "PNUM.M30 AS PERNUM30, "
              StrSql = StrSql + "(nvl(PERSPOS1.SALARY,0)*PREF.CURR) AS SALS1, "
                StrSql = StrSql + "(nvl(PERSPOS2.SALARY,0)*PREF.CURR) AS SALS2, "
                StrSql = StrSql + "(nvl(PERSPOS3.SALARY,0)*PREF.CURR) AS SALS3, "
                StrSql = StrSql + "(nvl(PERSPOS4.SALARY,0)*PREF.CURR) AS SALS4, "
                StrSql = StrSql + "(nvl(PERSPOS5.SALARY,0)*PREF.CURR) AS SALS5, "
                StrSql = StrSql + "(nvl(PERSPOS6.SALARY,0)*PREF.CURR) AS SALS6, "
                StrSql = StrSql + "(nvl(PERSPOS7.SALARY,0)*PREF.CURR) AS SALS7, "
                StrSql = StrSql + "(nvl(PERSPOS8.SALARY,0)*PREF.CURR) AS SALS8, "
                StrSql = StrSql + "(nvl(PERSPOS9.SALARY,0)*PREF.CURR) AS SALS9, "
                StrSql = StrSql + "(nvl(PERSPOS10.SALARY,0)*PREF.CURR) AS SALS10, "
                StrSql = StrSql + "(nvl(PERSPOS11.SALARY,0)*PREF.CURR) AS SALS11, "
                StrSql = StrSql + "(nvl(PERSPOS12.SALARY,0)*PREF.CURR) AS SALS12, "
                StrSql = StrSql + "(nvl(PERSPOS13.SALARY,0)*PREF.CURR) AS SALS13, "
                StrSql = StrSql + "(nvl(PERSPOS14.SALARY,0)*PREF.CURR) AS SALS14, "
                StrSql = StrSql + "(nvl(PERSPOS15.SALARY,0)*PREF.CURR) AS SALS15, "
                StrSql = StrSql + "(nvl(PERSPOS16.SALARY,0)*PREF.CURR) AS SALS16, "
                StrSql = StrSql + "(nvl(PERSPOS17.SALARY,0)*PREF.CURR) AS SALS17, "
                StrSql = StrSql + "(nvl(PERSPOS18.SALARY,0)*PREF.CURR) AS SALS18, "
                StrSql = StrSql + "(nvl(PERSPOS19.SALARY,0)*PREF.CURR) AS SALS19, "
                StrSql = StrSql + "(nvl(PERSPOS20.SALARY,0)*PREF.CURR) AS SALS20, "
                StrSql = StrSql + "(nvl(PERSPOS21.SALARY,0)*PREF.CURR) AS SALS21, "
                StrSql = StrSql + "(nvl(PERSPOS22.SALARY,0)*PREF.CURR) AS SALS22, "
                StrSql = StrSql + "(nvl(PERSPOS23.SALARY,0)*PREF.CURR) AS SALS23, "
                StrSql = StrSql + "(nvl(PERSPOS24.SALARY,0)*PREF.CURR) AS SALS24, "
                StrSql = StrSql + "(nvl(PERSPOS25.SALARY,0)*PREF.CURR) AS SALS25, "
                StrSql = StrSql + "(nvl(PERSPOS26.SALARY,0)*PREF.CURR) AS SALS26, "
                StrSql = StrSql + "(nvl(PERSPOS27.SALARY,0)*PREF.CURR) AS SALS27, "
                StrSql = StrSql + "(nvl(PERSPOS28.SALARY,0)*PREF.CURR) AS SALS28, "
                StrSql = StrSql + "(nvl(PERSPOS29.SALARY,0)*PREF.CURR) AS SALS29, "
                StrSql = StrSql + "(nvl(PERSPOS30.SALARY,0)*PREF.CURR) AS SALS30, "
                StrSql = StrSql + "(PERSAL.M1*PREF.CURR) AS SALPRE1, "
                StrSql = StrSql + "(PERSAL.M2*PREF.CURR) AS SALPRE2, "
                StrSql = StrSql + "(PERSAL.M3*PREF.CURR) AS SALPRE3, "
                StrSql = StrSql + "(PERSAL.M4*PREF.CURR) AS SALPRE4, "
                StrSql = StrSql + "(PERSAL.M5*PREF.CURR) AS SALPRE5, "
                StrSql = StrSql + "(PERSAL.M6*PREF.CURR) AS SALPRE6, "
                StrSql = StrSql + "(PERSAL.M7*PREF.CURR) AS SALPRE7, "
                StrSql = StrSql + "(PERSAL.M8*PREF.CURR) AS SALPRE8, "
                StrSql = StrSql + "(PERSAL.M9*PREF.CURR) AS SALPRE9, "
                StrSql = StrSql + "(PERSAL.M10*PREF.CURR) AS SALPRE10, "
                StrSql = StrSql + "(PERSAL.M11*PREF.CURR) AS SALPRE11, "
                StrSql = StrSql + "(PERSAL.M12*PREF.CURR) AS SALPRE12, "
                StrSql = StrSql + "(PERSAL.M13*PREF.CURR) AS SALPRE13, "
                StrSql = StrSql + "(PERSAL.M14*PREF.CURR) AS SALPRE14, "
                StrSql = StrSql + "(PERSAL.M15*PREF.CURR) AS SALPRE15, "
                StrSql = StrSql + "(PERSAL.M16*PREF.CURR) AS SALPRE16, "
                StrSql = StrSql + "(PERSAL.M17*PREF.CURR) AS SALPRE17, "
                StrSql = StrSql + "(PERSAL.M18*PREF.CURR) AS SALPRE18, "
                StrSql = StrSql + "(PERSAL.M19*PREF.CURR) AS SALPRE19, "
                StrSql = StrSql + "(PERSAL.M20*PREF.CURR) AS SALPRE20, "
                StrSql = StrSql + "(PERSAL.M21*PREF.CURR) AS SALPRE21, "
                StrSql = StrSql + "(PERSAL.M22*PREF.CURR) AS SALPRE22, "
                StrSql = StrSql + "(PERSAL.M23*PREF.CURR) AS SALPRE23, "
                StrSql = StrSql + "(PERSAL.M24*PREF.CURR) AS SALPRE24, "
                StrSql = StrSql + "(PERSAL.M25*PREF.CURR) AS SALPRE25, "
                StrSql = StrSql + "(PERSAL.M26*PREF.CURR) AS SALPRE26, "
                StrSql = StrSql + "(PERSAL.M27*PREF.CURR) AS SALPRE27, "
                StrSql = StrSql + "(PERSAL.M28*PREF.CURR) AS SALPRE28, "
                StrSql = StrSql + "(PERSAL.M29*PREF.CURR) AS SALPRE29, "
                StrSql = StrSql + "(PERSAL.M30*PREF.CURR) AS SALPRE30, "
                StrSql = StrSql + "PERSVP.M1 AS COSTTYPID1, "
                StrSql = StrSql + "PERSVP.M2 AS COSTTYPID2, "
                StrSql = StrSql + "PERSVP.M3 AS COSTTYPID3, "
                StrSql = StrSql + "PERSVP.M4 AS COSTTYPID4, "
                StrSql = StrSql + "PERSVP.M5 AS COSTTYPID5, "
                StrSql = StrSql + "PERSVP.M6 AS COSTTYPID6, "
                StrSql = StrSql + "PERSVP.M7 AS COSTTYPID7, "
                StrSql = StrSql + "PERSVP.M8 AS COSTTYPID8, "
                StrSql = StrSql + "PERSVP.M9 AS COSTTYPID9, "
                StrSql = StrSql + "PERSVP.M10 AS COSTTYPID10, "
                StrSql = StrSql + "PERSVP.M11 AS COSTTYPID11, "
                StrSql = StrSql + "PERSVP.M12 AS COSTTYPID12, "
                StrSql = StrSql + "PERSVP.M13 AS COSTTYPID13, "
                StrSql = StrSql + "PERSVP.M14 AS COSTTYPID14, "
                StrSql = StrSql + "PERSVP.M15 AS COSTTYPID15, "
                StrSql = StrSql + "PERSVP.M16 AS COSTTYPID16, "
                StrSql = StrSql + "PERSVP.M17 AS COSTTYPID17, "
                StrSql = StrSql + "PERSVP.M18 AS COSTTYPID18, "
                StrSql = StrSql + "PERSVP.M19 AS COSTTYPID19, "
                StrSql = StrSql + "PERSVP.M20 AS COSTTYPID20, "
                StrSql = StrSql + "PERSVP.M21 AS COSTTYPID21, "
                StrSql = StrSql + "PERSVP.M22 AS COSTTYPID22, "
                StrSql = StrSql + "PERSVP.M23 AS COSTTYPID23, "
                StrSql = StrSql + "PERSVP.M24 AS COSTTYPID24, "
                StrSql = StrSql + "PERSVP.M25 AS COSTTYPID25, "
                StrSql = StrSql + "PERSVP.M26 AS COSTTYPID26, "
                StrSql = StrSql + "PERSVP.M27 AS COSTTYPID27, "
                StrSql = StrSql + "PERSVP.M28 AS COSTTYPID28, "
                StrSql = StrSql + "PERSVP.M29 AS COSTTYPID29, "
                StrSql = StrSql + "PERSVP.M30 AS COSTTYPID30, "

                StrSql = StrSql + "PERDEP.M1 AS DEPID1,  "
                StrSql = StrSql + "PERDEP.M2 AS DEPID2, "
                StrSql = StrSql + "PERDEP.M3 AS DEPID3, "
                StrSql = StrSql + "PERDEP.M4 AS DEPID4, "
                StrSql = StrSql + "PERDEP.M5 AS DEPID5, "
                StrSql = StrSql + "PERDEP.M6 AS DEPID6, "
                StrSql = StrSql + "PERDEP.M7 AS DEPID7, "
                StrSql = StrSql + "PERDEP.M8 AS DEPID8, "
                StrSql = StrSql + "PERDEP.M9 AS DEPID9, "
                StrSql = StrSql + "PERDEP.M10 AS DEPID10, "
                StrSql = StrSql + "PERDEP.M11 AS DEPID11, "
                StrSql = StrSql + "PERDEP.M12 AS DEPID12, "
                StrSql = StrSql + "PERDEP.M13 AS DEPID13, "
                StrSql = StrSql + "PERDEP.M14 AS DEPID14, "
                StrSql = StrSql + "PERDEP.M15 AS DEPID15, "
                StrSql = StrSql + "PERDEP.M16 AS DEPID16, "
                StrSql = StrSql + "PERDEP.M17 AS DEPID17, "
                StrSql = StrSql + "PERDEP.M18 AS DEPID18, "
                StrSql = StrSql + "PERDEP.M19 AS DEPID19, "
                StrSql = StrSql + "PERDEP.M20 AS DEPID20, "
                StrSql = StrSql + "PERDEP.M21 AS DEPID21, "
                StrSql = StrSql + "PERDEP.M22 AS DEPID22, "
                StrSql = StrSql + "PERDEP.M23 AS DEPID23, "
                StrSql = StrSql + "PERDEP.M24 AS DEPID24, "
                StrSql = StrSql + "PERDEP.M25 AS DEPID25, "
                StrSql = StrSql + "PERDEP.M26 AS DEPID26, "
                StrSql = StrSql + "PERDEP.M27 AS DEPID27, "
                StrSql = StrSql + "PERDEP.M28 AS DEPID28, "
                StrSql = StrSql + "PERDEP.M29 AS DEPID29, "
                StrSql = StrSql + "PERDEP.M30 AS DEPID30, "
                StrSql = StrSql + "TO_CHAR(PERSPOS.EFFDATE,'MON DD, YYYY')EFFDATE "
                StrSql = StrSql + "FROM PERSONNELPOS PERSPOS "
                StrSql = StrSql + "INNER JOIN PERSONNELNUM PNUM "
                StrSql = StrSql + "ON PNUM.CASEID=PERSPOS.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=PERSPOS.CASEID "
                 StrSql = StrSql + "LEFT JOIN persArch PERSPOS1 "
                StrSql = StrSql + "ON PERSPOS1.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS1.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS1.PERSID = PERSPOS.M1 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS2 "
                StrSql = StrSql + "ON PERSPOS2.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS2.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS2.PERSID = PERSPOS.M2 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS3 "
                StrSql = StrSql + "ON PERSPOS3.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS3.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS3.PERSID = PERSPOS.M3 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS4 "
                StrSql = StrSql + "ON PERSPOS4.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS4.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS4.PERSID = PERSPOS.M4 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS5 "
                StrSql = StrSql + "ON PERSPOS5.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS5.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS5.PERSID = PERSPOS.M5 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS6 "
                StrSql = StrSql + "ON PERSPOS6.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS6.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS6.PERSID = PERSPOS.M6 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS7 "
                StrSql = StrSql + "ON PERSPOS7.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS7.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS7.PERSID = PERSPOS.M7 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS8 "
                StrSql = StrSql + "ON PERSPOS8.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS8.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS8.PERSID = PERSPOS.M8 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS9 "
                StrSql = StrSql + "ON PERSPOS9.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS9.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS9.PERSID = PERSPOS.M9 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS10 "
                StrSql = StrSql + "ON PERSPOS10.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS10.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS10.PERSID = PERSPOS.M10 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS11 "
                StrSql = StrSql + "ON PERSPOS11.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS11.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS11.PERSID = PERSPOS.M11 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS12 "
                StrSql = StrSql + "ON PERSPOS12.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS12.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS12.PERSID = PERSPOS.M12 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS13 "
                StrSql = StrSql + "ON PERSPOS13.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS13.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS13.PERSID = PERSPOS.M13 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS14 "
                StrSql = StrSql + "ON PERSPOS14.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS14.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS14.PERSID = PERSPOS.M14 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS15 "
                StrSql = StrSql + "ON PERSPOS15.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS15.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS15.PERSID = PERSPOS.M15 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS16 "
                StrSql = StrSql + "ON PERSPOS16.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS16.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS16.PERSID = PERSPOS.M16 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS17 "
                StrSql = StrSql + "ON PERSPOS17.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS17.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS17.PERSID = PERSPOS.M17 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS18 "
                StrSql = StrSql + "ON PERSPOS18.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS18.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS18.PERSID = PERSPOS.M18 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS19 "
                StrSql = StrSql + "ON PERSPOS19.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS19.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS19.PERSID = PERSPOS.M19 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS20 "
                StrSql = StrSql + "ON PERSPOS20.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS20.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS20.PERSID = PERSPOS.M20 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS21 "
                StrSql = StrSql + "ON PERSPOS21.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS21.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS21.PERSID = PERSPOS.M21 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS22 "
                StrSql = StrSql + "ON PERSPOS22.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS22.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS22.PERSID = PERSPOS.M22 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS23 "
                StrSql = StrSql + "ON PERSPOS23.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS23.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS23.PERSID = PERSPOS.M23 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS24 "
                StrSql = StrSql + "ON PERSPOS24.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS24.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS24.PERSID = PERSPOS.M24 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS25 "
                StrSql = StrSql + "ON PERSPOS25.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS25.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS25.PERSID = PERSPOS.M25 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS26 "
                StrSql = StrSql + "ON PERSPOS26.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS26.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS26.PERSID = PERSPOS.M26 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS27 "
                StrSql = StrSql + "ON PERSPOS27.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS27.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS27.PERSID = PERSPOS.M27 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS28 "
                StrSql = StrSql + "ON PERSPOS28.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS28.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS28.PERSID = PERSPOS.M28 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS29 "
                StrSql = StrSql + "ON PERSPOS29.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS29.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS29.PERSID = PERSPOS.M29 "
                StrSql = StrSql + "LEFT JOIN persArch  PERSPOS30 "
                StrSql = StrSql + "ON PERSPOS30.EFFDATE = PERSPOS.EFFDATE "
                StrSql = StrSql + "AND PERSPOS30.COUNTRYID =PREF.OCOUNTRY "
                StrSql = StrSql + "AND PERSPOS30.PERSID = PERSPOS.M30 "
                StrSql = StrSql + "INNER JOIN PERSONNELSAL PERSAL "
                StrSql = StrSql + "ON PERSAL.CASEID=PERSPOS.CASEID "
                StrSql = StrSql + "INNER JOIN PERSONNELVP PERSVP "
                StrSql = StrSql + "ON PERSVP.CASEID=PERSPOS.CASEID "
                StrSql = StrSql + "INNER JOIN PERSONNELDEP PERDEP  "
                StrSql = StrSql + "ON PERDEP.CASEID=PERSPOS.CASEID "
                StrSql = StrSql + "WHERE PERSPOS.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
       

        Public Function GetFixedCostDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT FIXCOST.CASEID,  "
                'StrSql = StrSql + "'Office supplies:' AS CATEGORY1, "
                'StrSql = StrSql + "'Laboratory supplies:' AS CATEGORY2, "
                'StrSql = StrSql + "'Insurance:' AS CATEGORY3, "
                'StrSql = StrSql + "'Travel:' AS CATEGORY4, "
                'StrSql = StrSql + "'Voice and data:' AS CATEGORY5, "
                'StrSql = StrSql + "'Water:' AS CATEGORY6, "
                'StrSql = StrSql + "'Waste disposal' AS CATEGORY7, "
                'StrSql = StrSql + "'Maintenance supplies' AS CATEGORY8, "
                'StrSql = StrSql + "'Minor equipment' AS CATEGORY9, "
                'StrSql = StrSql + "'Outside services' AS CATEGORY10, "
                'StrSql = StrSql + "'Professional services' AS CATEGORY11, "
                'StrSql = StrSql + "'Ink supplies' AS CATEGORY12, "
                'StrSql = StrSql + "'Plate supplies' AS CATEGORY13, "
                'StrSql = StrSql + "'Metallization supplies' AS CATEGORY14, "
                'StrSql = StrSql + "'Expense15:' AS CATEGORY15, "
                'StrSql = StrSql + "'Expense16:' AS CATEGORY16, "
                'StrSql = StrSql + "'Expense17:' AS CATEGORY17, "
                'StrSql = StrSql + "'Expense18:' AS CATEGORY18, "
                'StrSql = StrSql + "'Expense19:' AS CATEGORY19, "
                'StrSql = StrSql + "'Expense20:' AS CATEGORY20, "
                'StrSql = StrSql + "'Expense21:' AS CATEGORY21, "
                'StrSql = StrSql + "'Expense22:' AS CATEGORY22, "
                'StrSql = StrSql + "'Expense23:' AS CATEGORY23, "
                'StrSql = StrSql + "'Expense24:' AS CATEGORY24, "
                'StrSql = StrSql + "'Expense25:' AS CATEGORY25, "
                'StrSql = StrSql + "'Expense26:' AS CATEGORY26, "
                'StrSql = StrSql + "'Expense27:' AS CATEGORY27, "
                'StrSql = StrSql + "'Expense28:' AS CATEGORY28, "
                'StrSql = StrSql + "'Expense29:' AS CATEGORY29, "
                'StrSql = StrSql + "'Expense30:' AS CATEGORY30, "
                StrSql = StrSql + " FC1.CATEGORYDES AS CATEGORY1, "
                StrSql = StrSql + " FC2.CATEGORYDES AS CATEGORY2, "
                StrSql = StrSql + " FC3.CATEGORYDES AS CATEGORY3, "
                StrSql = StrSql + " FC4.CATEGORYDES AS CATEGORY4, "
                StrSql = StrSql + " FC5.CATEGORYDES AS CATEGORY5, "
                StrSql = StrSql + " FC6.CATEGORYDES AS CATEGORY6, "
                StrSql = StrSql + " FC7.CATEGORYDES AS CATEGORY7, "
                StrSql = StrSql + " FC8.CATEGORYDES AS CATEGORY8, "
                StrSql = StrSql + " FC9.CATEGORYDES AS CATEGORY9, "
                StrSql = StrSql + " FC10.CATEGORYDES AS CATEGORY10, "
                StrSql = StrSql + " FC11.CATEGORYDES AS CATEGORY11, "
                StrSql = StrSql + " FC12.CATEGORYDES AS CATEGORY12, "
                StrSql = StrSql + " FC13.CATEGORYDES AS CATEGORY13, "
                StrSql = StrSql + " FC14.CATEGORYDES AS CATEGORY14, "
                StrSql = StrSql + " FC15.CATEGORYDES AS CATEGORY15, "
                StrSql = StrSql + " FC16.CATEGORYDES AS CATEGORY16, "
                StrSql = StrSql + " FC17.CATEGORYDES AS CATEGORY17, "
                StrSql = StrSql + " FC18.CATEGORYDES AS CATEGORY18, "
                StrSql = StrSql + " FC19.CATEGORYDES AS CATEGORY19, "
                StrSql = StrSql + " FC20.CATEGORYDES AS CATEGORY20, "
                StrSql = StrSql + " FC21.CATEGORYDES AS CATEGORY21, "
                StrSql = StrSql + " FC22.CATEGORYDES AS CATEGORY22, "
                StrSql = StrSql + " FC23.CATEGORYDES AS CATEGORY23, "
                StrSql = StrSql + " FC24.CATEGORYDES AS CATEGORY24, "
                StrSql = StrSql + " FC25.CATEGORYDES AS CATEGORY25, "
                StrSql = StrSql + " FC26.CATEGORYDES AS CATEGORY26, "
                StrSql = StrSql + " FC27.CATEGORYDES AS CATEGORY27, "
                StrSql = StrSql + " FC28.CATEGORYDES AS CATEGORY28, "
                StrSql = StrSql + " FC29.CATEGORYDES AS CATEGORY29, "
                StrSql = StrSql + " FC30.CATEGORYDES AS CATEGORY30, "

                StrSql = StrSql + "(FIXCOST.M1*PREF.CURR) AS FIXCOST1, "
                StrSql = StrSql + "(FIXCOST.M2*PREF.CURR) AS FIXCOST2, "
                StrSql = StrSql + "FIXCOST.M3 AS FIXCOST3, "
                StrSql = StrSql + "FIXCOST.M4 AS FIXCOST4, "
                StrSql = StrSql + "(FIXCOST.M5*PREF.CURR) AS FIXCOST5, "
                StrSql = StrSql + "(FIXCOST.M6*PREF.CURR) AS FIXCOST6, "
                StrSql = StrSql + "(FIXCOST.M7*PREF.CURR) AS FIXCOST7, "
                StrSql = StrSql + "FIXCOST.M8 AS FIXCOST8, "
                StrSql = StrSql + "FIXCOST.M9 AS FIXCOST9, "
                StrSql = StrSql + "FIXCOST.M10 AS FIXCOST10, "
                StrSql = StrSql + "FIXCOST.M11 AS FIXCOST11, "
                StrSql = StrSql + "FIXCOST.M12 AS FIXCOST12, "
                StrSql = StrSql + "FIXCOST.M13 AS FIXCOST13, "
                StrSql = StrSql + "FIXCOST.M14 AS FIXCOST14, "
                StrSql = StrSql + "FIXCOST.M15 AS FIXCOST15, "
                StrSql = StrSql + "FIXCOST.M16 AS FIXCOST16, "
                StrSql = StrSql + "FIXCOST.M17 AS FIXCOST17, "
                StrSql = StrSql + "FIXCOST.M18 AS FIXCOST18, "
                StrSql = StrSql + "FIXCOST.M19 AS FIXCOST19, "
                StrSql = StrSql + "FIXCOST.M20 AS FIXCOST20, "
                StrSql = StrSql + "FIXCOST.M21 AS FIXCOST21, "
                StrSql = StrSql + "FIXCOST.M22 AS FIXCOST22, "
                StrSql = StrSql + "FIXCOST.M23 AS FIXCOST23, "
                StrSql = StrSql + "FIXCOST.M24 AS FIXCOST24, "
                StrSql = StrSql + "FIXCOST.M25 AS FIXCOST25, "
                StrSql = StrSql + "FIXCOST.M26 AS FIXCOST26, "
                StrSql = StrSql + "FIXCOST.M27 AS FIXCOST27, "
                StrSql = StrSql + "FIXCOST.M28 AS FIXCOST28, "
                StrSql = StrSql + "FIXCOST.M29 AS FIXCOST29, "
                StrSql = StrSql + "FIXCOST.M30 AS FIXCOST30, "
                StrSql = StrSql + "'currency per employee' AS RULE1, "
                StrSql = StrSql + "'currency per employee' AS RULE2, "
                StrSql = StrSql + "'percent of asset base' AS RULE3, "
                StrSql = StrSql + "'percent of payroll' AS RULE4, "
                StrSql = StrSql + "'currency per employee' AS RULE5, "
                StrSql = StrSql + "'currency per employee' AS RULE6, "
                StrSql = StrSql + "'currency per employee' AS RULE7, "
                StrSql = StrSql + "'percent of asset base' AS RULE8, "
                StrSql = StrSql + "'percent of asset base' AS RULE9, "
                StrSql = StrSql + "'percent of asset base' AS RULE10, "
                StrSql = StrSql + "'percent of payroll' AS RULE11, "
                StrSql = StrSql + "'percent of ink cost' AS RULE12, "
                StrSql = StrSql + "'percent of plate cost' AS RULE13, "
                StrSql = StrSql + "'percent of metal cost' AS RULE14, "
                StrSql = StrSql + "'' AS RULE15, "
                StrSql = StrSql + "'' AS RULE16, "
                StrSql = StrSql + "'' AS RULE17, "
                StrSql = StrSql + "'' AS RULE18, "
                StrSql = StrSql + "'' AS RULE19, "
                StrSql = StrSql + "'' AS RULE20, "
                StrSql = StrSql + "'' AS RULE21, "
                StrSql = StrSql + "'' AS RULE22, "
                StrSql = StrSql + "'' AS RULE23, "
                StrSql = StrSql + "'' AS RULE24, "
                StrSql = StrSql + "'' AS RULE25, "
                StrSql = StrSql + "'' AS RULE26, "
                StrSql = StrSql + "'' AS RULE27, "
                StrSql = StrSql + "'' AS RULE28, "
                StrSql = StrSql + "'' AS RULE29, "
                StrSql = StrSql + "'' AS RULE30, "
                StrSql = StrSql + "(FIXCOSTSUG.M1*PREF.CURR) AS FCSG1, "
                StrSql = StrSql + "(FIXCOSTSUG.M2*PREF.CURR) AS FCSG2, "
                StrSql = StrSql + "(FIXCOSTSUG.M3*PREF.CURR) AS FCSG3, "
                StrSql = StrSql + "(FIXCOSTSUG.M4*PREF.CURR) AS FCSG4, "
                StrSql = StrSql + "(FIXCOSTSUG.M5*PREF.CURR) AS FCSG5, "
                StrSql = StrSql + "(FIXCOSTSUG.M6*PREF.CURR) AS FCSG6, "
                StrSql = StrSql + "(FIXCOSTSUG.M7*PREF.CURR) AS FCSG7, "
                StrSql = StrSql + "(FIXCOSTSUG.M8*PREF.CURR) AS FCSG8, "
                StrSql = StrSql + "(FIXCOSTSUG.M9*PREF.CURR) AS FCSG9, "
                StrSql = StrSql + "(FIXCOSTSUG.M10*PREF.CURR) AS FCSG10, "
                StrSql = StrSql + "(FIXCOSTSUG.M11*PREF.CURR) AS FCSG11, "
                StrSql = StrSql + "(FIXCOSTSUG.M12*PREF.CURR) AS FCSG12, "
                StrSql = StrSql + "(FIXCOSTSUG.M13*PREF.CURR) AS FCSG13, "
                StrSql = StrSql + "(FIXCOSTSUG.M14*PREF.CURR) AS FCSG14, "
                StrSql = StrSql + "(FIXCOSTSUG.M15*PREF.CURR) AS FCSG15, "
                StrSql = StrSql + "(FIXCOSTSUG.M16*PREF.CURR) AS FCSG16, "
                StrSql = StrSql + "(FIXCOSTSUG.M17*PREF.CURR) AS FCSG17, "
                StrSql = StrSql + "(FIXCOSTSUG.M18*PREF.CURR) AS FCSG18, "
                StrSql = StrSql + "(FIXCOSTSUG.M19*PREF.CURR) AS FCSG19, "
                StrSql = StrSql + "(FIXCOSTSUG.M20*PREF.CURR) AS FCSG20, "
                StrSql = StrSql + "(FIXCOSTSUG.M21*PREF.CURR) AS FCSG21, "
                StrSql = StrSql + "(FIXCOSTSUG.M22*PREF.CURR) AS FCSG22, "
                StrSql = StrSql + "(FIXCOSTSUG.M23*PREF.CURR) AS FCSG23, "
                StrSql = StrSql + "(FIXCOSTSUG.M24*PREF.CURR) AS FCSG24, "
                StrSql = StrSql + "(FIXCOSTSUG.M25*PREF.CURR) AS FCSG25, "
                StrSql = StrSql + "(FIXCOSTSUG.M26*PREF.CURR) AS FCSG26, "
                StrSql = StrSql + "(FIXCOSTSUG.M27*PREF.CURR) AS FCSG27, "
                StrSql = StrSql + "(FIXCOSTSUG.M28*PREF.CURR) AS FCSG28, "
                StrSql = StrSql + "(FIXCOSTSUG.M29*PREF.CURR) AS FCSG29, "
                StrSql = StrSql + "(FIXCOSTSUG.M30*PREF.CURR) AS FCSG30, "
                StrSql = StrSql + "(FIXCOSTPRE.M1*PREF.CURR) AS FCPREF1, "
                StrSql = StrSql + "(FIXCOSTPRE.M2*PREF.CURR) AS FCPREF2, "
                StrSql = StrSql + "(FIXCOSTPRE.M3*PREF.CURR) AS FCPREF3, "
                StrSql = StrSql + "(FIXCOSTPRE.M4*PREF.CURR) AS FCPREF4, "
                StrSql = StrSql + "(FIXCOSTPRE.M5*PREF.CURR) AS FCPREF5, "
                StrSql = StrSql + "(FIXCOSTPRE.M6*PREF.CURR) AS FCPREF6, "
                StrSql = StrSql + "(FIXCOSTPRE.M7*PREF.CURR) AS FCPREF7, "
                StrSql = StrSql + "(FIXCOSTPRE.M8*PREF.CURR) AS FCPREF8, "
                StrSql = StrSql + "(FIXCOSTPRE.M9*PREF.CURR) AS FCPREF9, "
                StrSql = StrSql + "(FIXCOSTPRE.M10*PREF.CURR) AS FCPREF10, "
                StrSql = StrSql + "(FIXCOSTPRE.M11*PREF.CURR) AS FCPREF11, "
                StrSql = StrSql + "(FIXCOSTPRE.M12*PREF.CURR) AS FCPREF12, "
                StrSql = StrSql + "(FIXCOSTPRE.M13*PREF.CURR) AS FCPREF13, "
                StrSql = StrSql + "(FIXCOSTPRE.M14*PREF.CURR) AS FCPREF14, "
                StrSql = StrSql + "(FIXCOSTPRE.M15*PREF.CURR) AS FCPREF15, "
                StrSql = StrSql + "(FIXCOSTPRE.M16*PREF.CURR) AS FCPREF16, "
                StrSql = StrSql + "(FIXCOSTPRE.M17*PREF.CURR) AS FCPREF17, "
                StrSql = StrSql + "(FIXCOSTPRE.M18*PREF.CURR) AS FCPREF18, "
                StrSql = StrSql + "(FIXCOSTPRE.M19*PREF.CURR) AS FCPREF19, "
                StrSql = StrSql + "(FIXCOSTPRE.M20*PREF.CURR) AS FCPREF20, "
                StrSql = StrSql + "(FIXCOSTPRE.M21*PREF.CURR) AS FCPREF21, "
                StrSql = StrSql + "(FIXCOSTPRE.M22*PREF.CURR) AS FCPREF22, "
                StrSql = StrSql + "(FIXCOSTPRE.M23*PREF.CURR) AS FCPREF23, "
                StrSql = StrSql + "(FIXCOSTPRE.M24*PREF.CURR) AS FCPREF24, "
                StrSql = StrSql + "(FIXCOSTPRE.M25*PREF.CURR) AS FCPREF25, "
                StrSql = StrSql + "(FIXCOSTPRE.M26*PREF.CURR) AS FCPREF26, "
                StrSql = StrSql + "(FIXCOSTPRE.M27*PREF.CURR) AS FCPREF27, "
                StrSql = StrSql + "(FIXCOSTPRE.M28*PREF.CURR) AS FCPREF28, "
                StrSql = StrSql + "(FIXCOSTPRE.M29*PREF.CURR) AS FCPREF29, "
                StrSql = StrSql + "(FIXCOSTPRE.M30*PREF.CURR) AS FCPREF30, "
                StrSql = StrSql + "FCDEP.M1 as DEPID1, "
                StrSql = StrSql + "FCDEP.M2 as DEPID2, "
                StrSql = StrSql + "FCDEP.M3 as DEPID3, "
                StrSql = StrSql + "FCDEP.M4 as DEPID4, "
                StrSql = StrSql + "FCDEP.M5 as DEPID5, "
                StrSql = StrSql + "FCDEP.M6 as DEPID6, "
                StrSql = StrSql + "FCDEP.M7 as DEPID7, "
                StrSql = StrSql + "FCDEP.M8 as DEPID8, "
                StrSql = StrSql + "FCDEP.M9 as DEPID9, "
                StrSql = StrSql + "FCDEP.M10 as DEPID10, "
                StrSql = StrSql + "FCDEP.M11 as DEPID11, "
                StrSql = StrSql + "FCDEP.M12 as DEPID12, "
                StrSql = StrSql + "FCDEP.M13 as DEPID13, "
                StrSql = StrSql + "FCDEP.M14 as DEPID14, "
                StrSql = StrSql + "FCDEP.M15 as DEPID15, "
                StrSql = StrSql + "FCDEP.M16 as DEPID16, "
                StrSql = StrSql + "FCDEP.M17 as DEPID17, "
                StrSql = StrSql + "FCDEP.M18 as DEPID18, "
                StrSql = StrSql + "FCDEP.M19 as DEPID19, "
                StrSql = StrSql + "FCDEP.M20 as DEPID20, "
                StrSql = StrSql + "FCDEP.M21 as DEPID21, "
                StrSql = StrSql + "FCDEP.M22 as DEPID22, "
                StrSql = StrSql + "FCDEP.M23 as DEPID23, "
                StrSql = StrSql + "FCDEP.M24 as DEPID24, "
                StrSql = StrSql + "FCDEP.M25 as DEPID25, "
                StrSql = StrSql + "FCDEP.M26 as DEPID26, "
                StrSql = StrSql + "FCDEP.M27 as DEPID27, "
                StrSql = StrSql + "FCDEP.M28 as DEPID28, "
                StrSql = StrSql + "FCDEP.M29 as DEPID29, "
                StrSql = StrSql + "FCDEP.M30 as DEPID30, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "(TOTAL.ASSETTOTAL*PREF.CURR) AS ASSETTOTAL, "
                StrSql = StrSql + "DEPC.YEARS AS DEPYEARS, "
                StrSql = StrSql + "(DEPC.DEPRECIATION*PREF.CURR) AS DEPANNUAL,PREF.EFFDATE,PREF.OCOUNTRY,PREF.CURR "
                StrSql = StrSql + "FROM FIXEDCOSTPCT FIXCOST "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN FIXEDCOSTSUG FIXCOSTSUG "
                StrSql = StrSql + "ON FIXCOSTSUG.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN FIXEDCOSTPRE FIXCOSTPRE "
                StrSql = StrSql + "ON FIXCOSTPRE.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL "
                StrSql = StrSql + "ON TOTAL.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEPC "
                StrSql = StrSql + "ON DEPC.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN FIXEDCOSTDEP FCDEP "
                StrSql = StrSql + "ON FCDEP.CASEID=FIXCOST.CASEID "
                StrSql = StrSql + "INNER JOIN FIXEDCOST FC1 ON FC1.FIXEDCOSTID =1 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA1 ON FCA1.FIXEDCOSTID =FC1.FIXEDCOSTID AND FCA1.COUNTRYID=PREF.OCOUNTRY AND FCA1.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC2 ON FC2.FIXEDCOSTID =2 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA2 ON FCA2.FIXEDCOSTID =FC2.FIXEDCOSTID AND FCA2.COUNTRYID=PREF.OCOUNTRY AND FCA2.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC3 ON FC3.FIXEDCOSTID =3 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA3 ON FCA3.FIXEDCOSTID =FC3.FIXEDCOSTID AND FCA3.COUNTRYID=PREF.OCOUNTRY AND FCA3.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC4 ON FC4.FIXEDCOSTID =4 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA4 ON FCA4.FIXEDCOSTID =FC4.FIXEDCOSTID AND FCA4.COUNTRYID=PREF.OCOUNTRY AND FCA4.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC5 ON FC5.FIXEDCOSTID =5 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA5 ON FCA5.FIXEDCOSTID =FC5.FIXEDCOSTID AND FCA5.COUNTRYID=PREF.OCOUNTRY AND FCA5.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC6 ON FC6.FIXEDCOSTID =6 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA6 ON FCA6.FIXEDCOSTID =FC6.FIXEDCOSTID AND FCA6.COUNTRYID=PREF.OCOUNTRY AND FCA6.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC7 ON FC7.FIXEDCOSTID =7 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA7 ON FCA7.FIXEDCOSTID =FC7.FIXEDCOSTID AND FCA7.COUNTRYID=PREF.OCOUNTRY AND FCA7.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC8 ON FC8.FIXEDCOSTID =8 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA8 ON FCA8.FIXEDCOSTID =FC8.FIXEDCOSTID AND FCA8.COUNTRYID=PREF.OCOUNTRY AND FCA8.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC9 ON FC9.FIXEDCOSTID =9 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA9 ON FCA9.FIXEDCOSTID =FC9.FIXEDCOSTID AND FCA9.COUNTRYID=PREF.OCOUNTRY AND FCA9.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC10 ON FC10.FIXEDCOSTID =10 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA10 ON FCA10.FIXEDCOSTID =FC10.FIXEDCOSTID AND FCA10.COUNTRYID=PREF.OCOUNTRY AND FCA10.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC11 ON FC11.FIXEDCOSTID =11 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA11 ON FCA11.FIXEDCOSTID =FC11.FIXEDCOSTID AND FCA11.COUNTRYID=PREF.OCOUNTRY AND FCA11.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC12 ON FC12.FIXEDCOSTID =12 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA12 ON FCA12.FIXEDCOSTID =FC12.FIXEDCOSTID AND FCA12.COUNTRYID=PREF.OCOUNTRY AND FCA12.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC13 ON FC13.FIXEDCOSTID =13 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA13 ON FCA13.FIXEDCOSTID =FC13.FIXEDCOSTID AND FCA13.COUNTRYID=PREF.OCOUNTRY AND FCA13.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC14 ON FC14.FIXEDCOSTID =14 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA14 ON FCA14.FIXEDCOSTID =FC14.FIXEDCOSTID AND FCA14.COUNTRYID=PREF.OCOUNTRY AND FCA14.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC15 ON FC15.FIXEDCOSTID =15 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA15 ON FCA15.FIXEDCOSTID =FC15.FIXEDCOSTID AND FCA15.COUNTRYID=PREF.OCOUNTRY AND FCA15.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC16 ON FC16.FIXEDCOSTID =16 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA16 ON FCA16.FIXEDCOSTID =FC16.FIXEDCOSTID AND FCA16.COUNTRYID=PREF.OCOUNTRY AND FCA16.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC17 ON FC17.FIXEDCOSTID =17 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA17 ON FCA17.FIXEDCOSTID =FC17.FIXEDCOSTID AND FCA17.COUNTRYID=PREF.OCOUNTRY AND FCA17.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC18 ON FC18.FIXEDCOSTID =18 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA18 ON FCA18.FIXEDCOSTID =FC18.FIXEDCOSTID AND FCA18.COUNTRYID=PREF.OCOUNTRY AND FCA18.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC19 ON FC19.FIXEDCOSTID =19 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA19 ON FCA19.FIXEDCOSTID =FC19.FIXEDCOSTID AND FCA19.COUNTRYID=PREF.OCOUNTRY AND FCA19.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC20 ON FC20.FIXEDCOSTID =20 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA20 ON FCA20.FIXEDCOSTID =FC20.FIXEDCOSTID AND FCA20.COUNTRYID=PREF.OCOUNTRY AND FCA20.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC21 ON FC21.FIXEDCOSTID =21 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA21 ON FCA21.FIXEDCOSTID =FC21.FIXEDCOSTID AND FCA21.COUNTRYID=PREF.OCOUNTRY AND FCA21.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC22 ON FC22.FIXEDCOSTID =22 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA22 ON FCA22.FIXEDCOSTID =FC22.FIXEDCOSTID AND FCA22.COUNTRYID=PREF.OCOUNTRY AND FCA22.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC23 ON FC23.FIXEDCOSTID =23 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA23 ON FCA23.FIXEDCOSTID =FC23.FIXEDCOSTID AND FCA23.COUNTRYID=PREF.OCOUNTRY AND FCA23.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC24 ON FC24.FIXEDCOSTID =24 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA24 ON FCA24.FIXEDCOSTID =FC24.FIXEDCOSTID AND FCA24.COUNTRYID=PREF.OCOUNTRY AND FCA24.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC25 ON FC25.FIXEDCOSTID =25 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA25 ON FCA25.FIXEDCOSTID =FC25.FIXEDCOSTID AND FCA25.COUNTRYID=PREF.OCOUNTRY AND FCA25.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC26 ON FC26.FIXEDCOSTID =26 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA26 ON FCA26.FIXEDCOSTID =FC26.FIXEDCOSTID AND FCA26.COUNTRYID=PREF.OCOUNTRY AND FCA26.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC27 ON FC27.FIXEDCOSTID =27 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA27 ON FCA27.FIXEDCOSTID =FC27.FIXEDCOSTID AND FCA27.COUNTRYID=PREF.OCOUNTRY AND FCA27.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC28 ON FC28.FIXEDCOSTID =28 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA28 ON FCA28.FIXEDCOSTID =FC28.FIXEDCOSTID AND FCA28.COUNTRYID=PREF.OCOUNTRY AND FCA28.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC29 ON FC29.FIXEDCOSTID =29 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA29 ON FCA29.FIXEDCOSTID =FC29.FIXEDCOSTID AND FCA29.COUNTRYID=PREF.OCOUNTRY AND FCA29.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "INNER JOIN FIXEDCOST FC30 ON FC30.FIXEDCOSTID =30 "
                StrSql = StrSql + "LEFT JOIN FIXEDCOSTARCH FCA30 ON FCA30.FIXEDCOSTID =FC30.FIXEDCOSTID AND FCA30.COUNTRYID=PREF.OCOUNTRY AND FCA30.EFFDATE=PREF.EFFDATE "

                StrSql = StrSql + "WHERE FIXCOST.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetFixedCostDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCustomerINDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT CIN.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS PREFT2, "
                StrSql = StrSql + "PREF.TITLE8 AS PREFT8, "
                StrSql = StrSql + "(CIN.M1*PREF.CURR/PREF.CONVWT) AS PRODPUR, "
                StrSql = StrSql + "CIN.M2*PREF.CONVTHICK3 AS SHIPDIST, "
                StrSql = StrSql + "(CIN.M3*PREF.CURR/PREF.CONVTHICK3) AS MILCOST, "
                StrSql = StrSql + "PREF.TITLE4 AS PREFT4, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM CUSTOMERIN CIN "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=CIN.CASEID "
                StrSql = StrSql + "WHERE CIN.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

            Public Function GetEffiencyDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT MATIN.CASEID,  "
                'PT Changes
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.UNITS, "
                'End
                StrSql = StrSql + "(MAT1.MATDE1 || ' ' || MAT1.MATDE2) AS MAT1, "
                StrSql = StrSql + "(MAT2.MATDE1 || ' ' || MAT2.MATDE2) AS MAT2, "
                StrSql = StrSql + "(MAT3.MATDE1 || ' ' || MAT3.MATDE2) AS MAT3, "
                StrSql = StrSql + "(MAT4.MATDE1 || ' ' || MAT4.MATDE2) AS MAT4, "
                StrSql = StrSql + "(MAT5.MATDE1 || ' ' || MAT5.MATDE2) AS MAT5, "
                StrSql = StrSql + "(MAT6.MATDE1 || ' ' || MAT6.MATDE2) AS MAT6, "
                StrSql = StrSql + "(MAT7.MATDE1 || ' ' || MAT7.MATDE2) AS MAT7, "
                StrSql = StrSql + "(MAT8.MATDE1 || ' ' || MAT8.MATDE2) AS MAT8, "
                StrSql = StrSql + "(MAT9.MATDE1 || ' ' || MAT9.MATDE2) AS MAT9, "
                StrSql = StrSql + "(MAT10.MATDE1 || ' ' || MAT10.MATDE2) AS MAT10, "
                StrSql = StrSql + "(PROC1.PROCDE1 || ' ' ||  PROC1.PROCDE2) AS PROC1, "
                StrSql = StrSql + "(PROC2.PROCDE1 || ' ' ||  PROC2.PROCDE2) AS PROC2, "
                StrSql = StrSql + "(PROC3.PROCDE1 || ' ' ||  PROC3.PROCDE2) AS PROC3, "
                StrSql = StrSql + "(PROC4.PROCDE1 || ' ' ||  PROC4.PROCDE2) AS PROC4, "
                StrSql = StrSql + "(PROC5.PROCDE1 || ' ' ||  PROC5.PROCDE2) AS PROC5, "
                StrSql = StrSql + "(PROC6.PROCDE1 || ' ' ||  PROC6.PROCDE2) AS PROC6, "
                StrSql = StrSql + "(PROC7.PROCDE1 || ' ' ||  PROC7.PROCDE2) AS PROC7, "
                StrSql = StrSql + "(PROC8.PROCDE1 || ' ' ||  PROC8.PROCDE2) AS PROC8, "
                StrSql = StrSql + "(PROC9.PROCDE1 || ' ' ||  PROC9.PROCDE2) AS PROC9, "
                StrSql = StrSql + "(PROC10.PROCDE1 || ' ' ||  PROC10.PROCDE2) AS PROC10, "
                'PT changes
                StrSql = StrSql + "(PROC11.PROCDE1 || ' ' ||  PROC11.PROCDE2) AS PROC11, "
                StrSql = StrSql + "(PROC12.PROCDE1 || ' ' ||  PROC12.PROCDE2) AS PROC12, "
                StrSql = StrSql + "(PROC13.PROCDE1 || ' ' ||  PROC13.PROCDE2) AS PROC13, "
                StrSql = StrSql + "(PROC14.PROCDE1 || ' ' ||  PROC14.PROCDE2) AS PROC14, "
                StrSql = StrSql + "(PROC15.PROCDE1 || ' ' ||  PROC15.PROCDE2) AS PROC15, "
                'end
                StrSql = StrSql + "MATEF.T1 AS MATA1, "
                StrSql = StrSql + "MATEF.T2 AS MATA2, "
                StrSql = StrSql + "MATEF.T3 AS MATA3, "
                StrSql = StrSql + "MATEF.T4 AS MATA4, "
                StrSql = StrSql + "MATEF.T5 AS MATA5, "
                StrSql = StrSql + "MATEF.T6 AS MATA6, "
                StrSql = StrSql + "MATEF.T7 AS MATA7, "
                StrSql = StrSql + "MATEF.T8 AS MATA8, "
                StrSql = StrSql + "MATEF.T9 AS MATA9, "
                StrSql = StrSql + "MATEF.T10 AS MATA10, "

                StrSql = StrSql + "MATEF.S1 AS MATB1, "
                StrSql = StrSql + "MATEF.S2 AS MATB2, "
                StrSql = StrSql + "MATEF.S3 AS MATB3, "
                StrSql = StrSql + "MATEF.S4 AS MATB4, "
                StrSql = StrSql + "MATEF.S5 AS MATB5, "
                StrSql = StrSql + "MATEF.S6 AS MATB6, "
                StrSql = StrSql + "MATEF.S7 AS MATB7, "
                StrSql = StrSql + "MATEF.S8 AS MATB8, "
                StrSql = StrSql + "MATEF.S9 AS MATB9, "
                StrSql = StrSql + "MATEF.S10 AS MATB10, "
                StrSql = StrSql + "MATEF.Y1 AS MATC1, "
                StrSql = StrSql + "MATEF.Y2 AS MATC2, "
                StrSql = StrSql + "MATEF.Y3 AS MATC3, "
                StrSql = StrSql + "MATEF.Y4 AS MATC4, "
                StrSql = StrSql + "MATEF.Y5 AS MATC5, "
                StrSql = StrSql + "MATEF.Y6 AS MATC6, "
                StrSql = StrSql + "MATEF.Y7 AS MATC7, "
                StrSql = StrSql + "MATEF.Y8 AS MATC8, "
                StrSql = StrSql + "MATEF.Y9 AS MATC9, "
                StrSql = StrSql + "MATEF.Y10 AS MATC10, "
                StrSql = StrSql + "MATEF.D1 AS MATD1, "
                StrSql = StrSql + "MATEF.D2 AS MATD2, "
                StrSql = StrSql + "MATEF.D3 AS MATD3, "
                StrSql = StrSql + "MATEF.D4 AS MATD4, "
                StrSql = StrSql + "MATEF.D5 AS MATD5, "
                StrSql = StrSql + "MATEF.D6 AS MATD6, "
                StrSql = StrSql + "MATEF.D7 AS MATD7, "
                StrSql = StrSql + "MATEF.D8 AS MATD8, "
                StrSql = StrSql + "MATEF.D9 AS MATD9, "
                StrSql = StrSql + "MATEF.D10 AS MATD10, "
                StrSql = StrSql + "MATEF.E1 AS MATE1, "
                StrSql = StrSql + "MATEF.E2 AS MATE2, "
                StrSql = StrSql + "MATEF.E3 AS MATE3, "
                StrSql = StrSql + "MATEF.E4 AS MATE4, "
                StrSql = StrSql + "MATEF.E5 AS MATE5, "
                StrSql = StrSql + "MATEF.E6 AS MATE6, "
                StrSql = StrSql + "MATEF.E7 AS MATE7, "
                StrSql = StrSql + "MATEF.E8 AS MATE8, "
                StrSql = StrSql + "MATEF.E9 AS MATE9, "
                StrSql = StrSql + "MATEF.E10 AS MATE10, "
                StrSql = StrSql + "MATEF.Z1 AS MATF1, "
                StrSql = StrSql + "MATEF.Z2 AS MATF2, "
                StrSql = StrSql + "MATEF.Z3 AS MATF3, "
                StrSql = StrSql + "MATEF.Z4 AS MATF4, "
                StrSql = StrSql + "MATEF.Z5 AS MATF5, "
                StrSql = StrSql + "MATEF.Z6 AS MATF6, "
                StrSql = StrSql + "MATEF.Z7 AS MATF7, "
                StrSql = StrSql + "MATEF.Z8 AS MATF8, "
                StrSql = StrSql + "MATEF.Z9 AS MATF9, "
                StrSql = StrSql + "MATEF.Z10 AS MATF10, "
                StrSql = StrSql + "MATEF.B1 AS MATG1, "
                StrSql = StrSql + "MATEF.B2 AS MATG2, "
                StrSql = StrSql + "MATEF.B3 AS MATG3, "
                StrSql = StrSql + "MATEF.B4 AS MATG4, "
                StrSql = StrSql + "MATEF.B5 AS MATG5, "
                StrSql = StrSql + "MATEF.B6 AS MATG6, "
                StrSql = StrSql + "MATEF.B7 AS MATG7, "
                StrSql = StrSql + "MATEF.B8 AS MATG8, "
                StrSql = StrSql + "MATEF.B9 AS MATG9, "
                StrSql = StrSql + "MATEF.B10 AS MATG10, "
                StrSql = StrSql + "MATEF.R1 AS MATH1, "
                StrSql = StrSql + "MATEF.R2 AS MATH2, "
                StrSql = StrSql + "MATEF.R3 AS MATH3, "
                StrSql = StrSql + "MATEF.R4 AS MATH4, "
                StrSql = StrSql + "MATEF.R5 AS MATH5, "
                StrSql = StrSql + "MATEF.R6 AS MATH6, "
                StrSql = StrSql + "MATEF.R7 AS MATH7, "
                StrSql = StrSql + "MATEF.R8 AS MATH8, "
                StrSql = StrSql + "MATEF.R9 AS MATH9, "
                StrSql = StrSql + "MATEF.R10 AS MATH10, "
                StrSql = StrSql + "MATEF.K1 AS MATI1, "
                StrSql = StrSql + "MATEF.K2 AS MATI2, "
                StrSql = StrSql + "MATEF.K3 AS MATI3, "
                StrSql = StrSql + "MATEF.K4 AS MATI4, "
                StrSql = StrSql + "MATEF.K5 AS MATI5, "
                StrSql = StrSql + "MATEF.K6 AS MATI6, "
                StrSql = StrSql + "MATEF.K7 AS MATI7, "
                StrSql = StrSql + "MATEF.K8 AS MATI8, "
                StrSql = StrSql + "MATEF.K9 AS MATI9, "
                StrSql = StrSql + "MATEF.K10 AS MATI10, "
                StrSql = StrSql + "MATEF.P1 AS MATJ1, "
                StrSql = StrSql + "MATEF.P2 AS MATJ2, "
                StrSql = StrSql + "MATEF.P3 AS MATJ3, "
                StrSql = StrSql + "MATEF.P4 AS MATJ4, "
                StrSql = StrSql + "MATEF.P5 AS MATJ5, "
                StrSql = StrSql + "MATEF.P6 AS MATJ6, "
                StrSql = StrSql + "MATEF.P7 AS MATJ7, "
                StrSql = StrSql + "MATEF.P8 AS MATJ8, "
                StrSql = StrSql + "MATEF.P9 AS MATJ9, "
                StrSql = StrSql + "MATEF.P10 AS MATJ10, "
                'pt changes
                StrSql = StrSql + "MATEF.Q1 AS MATK1, "
                StrSql = StrSql + "MATEF.Q2 AS MATK2, "
                StrSql = StrSql + "MATEF.Q3 AS MATK3, "
                StrSql = StrSql + "MATEF.Q4 AS MATK4, "
                StrSql = StrSql + "MATEF.Q5 AS MATK5, "
                StrSql = StrSql + "MATEF.Q6 AS MATK6, "
                StrSql = StrSql + "MATEF.Q7 AS MATK7, "
                StrSql = StrSql + "MATEF.Q8 AS MATK8, "
                StrSql = StrSql + "MATEF.Q9 AS MATK9, "
                StrSql = StrSql + "MATEF.Q10 AS MATK10, "
                StrSql = StrSql + "MATEF.L1 AS MATL1, "
                StrSql = StrSql + "MATEF.L2 AS MATL2, "
                StrSql = StrSql + "MATEF.L3 AS MATL3, "
                StrSql = StrSql + "MATEF.L4 AS MATL4, "
                StrSql = StrSql + "MATEF.L5 AS MATL5, "
                StrSql = StrSql + "MATEF.L6 AS MATL6, "
                StrSql = StrSql + "MATEF.L7 AS MATL7, "
                StrSql = StrSql + "MATEF.L8 AS MATL8, "
                StrSql = StrSql + "MATEF.L9 AS MATL9, "
                StrSql = StrSql + "MATEF.L10 AS MATL10, "
                StrSql = StrSql + "MATEF.U1 AS MATM1, "
                StrSql = StrSql + "MATEF.U2 AS MATM2, "
                StrSql = StrSql + "MATEF.U3 AS MATM3, "
                StrSql = StrSql + "MATEF.U4 AS MATM4, "
                StrSql = StrSql + "MATEF.U5 AS MATM5, "
                StrSql = StrSql + "MATEF.U6 AS MATM6, "
                StrSql = StrSql + "MATEF.U7 AS MATM7, "
                StrSql = StrSql + "MATEF.U8 AS MATM8, "
                StrSql = StrSql + "MATEF.U9 AS MATM9, "
                StrSql = StrSql + "MATEF.U10 AS MATM10, "
                StrSql = StrSql + "MATEF.N1 AS MATN1, "
                StrSql = StrSql + "MATEF.N2 AS MATN2, "
                StrSql = StrSql + "MATEF.N3 AS MATN3, "
                StrSql = StrSql + "MATEF.N4 AS MATN4, "
                StrSql = StrSql + "MATEF.N5 AS MATN5, "
                StrSql = StrSql + "MATEF.N6 AS MATN6, "
                StrSql = StrSql + "MATEF.N7 AS MATN7, "
                StrSql = StrSql + "MATEF.N8 AS MATN8, "
                StrSql = StrSql + "MATEF.N9 AS MATN9, "
                StrSql = StrSql + "MATEF.N10 AS MATN10, "
                StrSql = StrSql + "MATEF.V1 AS MATO1, "
                StrSql = StrSql + "MATEF.V2 AS MATO2, "
                StrSql = StrSql + "MATEF.V3 AS MATO3, "
                StrSql = StrSql + "MATEF.V4 AS MATO4, "
                StrSql = StrSql + "MATEF.V5 AS MATO5, "
                StrSql = StrSql + "MATEF.V6 AS MATO6, "
                StrSql = StrSql + "MATEF.V7 AS MATO7, "
                StrSql = StrSql + "MATEF.V8 AS MATO8, "
                StrSql = StrSql + "MATEF.V9 AS MATO9, "
                StrSql = StrSql + "MATEF.V10 AS MATO10, "
                'end
                StrSql = StrSql + "(CASE WHEN MATIN.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MATIN.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MATIN.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MATIN.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MATIN.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MATIN.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MATIN.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MATIN.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MATIN.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MATIN.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                StrSql = StrSql + "FROM MATERIALINPUT MATIN "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID=MATIN.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID=MATIN.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID=MATIN.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID=MATIN.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID=MATIN.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID=MATIN.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID=MATIN.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID=MATIN.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID=MATIN.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID=MATIN.M10 "
                StrSql = StrSql + "INNER JOIN PLANTCONFIG PLC "
                StrSql = StrSql + "ON PLC.CASEID=MATIN.CASEID "
                StrSql = StrSql + "INNER JOIN PROCESS PROC1 "
                StrSql = StrSql + "ON PROC1.PROCID=PLC.M1 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC2 "
                StrSql = StrSql + "ON PROC2.PROCID=PLC.M2 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC3 "
                StrSql = StrSql + "ON PROC3.PROCID=PLC.M3 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC4 "
                StrSql = StrSql + "ON PROC4.PROCID=PLC.M4 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC5 "
                StrSql = StrSql + "ON PROC5.PROCID=PLC.M5 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC6 "
                StrSql = StrSql + "ON PROC6.PROCID=PLC.M6 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC7 "
                StrSql = StrSql + "ON PROC7.PROCID=PLC.M7 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC8 "
                StrSql = StrSql + "ON PROC8.PROCID=PLC.M8 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC9 "
                StrSql = StrSql + "ON PROC9.PROCID=PLC.M9 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC10 "
                StrSql = StrSql + "ON PROC10.PROCID=PLC.M10 "
                'ptchanges
                StrSql = StrSql + "INNER JOIN PROCESS PROC11 "
                StrSql = StrSql + "ON PROC11.PROCID=PLC.M11 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC12 "
                StrSql = StrSql + "ON PROC12.PROCID=PLC.M12 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC13 "
                StrSql = StrSql + "ON PROC13.PROCID=PLC.M13 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC14 "
                StrSql = StrSql + "ON PROC14.PROCID=PLC.M14 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC15 "
                StrSql = StrSql + "ON PROC15.PROCID=PLC.M15 "
                'end
                StrSql = StrSql + "INNER JOIN MATERIALEFF MATEF "
                StrSql = StrSql + "ON MATEF.CASEID=MATIN.CASEID "

                'PT Changes
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=MATIN.CASEID "
                'End
                StrSql = StrSql + "WHERE  MATIN.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEffiencyDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPlantConfig2Details(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "Select PLS.CASEID,  "
                StrSql = StrSql + "'Production' AS PSPACE1, "
                StrSql = StrSql + "'High Bay' AS PSPACE2, "
                StrSql = StrSql + "'Partial High Bay' AS PSPACE3, "
                StrSql = StrSql + "'Standard' AS PSPACE4, "
                StrSql = StrSql + "'Production Total' AS PSPACE5, "
                StrSql = StrSql + "'Warehouse' AS PSPACE6, "
                StrSql = StrSql + "'Office' AS PSPACE7, "
                StrSql = StrSql + "'Support' AS PSPACE8, "

                StrSql = StrSql + "(PLS.M1* PREF.CONVAREA2) AS AR1, "
                StrSql = StrSql + "(PLS.M2* PREF.CONVAREA2) AS AR2, "
                StrSql = StrSql + "(PLS.M3* PREF.CONVAREA2) AS AR3, "
                StrSql = StrSql + "(PLS.M4* PREF.CONVAREA2) AS AR4, "
                StrSql = StrSql + "(PLS.M5* PREF.CONVAREA2) AS ARTOT, "
                StrSql = StrSql + "PREF.TITLE7 AS TITLE7, "
                StrSql = StrSql + "PREF.TITLE4 AS TITLE4, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.UNITS, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART1.LEASERATE*PREF.CURR) ELSE (ART1.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG1, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART2.LEASERATE*PREF.CURR) ELSE (ART2.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG2, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART3.LEASERATE*PREF.CURR) ELSE (ART3.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG3, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART4.LEASERATE*PREF.CURR) ELSE (ART4.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG4, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART5.LEASERATE*PREF.CURR) ELSE (ART5.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG5, "
                'StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (ART6.LEASERATE*PREF.CURR) ELSE (ART6.LEASERATE*PREF.CURR/PREF.CONVAREA2) END AS  SUG6, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART1.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART1.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG1, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART2.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART2.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG2, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART3.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART3.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG3, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART4.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART4.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG4, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART5.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART5.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG5, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN (NVL(ART6.SUGGRATE,0)*PREF.CURR) ELSE (NVL(ART6.SUGGRATE,0)*PREF.CURR/PREF.CONVAREA2) END AS  SUG6, "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.PRODUCTIONLEASEHB*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.PRODUCTIONLEASEHB*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF1 , "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.PRODUCTIONLEASEPHB*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.PRODUCTIONLEASEPHB*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF2 , "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.PRODUCTIONLEASE*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.PRODUCTIONLEASE*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF3, "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.WAREHOUSELEASE*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.WAREHOUSELEASE*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF4, "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.OFFICELEASE*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.OFFICELEASE*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF5, "
                StrSql = StrSql + "CASE PREF.UNITS WHEN 0 THEN "
                StrSql = StrSql + "PLS.SUPPORTLEASE*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "PLS.SUPPORTLEASE*PREF.CURR/PREF.CONVAREA2 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "AS PREF6, "
                StrSql = StrSql + "(PLS.PHIGHBAY* PREF.CURR) AS PTOT1, "
                StrSql = StrSql + "(PLS.PPHIGHBAY* PREF.CURR) AS PTOT2, "
                StrSql = StrSql + "(PLS.PSTD* PREF.CURR) AS PTOT3, "
                StrSql = StrSql + "(PLS.M6* PREF.CURR) AS PTOT4, "
                StrSql = StrSql + "(PLS.M7* PREF.CURR) AS PTOT5, "
                StrSql = StrSql + "(PLS.M8* PREF.CURR) AS PTOT6, "
                StrSql = StrSql + "(PLS.M9* PREF.CURR) AS PTOT7, "
                StrSql = StrSql + "(PLS.M10* PREF.CURR) AS LEASETOTAL "
                StrSql = StrSql + "FROM PLANTSPACE PLS "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=PLS.CASEID "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART1 "
                'StrSql = StrSql + "ON ART1.AREAID=1 "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART2 "
                'StrSql = StrSql + "ON ART2.AREAID=2 "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART3 "
                'StrSql = StrSql + "ON ART3.AREAID=3 "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART4 "
                'StrSql = StrSql + "ON ART4.AREAID=4 "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART5 "
                'StrSql = StrSql + "ON ART5.AREAID=5 "
                'StrSql = StrSql + "INNER JOIN AREATYPE ART6 "
                ' StrSql = StrSql + "ON ART6.AREAID=6 "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART1 "
                StrSql = StrSql + "ON ART1.LEASECOSTID=1  AND PREF.OCOUNTRY=ART1.COUNTRYID AND PREF.EFFDATE=ART1.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART2 "
                StrSql = StrSql + "ON ART2.LEASECOSTID=2  AND PREF.OCOUNTRY=ART2.COUNTRYID AND PREF.EFFDATE=ART2.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART3 "
                StrSql = StrSql + "ON ART3.LEASECOSTID=3  AND PREF.OCOUNTRY=ART3.COUNTRYID AND PREF.EFFDATE=ART3.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART4 "
                StrSql = StrSql + "ON ART4.LEASECOSTID=4  AND PREF.OCOUNTRY=ART4.COUNTRYID AND PREF.EFFDATE=ART4.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART5 "
                StrSql = StrSql + "ON ART5.LEASECOSTID=5  AND PREF.OCOUNTRY=ART5.COUNTRYID AND PREF.EFFDATE=ART5.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN LEASECOSTARCH ART6 "
                StrSql = StrSql + "ON ART6.LEASECOSTID=6  AND PREF.OCOUNTRY=ART6.COUNTRYID AND PREF.EFFDATE=ART6.EFFDATE "
                StrSql = StrSql + "WHERE  PLS.CASEID=" + CaseId.ToString() + ""


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSupportDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEnergyDetailsOLD(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PREF.TITLE1,  "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS , "
                StrSql = StrSql + "(B1.PRICE*PREF.CURR) ERGPSUG1, "
                StrSql = StrSql + "(B2.PRICE*PREF.CURR) ERGPSUG2, "
                StrSql = StrSql + "(PENG.ELECPRICE*PREF.CURR) ERGPPREF1, "
                StrSql = StrSql + "(PENG.NGASPRICE*PREF.CURR) ERGPPREF2, "
                StrSql = StrSql + "PENG.M1 AS ENRGE1, "
                StrSql = StrSql + "PENG.M2 AS ENRGE2, "
                StrSql = StrSql + "PENG.M3 AS ENRGE3, "
                StrSql = StrSql + "PENG.M4 AS ENRGE4, "
                StrSql = StrSql + "PENG.M5 AS ENRGE5, "
                StrSql = StrSql + "PENG.M6 AS ENRGN1, "
                StrSql = StrSql + "PENG.M7 AS ENRGN2, "
                StrSql = StrSql + "PENG.M8 AS ENRGN3, "
                StrSql = StrSql + "PENG.M9 AS ENRGN4, "
                StrSql = StrSql + "PENG.M10 AS ENRGN5, "
                StrSql = StrSql + "(PENG.D1*PREF.CURR) AS ENRGCE1, "
                StrSql = StrSql + "(PENG.D2*PREF.CURR) AS ENRGCE2, "
                StrSql = StrSql + "(PENG.D3*PREF.CURR) AS ENRGCE3, "
                StrSql = StrSql + "(PENG.D4*PREF.CURR) AS ENRGCE4, "
                StrSql = StrSql + "(PENG.D5*PREF.CURR) AS ENRGCE5, "
                StrSql = StrSql + "(PENG.D6*PREF.CURR) AS ENRGCG1, "
                StrSql = StrSql + "(PENG.D7*PREF.CURR) AS ENRGCG2, "
                StrSql = StrSql + "(PENG.D8*PREF.CURR) AS ENRGCG3, "
                StrSql = StrSql + "(PENG.D9*PREF.CURR) AS ENRGCG4, "
                StrSql = StrSql + "(PENG.D10*PREF.CURR) AS ENRGCG5, "
                StrSql = StrSql + "(PENG.D11*PREF.CURR) AS TOTAL1, "
                StrSql = StrSql + "(PENG.D12*PREF.CURR) AS TOTAL2, "
                StrSql = StrSql + "(PENG.D13*PREF.CURR) AS TOTAL3, "
                StrSql = StrSql + "(PENG.D14*PREF.CURR) AS TOTAL4, "
                StrSql = StrSql + "(PENG.D15*PREF.CURR) AS TOTAL5, "
                StrSql = StrSql + "(PENG.V1*PREF.CURR) AS VTOTAL1, "
                StrSql = StrSql + "(PENG.V2*PREF.CURR) AS VTOTAL2, "
                StrSql = StrSql + "(PENG.V3*PREF.CURR) AS VTOTAL3, "
                StrSql = StrSql + "(PENG.V4*PREF.CURR) AS VTOTAL4, "
                StrSql = StrSql + "(PENG.V5*PREF.CURR) AS VTOTAL5, "
                StrSql = StrSql + "(PENG.F1*PREF.CURR) AS FTOTAL1, "
                StrSql = StrSql + "(PENG.F2*PREF.CURR) AS FTOTAL2, "
                StrSql = StrSql + "(PENG.F3*PREF.CURR) AS FTOTAL3, "
                StrSql = StrSql + "(PENG.F4*PREF.CURR) AS FTOTAL4, "
                StrSql = StrSql + "(PENG.F5*PREF.CURR) AS FTOTAL5 "
                StrSql = StrSql + "FROM PREFERENCES PREF "
                StrSql = StrSql + "INNER JOIN PLANTENERGY PENG "
                StrSql = StrSql + "ON PENG.CASEID= PREF.CASEID "
                StrSql = StrSql + "INNER JOIN ENERGYARCH B1 "
                StrSql = StrSql + "ON B1.ENERGYID = 1 "
                StrSql = StrSql + "AND B1.EFFDATE =PENG.EFFDATE "
                StrSql = StrSql + "INNER JOIN ENERGYARCH B2 "
                StrSql = StrSql + "ON B2.ENERGYID=2 "
                StrSql = StrSql + "AND B2.EFFDATE =PENG.EFFDATE "
                StrSql = StrSql + "WHERE PREF.CASEID =" + CaseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetEnergyDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PREF.TITLE1,  "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS , "
                StrSql = StrSql + "(NVL(B1.PRICE,0)*PREF.CURR) ERGPSUG1, "
                StrSql = StrSql + "(NVL(B2.PRICE,0)*PREF.CURR) ERGPSUG2, "
                StrSql = StrSql + "(PENG.ELECPRICE*PREF.CURR) ERGPPREF1, "
                StrSql = StrSql + "(PENG.NGASPRICE*PREF.CURR) ERGPPREF2, "
                StrSql = StrSql + "PENG.M1 AS ENRGE1, "
                StrSql = StrSql + "PENG.M2 AS ENRGE2, "
                StrSql = StrSql + "PENG.M3 AS ENRGE3, "
                StrSql = StrSql + "PENG.M4 AS ENRGE4, "
                StrSql = StrSql + "PENG.M5 AS ENRGE5, "
                StrSql = StrSql + "PENG.M6 AS ENRGN1, "
                StrSql = StrSql + "PENG.M7 AS ENRGN2, "
                StrSql = StrSql + "PENG.M8 AS ENRGN3, "
                StrSql = StrSql + "PENG.M9 AS ENRGN4, "
                StrSql = StrSql + "PENG.M10 AS ENRGN5, "
                StrSql = StrSql + "(PENG.D1*PREF.CURR) AS ENRGCE1, "
                StrSql = StrSql + "(PENG.D2*PREF.CURR) AS ENRGCE2, "
                StrSql = StrSql + "(PENG.D3*PREF.CURR) AS ENRGCE3, "
                StrSql = StrSql + "(PENG.D4*PREF.CURR) AS ENRGCE4, "
                StrSql = StrSql + "(PENG.D5*PREF.CURR) AS ENRGCE5, "
                StrSql = StrSql + "(PENG.D6*PREF.CURR) AS ENRGCG1, "
                StrSql = StrSql + "(PENG.D7*PREF.CURR) AS ENRGCG2, "
                StrSql = StrSql + "(PENG.D8*PREF.CURR) AS ENRGCG3, "
                StrSql = StrSql + "(PENG.D9*PREF.CURR) AS ENRGCG4, "
                StrSql = StrSql + "(PENG.D10*PREF.CURR) AS ENRGCG5, "
                StrSql = StrSql + "(PENG.D11*PREF.CURR) AS TOTAL1, "
                StrSql = StrSql + "(PENG.D12*PREF.CURR) AS TOTAL2, "
                StrSql = StrSql + "(PENG.D13*PREF.CURR) AS TOTAL3, "
                StrSql = StrSql + "(PENG.D14*PREF.CURR) AS TOTAL4, "
                StrSql = StrSql + "(PENG.D15*PREF.CURR) AS TOTAL5, "
                StrSql = StrSql + "(PENG.V1*PREF.CURR) AS VTOTAL1, "
                StrSql = StrSql + "(PENG.V2*PREF.CURR) AS VTOTAL2, "
                StrSql = StrSql + "(PENG.V3*PREF.CURR) AS VTOTAL3, "
                StrSql = StrSql + "(PENG.V4*PREF.CURR) AS VTOTAL4, "
                StrSql = StrSql + "(PENG.V5*PREF.CURR) AS VTOTAL5, "
                StrSql = StrSql + "(PENG.F1*PREF.CURR) AS FTOTAL1, "
                StrSql = StrSql + "(PENG.F2*PREF.CURR) AS FTOTAL2, "
                StrSql = StrSql + "(PENG.F3*PREF.CURR) AS FTOTAL3, "
                StrSql = StrSql + "(PENG.F4*PREF.CURR) AS FTOTAL4, "
                StrSql = StrSql + "(PENG.F5*PREF.CURR) AS FTOTAL5 "
                StrSql = StrSql + "FROM PREFERENCES PREF "
                StrSql = StrSql + "INNER JOIN PLANTENERGY PENG "
                StrSql = StrSql + "ON PENG.CASEID= PREF.CASEID "
                StrSql = StrSql + "LEFT OUTER JOIN ENERGYARCHNEW B1 "
                StrSql = StrSql + "ON B1.ENERGYID = 1 "
                StrSql = StrSql + "AND B1.EFFDATE =PENG.EFFDATE AND B1.COUNTRYID=PREF.OCOUNTRY " '(SELECT  DC.COUNTRYID FROM PREFERENCES P INNER JOIN COUNTRY C ON C.COUNTRYID =P.OCOUNTRY INNER JOIN ADMINSITE.DIMCOUNTRIES DC ON DC.COUNTRYDES= C.COUNTRYDE1  WHERE CASEID=" + CaseId.ToString() + " )"
                StrSql = StrSql + "LEFT OUTER JOIN ENERGYARCHNEW B2 "
                StrSql = StrSql + "ON B2.ENERGYID=2 "
                StrSql = StrSql + "AND B2.EFFDATE =PENG.EFFDATE AND B2.COUNTRYID=PREF.OCOUNTRY " '(SELECT  DC.COUNTRYID FROM PREFERENCES P INNER JOIN COUNTRY C ON C.COUNTRYID =P.OCOUNTRY INNER JOIN ADMINSITE.DIMCOUNTRIES DC ON DC.COUNTRYDES= C.COUNTRYDE1  WHERE CASEID=" + CaseId.ToString() + " ) "
                StrSql = StrSql + "WHERE PREF.CASEID =" + CaseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEnergyDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetAdditionalEnergyInfo(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PREF.CASEID,  "
                StrSql = StrSql + "'Production' AS SPACETYPE1, "
                StrSql = StrSql + "'Warehouse' AS SPACETYPE2, "
                StrSql = StrSql + "'Office' AS SPACETYPE3, "
                StrSql = StrSql + "'Support' AS SPACETYPE4, "
                StrSql = StrSql + "AT1.ELECPERAREA/PREF.CONVAREA2 AS ENERGYCONSUMAS1, "
                StrSql = StrSql + "AT2.ELECPERAREA/PREF.CONVAREA2 AS ENERGYCONSUMAS2, "
                StrSql = StrSql + "AT3.ELECPERAREA/PREF.CONVAREA2 AS ENERGYCONSUMAS3, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P4/PREF.CONVAREA2 AS ENERGYCONSUMAP1, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P5/PREF.CONVAREA2 AS ENERGYCONSUMAP2, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P6/PREF.CONVAREA2 AS ENERGYCONSUMAP3, "
                StrSql = StrSql + "AT4.GASPERAREA/PREF.CONVAREA2 AS  ENERGYCONSUMBS1, "
                StrSql = StrSql + "AT1.GASPERAREA/PREF.CONVAREA2 AS  ENERGYCONSUMBS2, "
                StrSql = StrSql + "AT2.GASPERAREA/PREF.CONVAREA2 AS  ENERGYCONSUMBS3, "
                StrSql = StrSql + "AT3.GASPERAREA/PREF.CONVAREA2 AS  ENERGYCONSUMBS4, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P7/PREF.CONVAREA2 AS ENERGYCONSUMBP1, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P10/PREF.CONVAREA2 AS ENERGYCONSUMBP2, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P11/PREF.CONVAREA2 AS ENERGYCONSUMBP3, "
                StrSql = StrSql + "SPACEENERGYPREFPERSQFT.P12/PREF.CONVAREA2 AS ENERGYCONSUMBP4, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM PREFERENCES PREF "
                StrSql = StrSql + "INNER JOIN AREATYPE AT1 "
                StrSql = StrSql + "ON AT1.AREAID=4 "
                StrSql = StrSql + "INNER  JOIN AREATYPE AT2 "
                StrSql = StrSql + "ON AT2.AREAID=5 "
                StrSql = StrSql + "INNER  JOIN AREATYPE AT3 "
                StrSql = StrSql + "ON AT3.AREAID=6 "
                StrSql = StrSql + "INNER  JOIN AREATYPE AT4 "
                StrSql = StrSql + "ON AT4.AREAID=1 "
                StrSql = StrSql + "INNER JOIN SPACEENERGYPREFPERSQFT "
                StrSql = StrSql + "ON SPACEENERGYPREFPERSQFT.CASEID=PREF.CASEID "
                StrSql = StrSql + "WHERE PREF.CASEID="+ CaseId.ToString()
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAdditionalEnergyInfo:" + ex.Message.ToString())
                Return Dts

            End Try
        End Function

        Public Function GetCaseViewer(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT PROC1.PROCDE1 AS DEPT1,  "
                StrSql = StrSql + "PROC2.PROCDE1 AS DEPT2, "
                StrSql = StrSql + "PROC3.PROCDE1 AS DEPT3, "
                StrSql = StrSql + "PROC4.PROCDE1 AS DEPT4, "
                StrSql = StrSql + "PROC5.PROCDE1 AS DEPT5, "
                StrSql = StrSql + "PROC6.PROCDE1 AS DEPT6, "
                StrSql = StrSql + "PROC7.PROCDE1 AS DEPT7, "
                StrSql = StrSql + "PROC8.PROCDE1 AS DEPT8, "
                StrSql = StrSql + "PROC9.PROCDE1 AS DEPT9, "
                StrSql = StrSql + "PROC10.PROCDE1 AS DEPT10, "
                StrSql = StrSql + "PLANTCONFIG.M1, "
                StrSql = StrSql + "PLANTCONFIG.M2, "
                StrSql = StrSql + "PLANTCONFIG.M3, "
                StrSql = StrSql + "PLANTCONFIG.M4, "
                StrSql = StrSql + "PLANTCONFIG.M5, "
                StrSql = StrSql + "PLANTCONFIG.M6, "
                StrSql = StrSql + "PLANTCONFIG.M7, "
                StrSql = StrSql + "PLANTCONFIG.M8, "
                StrSql = StrSql + "PLANTCONFIG.M9, "
                StrSql = StrSql + "PLANTCONFIG.M10, "
                StrSql = StrSql + "(RESULTSPL.REVENUE*PREF.CURR)REVENUE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12 "
                StrSql = StrSql + "FROM PLANTCONFIG "
                StrSql = StrSql + "INNER JOIN RESULTSPL "
                StrSql = StrSql + "ON RESULTSPL.CASEID = PLANTCONFIG.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID = PLANTCONFIG.CASEID "
                StrSql = StrSql + "INNER JOIN PROCESS PROC1 "
                StrSql = StrSql + "ON PROC1.PROCID = PLANTCONFIG.M1 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC2 "
                StrSql = StrSql + "ON PROC2.PROCID = PLANTCONFIG.M2 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC3 "
                StrSql = StrSql + "ON PROC3.PROCID = PLANTCONFIG.M3 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC4 "
                StrSql = StrSql + "ON PROC4.PROCID = PLANTCONFIG.M4 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC5 "
                StrSql = StrSql + "ON PROC5.PROCID = PLANTCONFIG.M5 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC6 "
                StrSql = StrSql + "ON PROC6.PROCID = PLANTCONFIG.M6 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC7 "
                StrSql = StrSql + "ON PROC7.PROCID = PLANTCONFIG.M7 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC8 "
                StrSql = StrSql + "ON PROC8.PROCID = PLANTCONFIG.M8 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC9 "
                StrSql = StrSql + "ON PROC9.PROCID = PLANTCONFIG.M9 "
                StrSql = StrSql + "INNER JOIN PROCESS PROC10 "
                StrSql = StrSql + "ON PROC10.PROCID = PLANTCONFIG.M10 "
                StrSql = StrSql + "WHERE PLANTCONFIG.CASEID  = " + CaseId.ToString() + ""


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region

#Region "Notes"
        Public Function GetAssumptionPageDetails(ByVal AssumptionType As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT ASSUMPTIONTYPEID, ASSUMPTIONTYPEDE1, ASSUMPTIONTYPEDE2, ASSUMPTIONTYPECODE  "
                StrSql = StrSql + "FROM ASSUMPTIONTYPES "
                StrSql = StrSql + "WHERE ASSUMPTIONTYPECODE ='" + AssumptionType + "'"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssumptionPageDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPageNoteDetails(ByVal AssumptionType As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID, USERID, ASSUMPTIONTYPE, NOTE FROM NOTES  "
                StrSql = StrSql + "WHERE CASEID = " + CaseId + " "
                StrSql = StrSql + "AND ASSUMPTIONTYPE ='" + AssumptionType + "' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssumptionPageDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCaseNoteDetails(ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "Select (Assumptiontypes.Assumptiontypede1||' '||Assumptiontypes.Assumptiontypede2)assumptiontypedes,  "
                StrSql = StrSql + "Notes.Note "
                StrSql = StrSql + "From Notes "
                StrSql = StrSql + "Inner Join Assumptiontypes "
                StrSql = StrSql + "On Assumptiontypes.Assumptiontypecode = Notes.Assumptiontype "
                StrSql = StrSql + "Where Caseid = " + CaseId + "  Order By Assumptiontypes.Assumptiontypeid"


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssumptionPageDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Intermediate Results"
Public Function GetExtrusionOutDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end
            Try
                StrSql = "SELECT  (MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG1 <> 0 THEN "
                StrSql = StrSql + "MAT.SG1 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT1.SG "
                StrSql = StrSql + "END) AS SG1, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG2 <> 0 THEN "
                StrSql = StrSql + "MAT.SG2 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT2.SG "
                StrSql = StrSql + "END) AS SG2, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG3 <> 0 THEN "
                StrSql = StrSql + "MAT.SG3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT3.SG "
                StrSql = StrSql + "END) AS SG3, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG4 <> 0 THEN "
                StrSql = StrSql + "MAT.SG4 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT4.SG "
                StrSql = StrSql + "END) AS SG4, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG5 <> 0 THEN "
                StrSql = StrSql + "MAT.SG5 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT5.SG "
                StrSql = StrSql + "END) AS SG5, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG6 <> 0 THEN "
                StrSql = StrSql + "MAT.SG6 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT6.SG "
                StrSql = StrSql + "END) AS SG6, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG7 <> 0 THEN "
                StrSql = StrSql + "MAT.SG7 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT7.SG "
                StrSql = StrSql + "END) AS SG7, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG8 <> 0 THEN "
                StrSql = StrSql + "MAT.SG8 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT8.SG "
                StrSql = StrSql + "END) AS SG8, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG9 <> 0 THEN "
                StrSql = StrSql + "MAT.SG9 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT9.SG "
                StrSql = StrSql + "END) AS SG9, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG10 <> 0 THEN "
                StrSql = StrSql + "MAT.SG10 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT10.SG "
                StrSql = StrSql + "END) AS SG10, "
                StrSql = StrSql + "TOT.SG AS SG11, "
                StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA)W1, "
                StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA)W2, "
                StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA)W3, "
                StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA)W4, "
                StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA)W5, "
                StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA)W6, "
                StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA)W7, "
                StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA)W8, "
                StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA)W9, "
                StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA)W10, "
                StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)W11, "
                StrSql = StrSql + "MATOUT.P1, "
                StrSql = StrSql + "MATOUT.P2, "
                StrSql = StrSql + "MATOUT.P3, "
                StrSql = StrSql + "MATOUT.P4, "
                StrSql = StrSql + "MATOUT.P5, "
                StrSql = StrSql + "MATOUT.P6, "
                StrSql = StrSql + "MATOUT.P7, "
                StrSql = StrSql + "MATOUT.P8, "
                StrSql = StrSql + "MATOUT.P9, "
                StrSql = StrSql + "MATOUT.P10, "
                StrSql = StrSql + "(MATOUT.P1+MATOUT.P2+MATOUT.P3+MATOUT.P4+MATOUT.P5+MATOUT.P6+MATOUT.P7+MATOUT.P8+MATOUT.P9+MATOUT.P10)P11, "
                StrSql = StrSql + "(MATOUT.PUR1*PREF.CONVWT) PUR1, "
                StrSql = StrSql + "(MATOUT.PUR2*PREF.CONVWT) PUR2, "
                StrSql = StrSql + "(MATOUT.PUR3*PREF.CONVWT) PUR3, "
                StrSql = StrSql + "(MATOUT.PUR4*PREF.CONVWT) PUR4, "
                StrSql = StrSql + "(MATOUT.PUR5*PREF.CONVWT) PUR5, "
                StrSql = StrSql + "(MATOUT.PUR6*PREF.CONVWT) PUR6, "
                StrSql = StrSql + "(MATOUT.PUR7*PREF.CONVWT) PUR7, "
                StrSql = StrSql + "(MATOUT.PUR8*PREF.CONVWT) PUR8, "
                StrSql = StrSql + "(MATOUT.PUR9*PREF.CONVWT) PUR9, "
                StrSql = StrSql + "(MATOUT.PUR10*PREF.CONVWT) PUR10, "
                StrSql = StrSql + "((MATOUT.PUR1+MATOUT.PUR2+MATOUT.PUR3+MATOUT.PUR4+MATOUT.PUR5+MATOUT.PUR6+MATOUT.PUR7+MATOUT.PUR8+MATOUT.PUR9+MATOUT.PUR10)*PREF.CONVWT)PUR11, "
                StrSql = StrSql + "(MATOUT.PURZ1*" + Curr.ToString() + ") PURZ1, "
                StrSql = StrSql + "(MATOUT.PURZ2*" + Curr.ToString() + ") PURZ2, "
                StrSql = StrSql + "(MATOUT.PURZ3*" + Curr.ToString() + ") PURZ3, "
                StrSql = StrSql + "(MATOUT.PURZ4*" + Curr.ToString() + ") PURZ4, "
                StrSql = StrSql + "(MATOUT.PURZ5*" + Curr.ToString() + ") PURZ5, "
                StrSql = StrSql + "(MATOUT.PURZ6*" + Curr.ToString() + ") PURZ6, "
                StrSql = StrSql + "(MATOUT.PURZ7*" + Curr.ToString() + ") PURZ7, "
                StrSql = StrSql + "(MATOUT.PURZ8*" + Curr.ToString() + ") PURZ8, "
                StrSql = StrSql + "(MATOUT.PURZ9*" + Curr.ToString() + ") PURZ9, "
                StrSql = StrSql + "(MATOUT.PURZ10*" + Curr.ToString() + ") PURZ10, "
                StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")PURZ11, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN1, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN2, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN3, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN4, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN5, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN6, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN7, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN8, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN9, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN10, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN11, "
                StrSql = StrSql + "(CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY') AS EFFDATE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "(CASE WHEN MAT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MAT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MAT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MAT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MAT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MAT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MAT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MAT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MAT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MAT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                StrSql = StrSql + ",MATOUT.PROD1*PREF.CONVWT PROD1 "
                StrSql = StrSql + ",MATOUT.PROD2*PREF.CONVWT PROD2 "
                StrSql = StrSql + ",MATOUT.PROD3*PREF.CONVWT PROD3 "
                StrSql = StrSql + ",MATOUT.PROD4*PREF.CONVWT PROD4 "
                StrSql = StrSql + ",MATOUT.PROD5*PREF.CONVWT PROD5 "
                StrSql = StrSql + ",MATOUT.PROD6*PREF.CONVWT PROD6 "
                StrSql = StrSql + ",MATOUT.PROD7*PREF.CONVWT PROD7 "
                StrSql = StrSql + ",MATOUT.PROD8*PREF.CONVWT PROD8 "
                StrSql = StrSql + ",MATOUT.PROD9*PREF.CONVWT PROD9 "
                StrSql = StrSql + ",MATOUT.PROD10*PREF.CONVWT PROD10 "
                StrSql = StrSql + ",((MATOUT.PROD1+MATOUT.PROD2+MATOUT.PROD3+MATOUT.PROD4+MATOUT.PROD5+MATOUT.PROD6+MATOUT.PROD7+MATOUT.PROD8+MATOUT.PROD9+MATOUT.PROD10)*PREF.CONVWT)PROD11 "
                'PT
                StrSql = StrSql + ",MATOUT.PRODZ1*" + Curr.ToString() + " PRODZ1 "
                StrSql = StrSql + ",MATOUT.PRODZ2*" + Curr.ToString() + " PRODZ2 "
                StrSql = StrSql + ",MATOUT.PRODZ3*" + Curr.ToString() + " PRODZ3 "
                StrSql = StrSql + ",MATOUT.PRODZ4*" + Curr.ToString() + " PRODZ4 "
                StrSql = StrSql + ",MATOUT.PRODZ5*" + Curr.ToString() + " PRODZ5 "
                StrSql = StrSql + ",MATOUT.PRODZ6*" + Curr.ToString() + " PRODZ6 "
                StrSql = StrSql + ",MATOUT.PRODZ7*" + Curr.ToString() + " PRODZ7 "
                StrSql = StrSql + ",MATOUT.PRODZ8*" + Curr.ToString() + " PRODZ8 "
                StrSql = StrSql + ",MATOUT.PRODZ9*" + Curr.ToString() + " PRODZ9 "
                StrSql = StrSql + ",MATOUT.PRODZ10*" + Curr.ToString() + " PRODZ10 "
                StrSql = StrSql + ",((MATOUT.PRODZ1+MATOUT.PRODZ2+MATOUT.PRODZ3+MATOUT.PRODZ4+MATOUT.PRODZ5+MATOUT.PRODZ6+MATOUT.PRODZ7+MATOUT.PRODZ8+MATOUT.PRODZ9+MATOUT.PRODZ10)*" + Curr.ToString() + ")PRODZ11 "

                StrSql = StrSql + ",MATOUT.WASTE1*PREF.CONVWT WASTE1 "
                StrSql = StrSql + ",MATOUT.WASTE2*PREF.CONVWT WASTE2 "
                StrSql = StrSql + ",MATOUT.WASTE3*PREF.CONVWT WASTE3 "
                StrSql = StrSql + ",MATOUT.WASTE4*PREF.CONVWT WASTE4 "
                StrSql = StrSql + ",MATOUT.WASTE5*PREF.CONVWT WASTE5 "
                StrSql = StrSql + ",MATOUT.WASTE6*PREF.CONVWT WASTE6 "
                StrSql = StrSql + ",MATOUT.WASTE7*PREF.CONVWT WASTE7 "
                StrSql = StrSql + ",MATOUT.WASTE8*PREF.CONVWT WASTE8 "
                StrSql = StrSql + ",MATOUT.WASTE9*PREF.CONVWT WASTE9 "
                StrSql = StrSql + ",MATOUT.WASTE10*PREF.CONVWT WASTE10 "
                StrSql = StrSql + ",((MATOUT.WASTE1+MATOUT.WASTE2+MATOUT.WASTE3+MATOUT.WASTE4+MATOUT.WASTE5+MATOUT.WASTE6+MATOUT.WASTE7+MATOUT.WASTE8+MATOUT.WASTE9+MATOUT.WASTE10)*PREF.CONVWT)WASTE11 "

                StrSql = StrSql + ",MATOUT.WASTEZ1*" + Curr.ToString() + " WASTEZ1 "
                StrSql = StrSql + ",MATOUT.WASTEZ2*" + Curr.ToString() + " WASTEZ2 "
                StrSql = StrSql + ",MATOUT.WASTEZ3*" + Curr.ToString() + " WASTEZ3 "
                StrSql = StrSql + ",MATOUT.WASTEZ4*" + Curr.ToString() + " WASTEZ4 "
                StrSql = StrSql + ",MATOUT.WASTEZ5*" + Curr.ToString() + " WASTEZ5 "
                StrSql = StrSql + ",MATOUT.WASTEZ6*" + Curr.ToString() + " WASTEZ6 "
                StrSql = StrSql + ",MATOUT.WASTEZ7*" + Curr.ToString() + " WASTEZ7 "
                StrSql = StrSql + ",MATOUT.WASTEZ8*" + Curr.ToString() + " WASTEZ8 "
                StrSql = StrSql + ",MATOUT.WASTEZ9*" + Curr.ToString() + " WASTEZ9 "
                StrSql = StrSql + ",MATOUT.WASTEZ10*" + Curr.ToString() + " WASTEZ10 "
                StrSql = StrSql + ",((MATOUT.WASTEZ1+MATOUT.WASTEZ2+MATOUT.WASTEZ3+MATOUT.WASTEZ4+MATOUT.WASTEZ5+MATOUT.WASTEZ6+MATOUT.WASTEZ7+MATOUT.WASTEZ8+MATOUT.WASTEZ9+MATOUT.WASTEZ10)*" + Curr.ToString() + ")WASTEZ11 "

                StrSql = StrSql + ",CREDIT1*PREF.CONVWT CREDIT1 "
                StrSql = StrSql + ", CREDIT2*PREF.CONVWT CREDIT2 "
                StrSql = StrSql + ", CREDIT3*PREF.CONVWT CREDIT3 "
                StrSql = StrSql + ", CREDIT4*PREF.CONVWT CREDIT4 "
                StrSql = StrSql + ", CREDIT5*PREF.CONVWT CREDIT5 "
                StrSql = StrSql + ", CREDIT6*PREF.CONVWT CREDIT6 "
                StrSql = StrSql + ", CREDIT7*PREF.CONVWT CREDIT7 "
                StrSql = StrSql + ", CREDIT8*PREF.CONVWT CREDIT8 "
                StrSql = StrSql + ", CREDIT9 *PREF.CONVWT CREDIT9 "
                StrSql = StrSql + ", CREDIT10*PREF.CONVWT CREDIT10 "
                StrSql = StrSql + ",(CASE WHEN CREDIT1 IS NOT NULL THEN CREDIT1 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT2 IS NOT NULL THEN CREDIT2 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT3 IS NOT NULL THEN CREDIT3 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT4 IS NOT NULL THEN CREDIT4 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT5 IS NOT NULL THEN CREDIT5 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT6 IS NOT NULL THEN CREDIT6 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT7 IS NOT NULL THEN CREDIT7 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT8 IS NOT NULL THEN CREDIT8 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT9 IS NOT NULL THEN CREDIT9 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT10 IS NOT NULL THEN CREDIT10 ELSE 0 END"
                StrSql = StrSql + " )*PREF.CONVWT CREDIT11"
                'StrSql = StrSql + ",((CREDIT1+CREDIT2+CREDIT3+CREDIT4+CREDIT5+CREDIT6+CREDIT7+CREDIT8+CREDIT9+CREDIT10))CREDIT11 "
                StrSql = StrSql + ",PRICE1/PREF.CONVWT*" + Curr.ToString() + " PRICE1 "
                StrSql = StrSql + ", PRICE2/PREF.CONVWT*" + Curr.ToString() + " PRICE2 "
                StrSql = StrSql + ", PRICE3/PREF.CONVWT*" + Curr.ToString() + " PRICE3 "
                StrSql = StrSql + ", PRICE4/PREF.CONVWT*" + Curr.ToString() + " PRICE4 "
                StrSql = StrSql + ", PRICE5/PREF.CONVWT*" + Curr.ToString() + " PRICE5 "
                StrSql = StrSql + ", PRICE6/PREF.CONVWT*" + Curr.ToString() + " PRICE6 "
                StrSql = StrSql + ", PRICE7/PREF.CONVWT*" + Curr.ToString() + " PRICE7 "
                StrSql = StrSql + ", PRICE8/PREF.CONVWT*" + Curr.ToString() + " PRICE8 "
                StrSql = StrSql + ", PRICE9/PREF.CONVWT*" + Curr.ToString() + " PRICE9 "
                StrSql = StrSql + ", PRICE10/PREF.CONVWT*" + Curr.ToString() + " PRICE10 "
                'StrSql = StrSql + ",((PRICE1+PRICE2+PRICE3+PRICE4+PRICE5+PRICE6+PRICE7+PRICE8+PRICE9+PRICE10))PRICE11 "
                StrSql = StrSql + ",(CASE WHEN PRICE1 IS NOT NULL THEN PRICE1 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE2 IS NOT NULL THEN PRICE2 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE3 IS NOT NULL THEN PRICE3 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE4 IS NOT NULL THEN PRICE4 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE5 IS NOT NULL THEN PRICE5 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE6 IS NOT NULL THEN PRICE6 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE7 IS NOT NULL THEN PRICE7 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE8 IS NOT NULL THEN PRICE8 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE9 IS NOT NULL THEN PRICE9 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE10 IS NOT NULL THEN PRICE10 ELSE 0 END"
                StrSql = StrSql + " )/PREF.CONVWT*" + Curr.ToString() + " PRICE11"
                StrSql = StrSql + ",TCREDIT1*" + Curr.ToString() + " TCREDIT1 "
                StrSql = StrSql + ",TCREDIT2*" + Curr.ToString() + " TCREDIT2 "
                StrSql = StrSql + ", TCREDIT3*" + Curr.ToString() + " TCREDIT3 "
                StrSql = StrSql + ",TCREDIT4*" + Curr.ToString() + " TCREDIT4 "
                StrSql = StrSql + ",TCREDIT5*" + Curr.ToString() + " TCREDIT5 "
                StrSql = StrSql + ",TCREDIT6*" + Curr.ToString() + " TCREDIT6 "
                StrSql = StrSql + ",TCREDIT7*" + Curr.ToString() + " TCREDIT7 "
                StrSql = StrSql + ",TCREDIT8*" + Curr.ToString() + " TCREDIT8 "
                StrSql = StrSql + ",TCREDIT9*" + Curr.ToString() + " TCREDIT9 "
                StrSql = StrSql + ",TCREDIT10*" + Curr.ToString() + " TCREDIT10 "
                StrSql = StrSql + ",(TOTALCREDIT *" + Curr.ToString() + ")TCREDIT11 "

                'waste%              
                StrSql = StrSql + ",CASE WHEN MATOUT.PUR1 IS NOT NULL AND MATOUT.PUR1 != 0 THEN ((MATOUT.WASTE1/MATOUT.PUR1*100)) ELSE 0 END PWaste1, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR2 IS NOT NULL AND MATOUT.PUR2 != 0 THEN ((MATOUT.WASTE2/MATOUT.PUR2*100)) ELSE 0 END PWaste2, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR3 IS NOT NULL AND MATOUT.PUR3 != 0 THEN ((MATOUT.WASTE3/MATOUT.PUR3*100)) ELSE 0 END PWaste3, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR4 IS NOT NULL AND MATOUT.PUR4 != 0 THEN ((MATOUT.WASTE4/MATOUT.PUR4*100)) ELSE 0 END PWaste4, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR5 IS NOT NULL AND MATOUT.PUR5 != 0 THEN ((MATOUT.WASTE5/MATOUT.PUR5*100)) ELSE 0 END PWaste5, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR6 IS NOT NULL AND MATOUT.PUR6 != 0 THEN ((MATOUT.WASTE6/MATOUT.PUR6*100)) ELSE 0 END PWaste6, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR7 IS NOT NULL AND MATOUT.PUR7 != 0 THEN ((MATOUT.WASTE7/MATOUT.PUR7*100)) ELSE 0 END PWaste7, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR8 IS NOT NULL AND MATOUT.PUR8 != 0 THEN ((MATOUT.WASTE8/MATOUT.PUR8*100)) ELSE 0 END PWaste8, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR9 IS NOT NULL AND MATOUT.PUR9 != 0 THEN ((MATOUT.WASTE9/MATOUT.PUR9*100)) ELSE 0 END PWaste9, "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR10 IS NOT NULL AND MATOUT.PUR10 != 0 THEN ((MATOUT.WASTE10/MATOUT.PUR10*100)) ELSE 0 END PWaste10, "
                StrSql = StrSql + "(("
                StrSql = StrSql + "CASE WHEN MATOUT.PUR1 IS NOT NULL AND MATOUT.PUR1 != 0 THEN ((MATOUT.WASTE1/MATOUT.PUR1*100)) ELSE 0 END +"
                StrSql = StrSql + "CASE WHEN MATOUT.PUR2 IS NOT NULL AND MATOUT.PUR2 != 0 THEN ((MATOUT.WASTE2/MATOUT.PUR2*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR3 IS NOT NULL AND MATOUT.PUR3 != 0 THEN ((MATOUT.WASTE3/MATOUT.PUR3*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR4 IS NOT NULL AND MATOUT.PUR4 != 0 THEN ((MATOUT.WASTE4/MATOUT.PUR4*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR5 IS NOT NULL AND MATOUT.PUR5 != 0 THEN ((MATOUT.WASTE5/MATOUT.PUR5*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR6 IS NOT NULL AND MATOUT.PUR6 != 0 THEN ((MATOUT.WASTE6/MATOUT.PUR6*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR7 IS NOT NULL AND MATOUT.PUR7 != 0 THEN ((MATOUT.WASTE7/MATOUT.PUR7*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR8 IS NOT NULL AND MATOUT.PUR8 != 0 THEN ((MATOUT.WASTE8/MATOUT.PUR8*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR9 IS NOT NULL AND MATOUT.PUR9 != 0 THEN ((MATOUT.WASTE9/MATOUT.PUR9*100)) ELSE 0 END + "
                StrSql = StrSql + "CASE WHEN MATOUT.PUR10 IS NOT NULL AND MATOUT.PUR10 != 0 THEN ((MATOUT.WASTE10/MATOUT.PUR10*100)) ELSE 0 END  "
                StrSql = StrSql + ")*PREF.CONVWT)PWaste11, "

                'net purchase
                StrSql = StrSql + "CASE WHEN TCREDIT1 IS NULL THEN MATOUT.PURZ1*" + Curr.ToString() + " ELSE ((MATOUT.PURZ1-TCREDIT1)*" + Curr.ToString() + ") END  NPURZ1, "
                StrSql = StrSql + "CASE WHEN TCREDIT2 IS NULL THEN MATOUT.PURZ2*" + Curr.ToString() + " ELSE ((MATOUT.PURZ2-TCREDIT2)*" + Curr.ToString() + ") END NPURZ2, "
                StrSql = StrSql + "CASE WHEN TCREDIT3 IS NULL THEN MATOUT.PURZ3*" + Curr.ToString() + " ELSE ((MATOUT.PURZ3-TCREDIT3)*" + Curr.ToString() + ") END NPURZ3, "
                StrSql = StrSql + "CASE WHEN TCREDIT4 IS NULL THEN MATOUT.PURZ4*" + Curr.ToString() + " ELSE ((MATOUT.PURZ4-TCREDIT4)*" + Curr.ToString() + ") END NPURZ4, "
                StrSql = StrSql + "CASE WHEN TCREDIT5 IS NULL THEN MATOUT.PURZ5*" + Curr.ToString() + " ELSE ((MATOUT.PURZ5-TCREDIT5)*" + Curr.ToString() + ") END NPURZ5, "
                StrSql = StrSql + "CASE WHEN TCREDIT6 IS NULL THEN MATOUT.PURZ6*" + Curr.ToString() + " ELSE ((MATOUT.PURZ6-TCREDIT6)*" + Curr.ToString() + ") END NPURZ6, "
                StrSql = StrSql + "CASE WHEN TCREDIT7 IS NULL THEN MATOUT.PURZ7*" + Curr.ToString() + " ELSE ((MATOUT.PURZ7-TCREDIT7)*" + Curr.ToString() + ") END NPURZ7, "
                StrSql = StrSql + "CASE WHEN TCREDIT8 IS NULL THEN MATOUT.PURZ8*" + Curr.ToString() + " ELSE ((MATOUT.PURZ8-TCREDIT8)*" + Curr.ToString() + ") END NPURZ8, "
                StrSql = StrSql + "CASE WHEN TCREDIT9 IS NULL THEN MATOUT.PURZ9*" + Curr.ToString() + " ELSE ((MATOUT.PURZ9-TCREDIT9)*" + Curr.ToString() + ") END NPURZ9, "
                StrSql = StrSql + "CASE WHEN TCREDIT10 IS NULL THEN MATOUT.PURZ10*" + Curr.ToString() + " ELSE ((MATOUT.PURZ10-TCREDIT10)*" + Curr.ToString() + ") END NPURZ10, "

                StrSql = StrSql + "(( CASE WHEN TCREDIT1 IS NULL THEN MATOUT.PURZ1 ELSE (MATOUT.PURZ1-TCREDIT1) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT2 IS NULL THEN MATOUT.PURZ2 ELSE (MATOUT.PURZ2-TCREDIT2) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT3 IS NULL THEN MATOUT.PURZ3 ELSE (MATOUT.PURZ3-TCREDIT3) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT4 IS NULL THEN MATOUT.PURZ4 ELSE (MATOUT.PURZ4-TCREDIT4) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT5 IS NULL THEN MATOUT.PURZ5 ELSE (MATOUT.PURZ5-TCREDIT5) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT6 IS NULL THEN MATOUT.PURZ6 ELSE (MATOUT.PURZ6-TCREDIT6) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT7 IS NULL THEN MATOUT.PURZ7 ELSE (MATOUT.PURZ7-TCREDIT7) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT8 IS NULL THEN MATOUT.PURZ8 ELSE (MATOUT.PURZ8-TCREDIT8) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT9 IS NULL THEN MATOUT.PURZ9 ELSE (MATOUT.PURZ9-TCREDIT9) END "
                StrSql = StrSql + "+  CASE WHEN TCREDIT10 IS NULL THEN MATOUT.PURZ10 ELSE (MATOUT.PURZ10-TCREDIT10) END "
                StrSql = StrSql + ")*" + Curr.ToString() + ")NPURZ11, "
 StrSql = StrSql + "PREF.CURR , "
                StrSql = StrSql + "RSPL.FINVOLMUNITS ,"
                StrSql = StrSql + "TOT.DISCRETECOST, "
                StrSql = StrSql + "MATDESC.DISID1, "
                StrSql = StrSql + "MATDESC.DISID2, "
                StrSql = StrSql + "MATDESC.DISID3, "

                StrSql = StrSql + "MATDESC.DISP1* PREF.CURR AS DISP1, "
                StrSql = StrSql + "MATDESC.DISP2* PREF.CURR AS DISP2, "
                StrSql = StrSql + "MATDESC.DISP3* PREF.CURR AS DISP3, "
                StrSql = StrSql + "RSPL.DISCRETETOTWT * PREF.CONVWT  DISCRETETOTWT , "
                StrSql = StrSql + "RSPL.DISCRETETOTCST* " + Curr.ToString() + "  DISCRETETOTCST "

                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "LEFT JOIN CREDITINPUT CI ON CI.CASEID=MAT.CASEID "
   StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RSPL "
                StrSql = StrSql + "ON RSPL.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID = " + CaseId.ToString() + ""
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetExtrusionOutDetails4Aug2023(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end
            Try
                StrSql = "SELECT  (MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG1 <> 0 THEN "
                StrSql = StrSql + "MAT.SG1 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT1.SG "
                StrSql = StrSql + "END) AS SG1, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG2 <> 0 THEN "
                StrSql = StrSql + "MAT.SG2 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT2.SG "
                StrSql = StrSql + "END) AS SG2, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG3 <> 0 THEN "
                StrSql = StrSql + "MAT.SG3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT3.SG "
                StrSql = StrSql + "END) AS SG3, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG4 <> 0 THEN "
                StrSql = StrSql + "MAT.SG4 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT4.SG "
                StrSql = StrSql + "END) AS SG4, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG5 <> 0 THEN "
                StrSql = StrSql + "MAT.SG5 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT5.SG "
                StrSql = StrSql + "END) AS SG5, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG6 <> 0 THEN "
                StrSql = StrSql + "MAT.SG6 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT6.SG "
                StrSql = StrSql + "END) AS SG6, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG7 <> 0 THEN "
                StrSql = StrSql + "MAT.SG7 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT7.SG "
                StrSql = StrSql + "END) AS SG7, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG8 <> 0 THEN "
                StrSql = StrSql + "MAT.SG8 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT8.SG "
                StrSql = StrSql + "END) AS SG8, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG9 <> 0 THEN "
                StrSql = StrSql + "MAT.SG9 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT9.SG "
                StrSql = StrSql + "END) AS SG9, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG10 <> 0 THEN "
                StrSql = StrSql + "MAT.SG10 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT10.SG "
                StrSql = StrSql + "END) AS SG10, "
                StrSql = StrSql + "TOT.SG AS SG11, "
                StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA)W1, "
                StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA)W2, "
                StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA)W3, "
                StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA)W4, "
                StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA)W5, "
                StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA)W6, "
                StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA)W7, "
                StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA)W8, "
                StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA)W9, "
                StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA)W10, "
                StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)W11, "
                StrSql = StrSql + "MATOUT.P1, "
                StrSql = StrSql + "MATOUT.P2, "
                StrSql = StrSql + "MATOUT.P3, "
                StrSql = StrSql + "MATOUT.P4, "
                StrSql = StrSql + "MATOUT.P5, "
                StrSql = StrSql + "MATOUT.P6, "
                StrSql = StrSql + "MATOUT.P7, "
                StrSql = StrSql + "MATOUT.P8, "
                StrSql = StrSql + "MATOUT.P9, "
                StrSql = StrSql + "MATOUT.P10, "
                StrSql = StrSql + "(MATOUT.P1+MATOUT.P2+MATOUT.P3+MATOUT.P4+MATOUT.P5+MATOUT.P6+MATOUT.P7+MATOUT.P8+MATOUT.P9+MATOUT.P10)P11, "
                StrSql = StrSql + "(MATOUT.PUR1*PREF.CONVWT) PUR1, "
                StrSql = StrSql + "(MATOUT.PUR2*PREF.CONVWT) PUR2, "
                StrSql = StrSql + "(MATOUT.PUR3*PREF.CONVWT) PUR3, "
                StrSql = StrSql + "(MATOUT.PUR4*PREF.CONVWT) PUR4, "
                StrSql = StrSql + "(MATOUT.PUR5*PREF.CONVWT) PUR5, "
                StrSql = StrSql + "(MATOUT.PUR6*PREF.CONVWT) PUR6, "
                StrSql = StrSql + "(MATOUT.PUR7*PREF.CONVWT) PUR7, "
                StrSql = StrSql + "(MATOUT.PUR8*PREF.CONVWT) PUR8, "
                StrSql = StrSql + "(MATOUT.PUR9*PREF.CONVWT) PUR9, "
                StrSql = StrSql + "(MATOUT.PUR10*PREF.CONVWT) PUR10, "
                StrSql = StrSql + "((MATOUT.PUR1+MATOUT.PUR2+MATOUT.PUR3+MATOUT.PUR4+MATOUT.PUR5+MATOUT.PUR6+MATOUT.PUR7+MATOUT.PUR8+MATOUT.PUR9+MATOUT.PUR10)*PREF.CONVWT)PUR11, "
                StrSql = StrSql + "(MATOUT.PURZ1*" + Curr.ToString() + ") PURZ1, "
                StrSql = StrSql + "(MATOUT.PURZ2*" + Curr.ToString() + ") PURZ2, "
                StrSql = StrSql + "(MATOUT.PURZ3*" + Curr.ToString() + ") PURZ3, "
                StrSql = StrSql + "(MATOUT.PURZ4*" + Curr.ToString() + ") PURZ4, "
                StrSql = StrSql + "(MATOUT.PURZ5*" + Curr.ToString() + ") PURZ5, "
                StrSql = StrSql + "(MATOUT.PURZ6*" + Curr.ToString() + ") PURZ6, "
                StrSql = StrSql + "(MATOUT.PURZ7*" + Curr.ToString() + ") PURZ7, "
                StrSql = StrSql + "(MATOUT.PURZ8*" + Curr.ToString() + ") PURZ8, "
                StrSql = StrSql + "(MATOUT.PURZ9*" + Curr.ToString() + ") PURZ9, "
                StrSql = StrSql + "(MATOUT.PURZ10*" + Curr.ToString() + ") PURZ10, "
                StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")PURZ11, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN1, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN2, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN3, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN4, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN5, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN6, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN7, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN8, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN9, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN10, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN11, "
                StrSql = StrSql + "(CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY') AS EFFDATE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "(CASE WHEN MAT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MAT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MAT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MAT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MAT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MAT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MAT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MAT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MAT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MAT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                StrSql = StrSql + ",MATOUT.PROD1*PREF.CONVWT PROD1 "
                StrSql = StrSql + ",MATOUT.PROD2*PREF.CONVWT PROD2 "
                StrSql = StrSql + ",MATOUT.PROD3*PREF.CONVWT PROD3 "
                StrSql = StrSql + ",MATOUT.PROD4*PREF.CONVWT PROD4 "
                StrSql = StrSql + ",MATOUT.PROD5*PREF.CONVWT PROD5 "
                StrSql = StrSql + ",MATOUT.PROD6*PREF.CONVWT PROD6 "
                StrSql = StrSql + ",MATOUT.PROD7*PREF.CONVWT PROD7 "
                StrSql = StrSql + ",MATOUT.PROD8*PREF.CONVWT PROD8 "
                StrSql = StrSql + ",MATOUT.PROD9*PREF.CONVWT PROD9 "
                StrSql = StrSql + ",MATOUT.PROD10*PREF.CONVWT PROD10 "
                StrSql = StrSql + ",((MATOUT.PROD1+MATOUT.PROD2+MATOUT.PROD3+MATOUT.PROD4+MATOUT.PROD5+MATOUT.PROD6+MATOUT.PROD7+MATOUT.PROD8+MATOUT.PROD9+MATOUT.PROD10)*PREF.CONVWT)PROD11 "

                StrSql = StrSql + ",MATOUT.WASTE1*PREF.CONVWT WASTE1 "
                StrSql = StrSql + ",MATOUT.WASTE2*PREF.CONVWT WASTE2 "
                StrSql = StrSql + ",MATOUT.WASTE3*PREF.CONVWT WASTE3 "
                StrSql = StrSql + ",MATOUT.WASTE4*PREF.CONVWT WASTE4 "
                StrSql = StrSql + ",MATOUT.WASTE5*PREF.CONVWT WASTE5 "
                StrSql = StrSql + ",MATOUT.WASTE6*PREF.CONVWT WASTE6 "
                StrSql = StrSql + ",MATOUT.WASTE7*PREF.CONVWT WASTE7 "
                StrSql = StrSql + ",MATOUT.WASTE8*PREF.CONVWT WASTE8 "
                StrSql = StrSql + ",MATOUT.WASTE9*PREF.CONVWT WASTE9 "
                StrSql = StrSql + ",MATOUT.WASTE10*PREF.CONVWT WASTE10 "
                StrSql = StrSql + ",((MATOUT.WASTE1+MATOUT.WASTE2+MATOUT.WASTE3+MATOUT.WASTE4+MATOUT.WASTE5+MATOUT.WASTE6+MATOUT.WASTE7+MATOUT.WASTE8+MATOUT.WASTE9+MATOUT.WASTE10)*PREF.CONVWT)WASTE11 "

                StrSql = StrSql + ",CREDIT1*PREF.CONVWT CREDIT1 "
                StrSql = StrSql + ", CREDIT2*PREF.CONVWT CREDIT2 "
                StrSql = StrSql + ", CREDIT3*PREF.CONVWT CREDIT3 "
                StrSql = StrSql + ", CREDIT4*PREF.CONVWT CREDIT4 "
                StrSql = StrSql + ", CREDIT5*PREF.CONVWT CREDIT5 "
                StrSql = StrSql + ", CREDIT6*PREF.CONVWT CREDIT6 "
                StrSql = StrSql + ", CREDIT7*PREF.CONVWT CREDIT7 "
                StrSql = StrSql + ", CREDIT8*PREF.CONVWT CREDIT8 "
                StrSql = StrSql + ", CREDIT9 *PREF.CONVWT CREDIT9 "
                StrSql = StrSql + ", CREDIT10*PREF.CONVWT CREDIT10 "
                StrSql = StrSql + ",(CASE WHEN CREDIT1 IS NOT NULL THEN CREDIT1 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT2 IS NOT NULL THEN CREDIT2 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT3 IS NOT NULL THEN CREDIT3 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT4 IS NOT NULL THEN CREDIT4 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT5 IS NOT NULL THEN CREDIT5 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT6 IS NOT NULL THEN CREDIT6 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT7 IS NOT NULL THEN CREDIT7 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT8 IS NOT NULL THEN CREDIT8 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT9 IS NOT NULL THEN CREDIT9 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN CREDIT10 IS NOT NULL THEN CREDIT10 ELSE 0 END"
                StrSql = StrSql + " )*PREF.CONVWT CREDIT11"
                'StrSql = StrSql + ",((CREDIT1+CREDIT2+CREDIT3+CREDIT4+CREDIT5+CREDIT6+CREDIT7+CREDIT8+CREDIT9+CREDIT10))CREDIT11 "
                StrSql = StrSql + ",PRICE1/PREF.CONVWT*" + Curr.ToString() + " PRICE1 "
                StrSql = StrSql + ", PRICE2/PREF.CONVWT*" + Curr.ToString() + " PRICE2 "
                StrSql = StrSql + ", PRICE3/PREF.CONVWT*" + Curr.ToString() + " PRICE3 "
                StrSql = StrSql + ", PRICE4/PREF.CONVWT*" + Curr.ToString() + " PRICE4 "
                StrSql = StrSql + ", PRICE5/PREF.CONVWT*" + Curr.ToString() + " PRICE5 "
                StrSql = StrSql + ", PRICE6/PREF.CONVWT*" + Curr.ToString() + " PRICE6 "
                StrSql = StrSql + ", PRICE7/PREF.CONVWT*" + Curr.ToString() + " PRICE7 "
                StrSql = StrSql + ", PRICE8/PREF.CONVWT*" + Curr.ToString() + " PRICE8 "
                StrSql = StrSql + ", PRICE9/PREF.CONVWT*" + Curr.ToString() + " PRICE9 "
                StrSql = StrSql + ", PRICE10/PREF.CONVWT*" + Curr.ToString() + " PRICE10 "
                'StrSql = StrSql + ",((PRICE1+PRICE2+PRICE3+PRICE4+PRICE5+PRICE6+PRICE7+PRICE8+PRICE9+PRICE10))PRICE11 "
                StrSql = StrSql + ",(CASE WHEN PRICE1 IS NOT NULL THEN PRICE1 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE2 IS NOT NULL THEN PRICE2 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE3 IS NOT NULL THEN PRICE3 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE4 IS NOT NULL THEN PRICE4 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE5 IS NOT NULL THEN PRICE5 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE6 IS NOT NULL THEN PRICE6 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE7 IS NOT NULL THEN PRICE7 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE8 IS NOT NULL THEN PRICE8 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE9 IS NOT NULL THEN PRICE9 ELSE 0 END"
                StrSql = StrSql + "+CASE WHEN PRICE10 IS NOT NULL THEN PRICE10 ELSE 0 END"
                StrSql = StrSql + " )/PREF.CONVWT*" + Curr.ToString() + " PRICE11"
                StrSql = StrSql + ",TCREDIT1*" + Curr.ToString() + " TCREDIT1 "
                StrSql = StrSql + ",TCREDIT2*" + Curr.ToString() + " TCREDIT2 "
                StrSql = StrSql + ", TCREDIT3*" + Curr.ToString() + " TCREDIT3 "
                StrSql = StrSql + ",TCREDIT4*" + Curr.ToString() + " TCREDIT4 "
                StrSql = StrSql + ",TCREDIT5*" + Curr.ToString() + " TCREDIT5 "
                StrSql = StrSql + ",TCREDIT6*" + Curr.ToString() + " TCREDIT6 "
                StrSql = StrSql + ",TCREDIT7*" + Curr.ToString() + " TCREDIT7 "
                StrSql = StrSql + ",TCREDIT8*" + Curr.ToString() + " TCREDIT8 "
                StrSql = StrSql + ",TCREDIT9*" + Curr.ToString() + " TCREDIT9 "
                StrSql = StrSql + ",TCREDIT10*" + Curr.ToString() + " TCREDIT10 "
                StrSql = StrSql + ",(TOTALCREDIT *" + Curr.ToString() + ")TCREDIT11 "
                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "LEFT JOIN CREDITINPUT CI ON CI.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RSPL "
                StrSql = StrSql + "ON RSPL.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID = " + CaseId.ToString() + ""
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetExtrusionOutDetailsOLD1(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            'PT changes
            Dim dseffdatefrm As New DataSet()
            Dim ds As New DataSet()
            Dim Curr As String
            ds = GetPref(CaseId)
            dseffdatefrm = GetEffdateFrm(CaseId)
            If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                Curr = ds.Tables(0).Rows(0).Item("curravg").ToString()
            Else
                Curr = ds.Tables(0).Rows(0).Item("curr").ToString()
            End If
            'end
            Try
                StrSql = "SELECT  (MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG1 <> 0 THEN "
                StrSql = StrSql + "MAT.SG1 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT1.SG "
                StrSql = StrSql + "END) AS SG1, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG2 <> 0 THEN "
                StrSql = StrSql + "MAT.SG2 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT2.SG "
                StrSql = StrSql + "END) AS SG2, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG3 <> 0 THEN "
                StrSql = StrSql + "MAT.SG3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT3.SG "
                StrSql = StrSql + "END) AS SG3, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG4 <> 0 THEN "
                StrSql = StrSql + "MAT.SG4 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT4.SG "
                StrSql = StrSql + "END) AS SG4, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG5 <> 0 THEN "
                StrSql = StrSql + "MAT.SG5 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT5.SG "
                StrSql = StrSql + "END) AS SG5, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG6 <> 0 THEN "
                StrSql = StrSql + "MAT.SG6 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT6.SG "
                StrSql = StrSql + "END) AS SG6, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG7 <> 0 THEN "
                StrSql = StrSql + "MAT.SG7 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT7.SG "
                StrSql = StrSql + "END) AS SG7, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG8 <> 0 THEN "
                StrSql = StrSql + "MAT.SG8 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT8.SG "
                StrSql = StrSql + "END) AS SG8, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG9 <> 0 THEN "
                StrSql = StrSql + "MAT.SG9 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT9.SG "
                StrSql = StrSql + "END) AS SG9, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG10 <> 0 THEN "
                StrSql = StrSql + "MAT.SG10 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT10.SG "
                StrSql = StrSql + "END) AS SG10, "
                StrSql = StrSql + "TOT.SG AS SG11, "
                StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA)W1, "
                StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA)W2, "
                StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA)W3, "
                StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA)W4, "
                StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA)W5, "
                StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA)W6, "
                StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA)W7, "
                StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA)W8, "
                StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA)W9, "
                StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA)W10, "
                StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)W11, "
                StrSql = StrSql + "MATOUT.P1, "
                StrSql = StrSql + "MATOUT.P2, "
                StrSql = StrSql + "MATOUT.P3, "
                StrSql = StrSql + "MATOUT.P4, "
                StrSql = StrSql + "MATOUT.P5, "
                StrSql = StrSql + "MATOUT.P6, "
                StrSql = StrSql + "MATOUT.P7, "
                StrSql = StrSql + "MATOUT.P8, "
                StrSql = StrSql + "MATOUT.P9, "
                StrSql = StrSql + "MATOUT.P10, "
                StrSql = StrSql + "(MATOUT.P1+MATOUT.P2+MATOUT.P3+MATOUT.P4+MATOUT.P5+MATOUT.P6+MATOUT.P7+MATOUT.P8+MATOUT.P9+MATOUT.P10)P11, "
                StrSql = StrSql + "(MATOUT.PUR1*PREF.CONVWT) PUR1, "
                StrSql = StrSql + "(MATOUT.PUR2*PREF.CONVWT) PUR2, "
                StrSql = StrSql + "(MATOUT.PUR3*PREF.CONVWT) PUR3, "
                StrSql = StrSql + "(MATOUT.PUR4*PREF.CONVWT) PUR4, "
                StrSql = StrSql + "(MATOUT.PUR5*PREF.CONVWT) PUR5, "
                StrSql = StrSql + "(MATOUT.PUR6*PREF.CONVWT) PUR6, "
                StrSql = StrSql + "(MATOUT.PUR7*PREF.CONVWT) PUR7, "
                StrSql = StrSql + "(MATOUT.PUR8*PREF.CONVWT) PUR8, "
                StrSql = StrSql + "(MATOUT.PUR9*PREF.CONVWT) PUR9, "
                StrSql = StrSql + "(MATOUT.PUR10*PREF.CONVWT) PUR10, "
                StrSql = StrSql + "((MATOUT.PUR1+MATOUT.PUR2+MATOUT.PUR3+MATOUT.PUR4+MATOUT.PUR5+MATOUT.PUR6+MATOUT.PUR7+MATOUT.PUR8+MATOUT.PUR9+MATOUT.PUR10)*PREF.CONVWT)PUR11, "
                StrSql = StrSql + "(MATOUT.PURZ1*" + Curr.ToString() + ") PURZ1, "
                StrSql = StrSql + "(MATOUT.PURZ2*" + Curr.ToString() + ") PURZ2, "
                StrSql = StrSql + "(MATOUT.PURZ3*" + Curr.ToString() + ") PURZ3, "
                StrSql = StrSql + "(MATOUT.PURZ4*" + Curr.ToString() + ") PURZ4, "
                StrSql = StrSql + "(MATOUT.PURZ5*" + Curr.ToString() + ") PURZ5, "
                StrSql = StrSql + "(MATOUT.PURZ6*" + Curr.ToString() + ") PURZ6, "
                StrSql = StrSql + "(MATOUT.PURZ7*" + Curr.ToString() + ") PURZ7, "
                StrSql = StrSql + "(MATOUT.PURZ8*" + Curr.ToString() + ") PURZ8, "
                StrSql = StrSql + "(MATOUT.PURZ9*" + Curr.ToString() + ") PURZ9, "
                StrSql = StrSql + "(MATOUT.PURZ10*" + Curr.ToString() + ") PURZ10, "
                StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*" + Curr.ToString() + ")PURZ11, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN1, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN2, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN3, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN4, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN5, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN6, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN7, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN8, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN9, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN10, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMSI*100*" + Curr.ToString() + "/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMUNITS*100*" + Curr.ToString() + " "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN11, "
                StrSql = StrSql + "(CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY') AS EFFDATE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "(CASE WHEN MAT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MAT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MAT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MAT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MAT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MAT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MAT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MAT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MAT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MAT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RSPL "
                StrSql = StrSql + "ON RSPL.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID = " + CaseId.ToString() + ""



                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetExtrusionOutDetailsOLD(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  (MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG1 <> 0 THEN "
                StrSql = StrSql + "MAT.SG1 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT1.SG "
                StrSql = StrSql + "END) AS SG1, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG2 <> 0 THEN "
                StrSql = StrSql + "MAT.SG2 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT2.SG "
                StrSql = StrSql + "END) AS SG2, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG3 <> 0 THEN "
                StrSql = StrSql + "MAT.SG3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT3.SG "
                StrSql = StrSql + "END) AS SG3, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG4 <> 0 THEN "
                StrSql = StrSql + "MAT.SG4 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT4.SG "
                StrSql = StrSql + "END) AS SG4, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG5 <> 0 THEN "
                StrSql = StrSql + "MAT.SG5 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT5.SG "
                StrSql = StrSql + "END) AS SG5, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG6 <> 0 THEN "
                StrSql = StrSql + "MAT.SG6 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT6.SG "
                StrSql = StrSql + "END) AS SG6, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG7 <> 0 THEN "
                StrSql = StrSql + "MAT.SG7 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT7.SG "
                StrSql = StrSql + "END) AS SG7, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG8 <> 0 THEN "
                StrSql = StrSql + "MAT.SG8 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT8.SG "
                StrSql = StrSql + "END) AS SG8, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG9 <> 0 THEN "
                StrSql = StrSql + "MAT.SG9 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT9.SG "
                StrSql = StrSql + "END) AS SG9, "
                StrSql = StrSql + "(CASE WHEN  MAT.SG10 <> 0 THEN "
                StrSql = StrSql + "MAT.SG10 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "MAT10.SG "
                StrSql = StrSql + "END) AS SG10, "
                StrSql = StrSql + "TOT.SG AS SG11, "
                StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA)W1, "
                StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA)W2, "
                StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA)W3, "
                StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA)W4, "
                StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA)W5, "
                StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA)W6, "
                StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA)W7, "
                StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA)W8, "
                StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA)W9, "
                StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA)W10, "
                StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)W11, "
                StrSql = StrSql + "MATOUT.P1, "
                StrSql = StrSql + "MATOUT.P2, "
                StrSql = StrSql + "MATOUT.P3, "
                StrSql = StrSql + "MATOUT.P4, "
                StrSql = StrSql + "MATOUT.P5, "
                StrSql = StrSql + "MATOUT.P6, "
                StrSql = StrSql + "MATOUT.P7, "
                StrSql = StrSql + "MATOUT.P8, "
                StrSql = StrSql + "MATOUT.P9, "
                StrSql = StrSql + "MATOUT.P10, "
                StrSql = StrSql + "(MATOUT.P1+MATOUT.P2+MATOUT.P3+MATOUT.P4+MATOUT.P5+MATOUT.P6+MATOUT.P7+MATOUT.P8+MATOUT.P9+MATOUT.P10)P11, "
                StrSql = StrSql + "(MATOUT.PUR1*PREF.CONVWT) PUR1, "
                StrSql = StrSql + "(MATOUT.PUR2*PREF.CONVWT) PUR2, "
                StrSql = StrSql + "(MATOUT.PUR3*PREF.CONVWT) PUR3, "
                StrSql = StrSql + "(MATOUT.PUR4*PREF.CONVWT) PUR4, "
                StrSql = StrSql + "(MATOUT.PUR5*PREF.CONVWT) PUR5, "
                StrSql = StrSql + "(MATOUT.PUR6*PREF.CONVWT) PUR6, "
                StrSql = StrSql + "(MATOUT.PUR7*PREF.CONVWT) PUR7, "
                StrSql = StrSql + "(MATOUT.PUR8*PREF.CONVWT) PUR8, "
                StrSql = StrSql + "(MATOUT.PUR9*PREF.CONVWT) PUR9, "
                StrSql = StrSql + "(MATOUT.PUR10*PREF.CONVWT) PUR10, "
                StrSql = StrSql + "((MATOUT.PUR1+MATOUT.PUR2+MATOUT.PUR3+MATOUT.PUR4+MATOUT.PUR5+MATOUT.PUR6+MATOUT.PUR7+MATOUT.PUR8+MATOUT.PUR9+MATOUT.PUR10)*PREF.CONVWT)PUR11, "
                StrSql = StrSql + "(MATOUT.PURZ1*PREF.CURR) PURZ1, "
                StrSql = StrSql + "(MATOUT.PURZ2*PREF.CURR) PURZ2, "
                StrSql = StrSql + "(MATOUT.PURZ3*PREF.CURR) PURZ3, "
                StrSql = StrSql + "(MATOUT.PURZ4*PREF.CURR) PURZ4, "
                StrSql = StrSql + "(MATOUT.PURZ5*PREF.CURR) PURZ5, "
                StrSql = StrSql + "(MATOUT.PURZ6*PREF.CURR) PURZ6, "
                StrSql = StrSql + "(MATOUT.PURZ7*PREF.CURR) PURZ7, "
                StrSql = StrSql + "(MATOUT.PURZ8*PREF.CURR) PURZ8, "
                StrSql = StrSql + "(MATOUT.PURZ9*PREF.CURR) PURZ9, "
                StrSql = StrSql + "(MATOUT.PURZ10*PREF.CURR) PURZ10, "
                StrSql = StrSql + "((MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)*PREF.CURR)PURZ11, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ1/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN1, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ2/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN2, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ3/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN3, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ4/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN4, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ5/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN5, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ6/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN6, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ7/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN7, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ8/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN8, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ9/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN9, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "MATOUT.PURZ10/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN10, "
                StrSql = StrSql + "((CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMSI*100*PREF.CURR/PREF.CONVAREA "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(MATOUT.PURZ1+MATOUT.PURZ2+MATOUT.PURZ3+MATOUT.PURZ4+MATOUT.PURZ5+MATOUT.PURZ6+MATOUT.PURZ7+MATOUT.PURZ8+MATOUT.PURZ9+MATOUT.PURZ10)/RSPL.FINVOLMUNITS*100*PREF.CURR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "0 "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END))PUN11, "
                StrSql = StrSql + "(CASE  WHEN RSPL.FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN RSPL.FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY') AS EFFDATE, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
				StrSql = StrSql + "(CASE WHEN MAT.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M1=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES1, "
                StrSql = StrSql + "(CASE WHEN MAT.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M2=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES2, "
                StrSql = StrSql + "(CASE WHEN MAT.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M3=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES3, "
                StrSql = StrSql + "(CASE WHEN MAT.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M4=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES4, "
                StrSql = StrSql + "(CASE WHEN MAT.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M5=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES5, "
                StrSql = StrSql + "(CASE WHEN MAT.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M6=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES6, "
                StrSql = StrSql + "(CASE WHEN MAT.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M7=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES7, "
                StrSql = StrSql + "(CASE WHEN MAT.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M8=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES8, "
                StrSql = StrSql + "(CASE WHEN MAT.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M9=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES9, "
                StrSql = StrSql + "(CASE WHEN MAT.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT MATDES FROM USERSMATERIAL INNER JOIN MATERIALINPUT MATIN ON MATIN.M10=USERSMATERIAL.MATID AND MATIN.CASEID=USERSMATERIAL.CASEID WHERE  MATIN.CASEID=" + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS MATDES10 "
                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN RESULTSPL RSPL "
                StrSql = StrSql + "ON RSPL.CASEID = MAT.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL TOT "
                StrSql = StrSql + "ON TOT.CASEID=MAT.CASEID "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                StrSql = StrSql + "WHERE MAT.CASEID = " + CaseId.ToString() + ""



                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

           Public Function GetOpreationsOutDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  (DEPT1.PROCDE1||' '||DEPT1.PROCDE2)DEPTS1,  "
                StrSql = StrSql + "(DEPT2.PROCDE1||' '||DEPT2.PROCDE2)DEPTS2, "
                StrSql = StrSql + "(DEPT3.PROCDE1||' '||DEPT3.PROCDE2)DEPTS3, "
                StrSql = StrSql + "(DEPT4.PROCDE1||' '||DEPT4.PROCDE2)DEPTS4, "
                StrSql = StrSql + "(DEPT5.PROCDE1||' '||DEPT5.PROCDE2)DEPTS5, "
                StrSql = StrSql + "(DEPT6.PROCDE1||' '||DEPT6.PROCDE2)DEPTS6, "
                StrSql = StrSql + "(DEPT7.PROCDE1||' '||DEPT7.PROCDE2)DEPTS7, "
                StrSql = StrSql + "(DEPT8.PROCDE1||' '||DEPT8.PROCDE2)DEPTS8, "
                StrSql = StrSql + "(DEPT9.PROCDE1||' '||DEPT9.PROCDE2)DEPTS9, "
                StrSql = StrSql + "(DEPT10.PROCDE1||' '||DEPT10.PROCDE2)DEPTS10, "

                StrSql = StrSql + "(DEPT11.PROCDE1||' '||DEPT11.PROCDE2)DEPTS11, "
                StrSql = StrSql + "(DEPT12.PROCDE1||' '||DEPT12.PROCDE2)DEPTS12, "
                StrSql = StrSql + "(DEPT13.PROCDE1||' '||DEPT13.PROCDE2)DEPTS13, "
                StrSql = StrSql + "(DEPT14.PROCDE1||' '||DEPT14.PROCDE2)DEPTS14, "
                StrSql = StrSql + "(DEPT15.PROCDE1||' '||DEPT15.PROCDE2)DEPTS15, "


                StrSql = StrSql + "(OPDEP.M1*PREF.CONVWT) AS PV1, "
                StrSql = StrSql + "(OPDEP.M2*PREF.CONVWT) AS PV2, "
                StrSql = StrSql + "(OPDEP.M3*PREF.CONVWT) AS PV3, "
                StrSql = StrSql + "(OPDEP.M4*PREF.CONVWT) AS PV4, "
                StrSql = StrSql + "(OPDEP.M5*PREF.CONVWT) AS PV5, "
                StrSql = StrSql + "(OPDEP.M6*PREF.CONVWT) AS PV6, "
                StrSql = StrSql + "(OPDEP.M7*PREF.CONVWT) AS PV7, "
                StrSql = StrSql + "(OPDEP.M8*PREF.CONVWT) AS PV8, "
                StrSql = StrSql + "(OPDEP.M9*PREF.CONVWT) AS PV9, "
                StrSql = StrSql + "(OPDEP.M10*PREF.CONVWT) AS PV10, "

                StrSql = StrSql + "(OPDEP.M11*PREF.CONVWT) AS PV11, "
                StrSql = StrSql + "(OPDEP.M12*PREF.CONVWT) AS PV12, "
                StrSql = StrSql + "(OPDEP.M13*PREF.CONVWT) AS PV13, "
                StrSql = StrSql + "(OPDEP.M14*PREF.CONVWT) AS PV14, "
                StrSql = StrSql + "(OPDEP.M15*PREF.CONVWT) AS PV15, "

                StrSql = StrSql + "(OPDEP.T1*PREF.CONVWT) AS FEQV1, "
                StrSql = StrSql + "(OPDEP.T2*PREF.CONVWT) AS FEQV2, "
                StrSql = StrSql + "(OPDEP.T3*PREF.CONVWT) AS FEQV3, "
                StrSql = StrSql + "(OPDEP.T4*PREF.CONVWT) AS FEQV4, "
                StrSql = StrSql + "(OPDEP.T5*PREF.CONVWT) AS FEQV5, "
                StrSql = StrSql + "(OPDEP.T6*PREF.CONVWT) AS FEQV6, "
                StrSql = StrSql + "(OPDEP.T7*PREF.CONVWT) AS FEQV7, "
                StrSql = StrSql + "(OPDEP.T8*PREF.CONVWT) AS FEQV8, "
                StrSql = StrSql + "(OPDEP.T9*PREF.CONVWT) AS FEQV9, "
                StrSql = StrSql + "(OPDEP.T10*PREF.CONVWT) AS FEQV10, "

                StrSql = StrSql + "(OPDEP.T11*PREF.CONVWT) AS FEQV11, "
                StrSql = StrSql + "(OPDEP.T12*PREF.CONVWT) AS FEQV12, "
                StrSql = StrSql + "(OPDEP.T13*PREF.CONVWT) AS FEQV13, "
                StrSql = StrSql + "(OPDEP.T14*PREF.CONVWT) AS FEQV14, "
                StrSql = StrSql + "(OPDEP.T15*PREF.CONVWT) AS FEQV15, "

                StrSql = StrSql + "(OPDEP.G1*PREF.CONVWT) AS FV1, "
                StrSql = StrSql + "(OPDEP.G2*PREF.CONVWT) AS FV2, "
                StrSql = StrSql + "(OPDEP.G3*PREF.CONVWT) AS FV3, "
                StrSql = StrSql + "(OPDEP.G4*PREF.CONVWT) AS FV4, "
                StrSql = StrSql + "(OPDEP.G5*PREF.CONVWT) AS FV5, "
                StrSql = StrSql + "(OPDEP.G6*PREF.CONVWT) AS FV6, "
                StrSql = StrSql + "(OPDEP.G7*PREF.CONVWT) AS FV7, "
                StrSql = StrSql + "(OPDEP.G8*PREF.CONVWT) AS FV8, "
                StrSql = StrSql + "(OPDEP.G9*PREF.CONVWT) AS FV9, "
                StrSql = StrSql + "(OPDEP.G10*PREF.CONVWT) AS FV10, "

                StrSql = StrSql + "(OPDEP.G11*PREF.CONVWT) AS FV11, "
                StrSql = StrSql + "(OPDEP.G12*PREF.CONVWT) AS FV12, "
                StrSql = StrSql + "(OPDEP.G13*PREF.CONVWT) AS FV13, "
                StrSql = StrSql + "(OPDEP.G14*PREF.CONVWT) AS FV14, "
                StrSql = StrSql + "(OPDEP.G15*PREF.CONVWT) AS FV15, "

                StrSql = StrSql + "(OPDEP.D1) AS AD1, "
                StrSql = StrSql + "(OPDEP.D2) AS AD2, "
                StrSql = StrSql + "(OPDEP.D3) AS AD3, "
                StrSql = StrSql + "(OPDEP.D4) AS AD4, "
                StrSql = StrSql + "(OPDEP.D5) AS AD5, "
                StrSql = StrSql + "(OPDEP.D6) AS AD6, "
                StrSql = StrSql + "(OPDEP.D7) AS AD7, "
                StrSql = StrSql + "(OPDEP.D8) AS AD8, "
                StrSql = StrSql + "(OPDEP.D9) AS AD9, "
                StrSql = StrSql + "(OPDEP.D10) AS AD10, "

                StrSql = StrSql + "(OPDEP.D11) AS AD11, "
                StrSql = StrSql + "(OPDEP.D12) AS AD12, "
                StrSql = StrSql + "(OPDEP.D13) AS AD13, "
                StrSql = StrSql + "(OPDEP.D14) AS AD14, "
                StrSql = StrSql + "(OPDEP.D15) AS AD15, "

                StrSql = StrSql + "(OPDEP.W1) AS AW1, "
                StrSql = StrSql + "(OPDEP.W2) AS AW2, "
                StrSql = StrSql + "(OPDEP.W3) AS AW3, "
                StrSql = StrSql + "(OPDEP.W4) AS AW4, "
                StrSql = StrSql + "(OPDEP.W5) AS AW5, "
                StrSql = StrSql + "(OPDEP.W6) AS AW6, "
                StrSql = StrSql + "(OPDEP.W7) AS AW7, "
                StrSql = StrSql + "(OPDEP.W8) AS AW8, "
                StrSql = StrSql + "(OPDEP.W9) AS AW9, "
                StrSql = StrSql + "(OPDEP.W10) AS AW10, "

                StrSql = StrSql + "(OPDEP.W11) AS AW11, "
                StrSql = StrSql + "(OPDEP.W12) AS AW12, "
                StrSql = StrSql + "(OPDEP.W13) AS AW13, "
                StrSql = StrSql + "(OPDEP.W14) AS AW14, "
                StrSql = StrSql + "(OPDEP.W15) AS AW15, "

                StrSql = StrSql + "(RESULTSPL.VOLUMEDIS*PREF.CONVWT) VOLUMEDIS, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12 ,"
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM PLANTCONFIG DEPT "
                StrSql = StrSql + "INNER JOIN RESULTSPL "
                StrSql = StrSql + "ON RESULTSPL.CASEID = DEPT.CASEID "
                StrSql = StrSql + "INNER JOIN OPDEPVOL OPDEP "
                StrSql = StrSql + "ON OPDEP.CASEID = DEPT.CASEID "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=DEPT.CASEID "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT1 "
                StrSql = StrSql + "ON DEPT1.PROCID = DEPT.M1 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT2 "
                StrSql = StrSql + "ON DEPT2.PROCID = DEPT.M2 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT3 "
                StrSql = StrSql + "ON DEPT3.PROCID = DEPT.M3 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT4 "
                StrSql = StrSql + "ON DEPT4.PROCID = DEPT.M4 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT5 "
                StrSql = StrSql + "ON DEPT5.PROCID = DEPT.M5 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT6 "
                StrSql = StrSql + "ON DEPT6.PROCID = DEPT.M6 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT7 "
                StrSql = StrSql + "ON DEPT7.PROCID = DEPT.M7 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT8 "
                StrSql = StrSql + "ON DEPT8.PROCID = DEPT.M8 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT9 "
                StrSql = StrSql + "ON DEPT9.PROCID = DEPT.M9 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT10 "
                StrSql = StrSql + "ON DEPT10.PROCID = DEPT.M10 "

                StrSql = StrSql + "INNER JOIN PROCESS DEPT11 "
                StrSql = StrSql + "ON DEPT11.PROCID = DEPT.M11 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT12 "
                StrSql = StrSql + "ON DEPT12.PROCID = DEPT.M12 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT13 "
                StrSql = StrSql + "ON DEPT13.PROCID = DEPT.M13 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT14 "
                StrSql = StrSql + "ON DEPT14.PROCID = DEPT.M14 "
                StrSql = StrSql + "INNER JOIN PROCESS DEPT15 "
                StrSql = StrSql + "ON DEPT15.PROCID = DEPT.M15 "

                StrSql = StrSql + "WHERE DEPT.CASEID = " + CaseId.ToString() + ""


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetPersonnelOutDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                ''StrSql = "SELECT   (POS1.PERSDE1 ||' '||  POS1.PERSDE2) AS PERSDES1,  "
                ''StrSql = StrSql + "(POS2.PERSDE1 ||' '||  POS2.PERSDE2) AS PERSDES2, "
                ''StrSql = StrSql + "(POS3.PERSDE1 ||' '||  POS3.PERSDE2) AS PERSDES3, "
                ''StrSql = StrSql + "(POS4.PERSDE1 ||' '||  POS4.PERSDE2) AS PERSDES4, "
                ''StrSql = StrSql + "(POS5.PERSDE1 ||' '||  POS5.PERSDE2) AS PERSDES5, "
                ''StrSql = StrSql + "(POS6.PERSDE1 ||' '||  POS6.PERSDE2) AS PERSDES6, "
                ''StrSql = StrSql + "(POS7.PERSDE1 ||' '||  POS7.PERSDE2) AS PERSDES7, "
                ''StrSql = StrSql + "(POS8.PERSDE1 ||' '||  POS8.PERSDE2) AS PERSDES8, "
                ''StrSql = StrSql + "(POS9.PERSDE1 ||' '||  POS9.PERSDE2) AS PERSDES9, "
                ''StrSql = StrSql + "(POS10.PERSDE1 ||' '||  POS10.PERSDE2) AS PERSDES10, "
                ''StrSql = StrSql + "(POS11.PERSDE1 ||' '||  POS11.PERSDE2) AS PERSDES11, "
                ''StrSql = StrSql + "(POS12.PERSDE1 ||' '||  POS12.PERSDE2) AS PERSDES12, "
                ''StrSql = StrSql + "(POS13.PERSDE1 ||' '||  POS13.PERSDE2) AS PERSDES13, "
                ''StrSql = StrSql + "(POS14.PERSDE1 ||' '||  POS14.PERSDE2) AS PERSDES14, "
                ''StrSql = StrSql + "(POS15.PERSDE1 ||' '||  POS15.PERSDE2) AS PERSDES15, "
                ''StrSql = StrSql + "(POS16.PERSDE1 ||' '||  POS16.PERSDE2) AS PERSDES16, "
                ''StrSql = StrSql + "(POS17.PERSDE1 ||' '||  POS17.PERSDE2) AS PERSDES17, "
                ''StrSql = StrSql + "(POS18.PERSDE1 ||' '||  POS18.PERSDE2) AS PERSDES18, "
                ''StrSql = StrSql + "(POS19.PERSDE1 ||' '||  POS19.PERSDE2) AS PERSDES19, "
                ''StrSql = StrSql + "(POS20.PERSDE1 ||' '||  POS20.PERSDE2) AS PERSDES20, "
                ''StrSql = StrSql + "(POS21.PERSDE1 ||' '||  POS21.PERSDE2) AS PERSDES21, "
                ''StrSql = StrSql + "(POS22.PERSDE1 ||' '||  POS22.PERSDE2) AS PERSDES22, "
                ''StrSql = StrSql + "(POS23.PERSDE1 ||' '||  POS23.PERSDE2) AS PERSDES23, "
                ''StrSql = StrSql + "(POS24.PERSDE1 ||' '||  POS24.PERSDE2) AS PERSDES24, "
                ''StrSql = StrSql + "(POS25.PERSDE1 ||' '||  POS25.PERSDE2) AS PERSDES25, "
                ''StrSql = StrSql + "(POS26.PERSDE1 ||' '||  POS26.PERSDE2) AS PERSDES26, "
                ''StrSql = StrSql + "(POS27.PERSDE1 ||' '||  POS27.PERSDE2) AS PERSDES27, "
                ''StrSql = StrSql + "(POS28.PERSDE1 ||' '||  POS28.PERSDE2) AS PERSDES28, "
                ''StrSql = StrSql + "(POS29.PERSDE1 ||' '||  POS29.PERSDE2) AS PERSDES29, "
                ''StrSql = StrSql + "(POS30.PERSDE1 ||' '||  POS30.PERSDE2) AS PERSDES30, "
                ''StrSql = StrSql + "PNUM.M1  AS N1, "
                ''StrSql = StrSql + "PNUM.M2  AS N2, "
                ''StrSql = StrSql + "PNUM.M3  AS N3, "
                ''StrSql = StrSql + "PNUM.M4  AS N4, "
                ''StrSql = StrSql + "PNUM.M5  AS N5, "
                ''StrSql = StrSql + "PNUM.M6  AS N6, "
                ''StrSql = StrSql + "PNUM.M7  AS N7, "
                ''StrSql = StrSql + "PNUM.M8  AS N8, "
                ''StrSql = StrSql + "PNUM.M9  AS N9, "
                ''StrSql = StrSql + "PNUM.M10  AS N10, "
                ''StrSql = StrSql + "PNUM.M11  AS N11, "
                ''StrSql = StrSql + "PNUM.M12  AS N12, "
                ''StrSql = StrSql + "PNUM.M13  AS N13, "
                ''StrSql = StrSql + "PNUM.M14  AS N14, "
                ''StrSql = StrSql + "PNUM.M15  AS N15, "
                ''StrSql = StrSql + "PNUM.M16  AS N16, "
                ''StrSql = StrSql + "PNUM.M17  AS N17, "
                ''StrSql = StrSql + "PNUM.M18  AS N18, "
                ''StrSql = StrSql + "PNUM.M19  AS N19, "
                ''StrSql = StrSql + "PNUM.M20  AS N20, "
                ''StrSql = StrSql + "PNUM.M21  AS N21, "
                ''StrSql = StrSql + "PNUM.M22  AS N22, "
                ''StrSql = StrSql + "PNUM.M23  AS N23, "
                ''StrSql = StrSql + "PNUM.M24  AS N24, "
                ''StrSql = StrSql + "PNUM.M25  AS N25, "
                ''StrSql = StrSql + "PNUM.M26  AS N26, "
                ''StrSql = StrSql + "PNUM.M27  AS N27, "
                ''StrSql = StrSql + "PNUM.M28  AS N28, "
                ''StrSql = StrSql + "PNUM.M29  AS N29, "
                ''StrSql = StrSql + "PNUM.M30  AS N30, "
                ''StrSql = StrSql + "(PNUM.M1+PNUM.M2+PNUM.M3+PNUM.M4+PNUM.M5+PNUM.M6+PNUM.M7+PNUM.M8+PNUM.M9+PNUM.M10+PNUM.M11+PNUM.M12+PNUM.M13+PNUM.M14+PNUM.M15+PNUM.M16+PNUM.M17+PNUM.M18+PNUM.M19+PNUM.M20+PNUM.M21+PNUM.M22+PNUM.M23+PNUM.M24+PNUM.M25+PNUM.M26+PNUM.M27+PNUM.M28+PNUM.M29+PNUM.M30)N31, "
                ''StrSql = StrSql + "(PAY.M1*PREF.CURR) AS P1, "
                ''StrSql = StrSql + "(PAY.M2*PREF.CURR) AS P2, "
                ''StrSql = StrSql + "(PAY.M3*PREF.CURR) AS P3, "
                ''StrSql = StrSql + "(PAY.M4*PREF.CURR) AS P4, "
                ''StrSql = StrSql + "(PAY.M5*PREF.CURR) AS P5, "
                ''StrSql = StrSql + "(PAY.M6*PREF.CURR) AS P6, "
                ''StrSql = StrSql + "(PAY.M7*PREF.CURR) AS P7, "
                ''StrSql = StrSql + "(PAY.M8*PREF.CURR) AS P8, "
                ''StrSql = StrSql + "(PAY.M9*PREF.CURR) AS P9, "
                ''StrSql = StrSql + "(PAY.M10*PREF.CURR) AS P10, "
                ''StrSql = StrSql + "(PAY.M11*PREF.CURR) AS P11, "
                ''StrSql = StrSql + "(PAY.M12*PREF.CURR) AS P12, "
                ''StrSql = StrSql + "(PAY.M13*PREF.CURR) AS P13, "
                ''StrSql = StrSql + "(PAY.M14*PREF.CURR) AS P14, "
                ''StrSql = StrSql + "(PAY.M15*PREF.CURR) AS P15, "
                ''StrSql = StrSql + "(PAY.M16*PREF.CURR) AS P16, "
                ''StrSql = StrSql + "(PAY.M17*PREF.CURR) AS P17, "
                ''StrSql = StrSql + "(PAY.M18*PREF.CURR) AS P18, "
                ''StrSql = StrSql + "(PAY.M19*PREF.CURR) AS P19, "
                ''StrSql = StrSql + "(PAY.M20*PREF.CURR) AS P20, "
                ''StrSql = StrSql + "(PAY.M21*PREF.CURR) AS P21, "
                ''StrSql = StrSql + "(PAY.M22*PREF.CURR) AS P22, "
                ''StrSql = StrSql + "(PAY.M23*PREF.CURR) AS P23, "
                ''StrSql = StrSql + "(PAY.M24*PREF.CURR) AS P24, "
                ''StrSql = StrSql + "(PAY.M25*PREF.CURR) AS P25, "
                ''StrSql = StrSql + "(PAY.M26*PREF.CURR) AS P26, "
                ''StrSql = StrSql + "(PAY.M27*PREF.CURR) AS P27, "
                ''StrSql = StrSql + "(PAY.M28*PREF.CURR) AS P28, "
                ''StrSql = StrSql + "(PAY.M29*PREF.CURR) AS P29, "
                ''StrSql = StrSql + "(PAY.M30*PREF.CURR) AS P30, "
                ''StrSql = StrSql + "((PAY.M1+PAY.M2+PAY.M3+PAY.M4+PAY.M5+PAY.M6+PAY.M7+PAY.M8+PAY.M9+PAY.M10+PAY.M11+PAY.M12+PAY.M13+PAY.M14+PAY.M15+PAY.M16+PAY.M17+PAY.M18+PAY.M19+PAY.M20+PAY.M21+PAY.M22+PAY.M23+PAY.M24+PAY.M25+PAY.M26+PAY.M27+PAY.M28+PAY.M29+PAY.M30)*PREF.CURR)P31, "
                ''StrSql = StrSql + "PREF.TITLE1, "
                ''StrSql = StrSql + "PREF.TITLE3, "
                ''StrSql = StrSql + "PREF.TITLE2, "
                ''StrSql = StrSql + "PREF.TITLE4, "
                ''StrSql = StrSql + "PREF.TITLE5, "
                ''StrSql = StrSql + "PREF.TITLE6, "
                ''StrSql = StrSql + "PREF.TITLE7, "
                ''StrSql = StrSql + "PREF.TITLE8, "
                ''StrSql = StrSql + "PREF.TITLE9, "
                ''StrSql = StrSql + "PREF.TITLE10, "
                ''StrSql = StrSql + "PREF.TITLE11, "
                ''StrSql = StrSql + "PREF.TITLE12, "
                ''StrSql = StrSql + "PREF.UNITS "
                ''StrSql = StrSql + "FROM PERSONNELPOS POS "
                ''StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                ''StrSql = StrSql + "ON PREF.CASEID = POS.CASEID "
                ''StrSql = StrSql + "INNER JOIN PERSONNELNUM PNUM "
                ''StrSql = StrSql + "ON PNUM.CASEID = POS.CASEID "
                ''StrSql = StrSql + "INNER JOIN PersonnelPAY PAY "
                ''StrSql = StrSql + "ON PAY.CASEID = POS.CASEID "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS1 "
                ''StrSql = StrSql + "ON POS1.PERSID=POS.M1 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS2 "
                ''StrSql = StrSql + "ON POS2.PERSID=POS.M2 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS3 "
                ''StrSql = StrSql + "ON POS3.PERSID=POS.M3 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS4 "
                ''StrSql = StrSql + "ON POS4.PERSID=POS.M4 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS5 "
                ''StrSql = StrSql + "ON POS5.PERSID=POS.M5 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS6 "
                ''StrSql = StrSql + "ON POS6.PERSID=POS.M6 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS7 "
                ''StrSql = StrSql + "ON POS7.PERSID=POS.M7 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS8 "
                ''StrSql = StrSql + "ON POS8.PERSID=POS.M8 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS9 "
                ''StrSql = StrSql + "ON POS9.PERSID=POS.M9 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS10 "
                ''StrSql = StrSql + "ON POS10.PERSID=POS.M10 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS11 "
                ''StrSql = StrSql + "ON POS11.PERSID=POS.M11 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS12 "
                ''StrSql = StrSql + "ON POS12.PERSID=POS.M12 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS13 "
                ''StrSql = StrSql + "ON POS13.PERSID=POS.M13 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS14 "
                ''StrSql = StrSql + "ON POS14.PERSID=POS.M14 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS15 "
                ''StrSql = StrSql + "ON POS15.PERSID=POS.M15 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS16 "
                ''StrSql = StrSql + "ON POS16.PERSID=POS.M16 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS17 "
                ''StrSql = StrSql + "ON POS17.PERSID=POS.M17 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS18 "
                ''StrSql = StrSql + "ON POS18.PERSID=POS.M18 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS19 "
                ''StrSql = StrSql + "ON POS19.PERSID=POS.M19 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS20 "
                ''StrSql = StrSql + "ON POS20.PERSID=POS.M20 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS21 "
                ''StrSql = StrSql + "ON POS21.PERSID=POS.M21 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS22 "
                ''StrSql = StrSql + "ON POS22.PERSID=POS.M22 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS23 "
                ''StrSql = StrSql + "ON POS23.PERSID=POS.M23 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS24 "
                ''StrSql = StrSql + "ON POS24.PERSID=POS.M24 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS25 "
                ''StrSql = StrSql + "ON POS25.PERSID=POS.M25 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS26 "
                ''StrSql = StrSql + "ON POS26.PERSID=POS.M26 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS27 "
                ''StrSql = StrSql + "ON POS27.PERSID=POS.M27 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS28 "
                ''StrSql = StrSql + "ON POS28.PERSID=POS.M28 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS29 "
                ''StrSql = StrSql + "ON POS29.PERSID=POS.M29 "
                ''StrSql = StrSql + "INNER JOIN PERSONNEL  POS30 "
                ''StrSql = StrSql + "ON POS30.PERSID=POS.M30 "
                ''StrSql = StrSql + "WHERE POS.CASEID =" + CaseId.ToString() + ""
                ''Dts = odbUtil.FillDataSet(StrSql, EconConnection)

                StrSql = "SELECT  "
                StrSql = StrSql + "PERSDES1,PERSDES2,PERSDES3,PERSDES4,PERSDES5,PERSDES6,PERSDES7,PERSDES8,PERSDES9,PERSDES10, "
                StrSql = StrSql + "PERSDES11,PERSDES12,PERSDES13,PERSDES14,PERSDES15,PERSDES16,PERSDES17,PERSDES18,PERSDES19,PERSDES20, "
                StrSql = StrSql + "PERSDES21,PERSDES22,PERSDES23,PERSDES24,PERSDES25,PERSDES26,PERSDES27,PERSDES28,PERSDES29,PERSDES30, "
                StrSql = StrSql + "N1,N2,N3,N4,N5,N6,N7,N8,N9,N10, "
                StrSql = StrSql + "N11,N12,N13,N14,N15,N16,N17,N18,N19,N20, "
                StrSql = StrSql + "N21,N22,N23,N24,N25,N26,N27,N28,N29,N30, "
                StrSql = StrSql + "(N1+N2+N3+N4+N5+N6+N7+N8+N9+N10+N11+N12+N13+N14+N15+N16+N17+N18+N19+N20+N21+N22+N23+N24+N25+N26+N27+N28+N29+N30)N31, "
                StrSql = StrSql + "P1,P2,P3,P4,P5,P6,P7,P8,P9,P10, "
                StrSql = StrSql + "P11,P12,P13,P14,P15,P16,P17,P18,P19,P20, "
                StrSql = StrSql + "P21,P22,P23,P24,P25,P26,P27,P28,P29,P30,P31, "
                StrSql = StrSql + "TITLE1,TITLE3,TITLE2,TITLE4,TITLE5, "
                StrSql = StrSql + "TITLE6,TITLE7,TITLE8,TITLE9,TITLE10, "
                StrSql = StrSql + "TITLE11,TITLE12,UNITS "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT "
                StrSql = StrSql + "(POS1.PERSDE1 ||' '||  POS1.PERSDE2) AS PERSDES1, "
                StrSql = StrSql + "(POS2.PERSDE1 ||' '||  POS2.PERSDE2) AS PERSDES2, "
                StrSql = StrSql + "(POS3.PERSDE1 ||' '||  POS3.PERSDE2) AS PERSDES3, "
                StrSql = StrSql + "(POS4.PERSDE1 ||' '||  POS4.PERSDE2) AS PERSDES4, "
                StrSql = StrSql + "(POS5.PERSDE1 ||' '||  POS5.PERSDE2) AS PERSDES5, "
                StrSql = StrSql + "(POS6.PERSDE1 ||' '||  POS6.PERSDE2) AS PERSDES6, "
                StrSql = StrSql + "(POS7.PERSDE1 ||' '||  POS7.PERSDE2) AS PERSDES7, "
                StrSql = StrSql + "(POS8.PERSDE1 ||' '||  POS8.PERSDE2) AS PERSDES8, "
                StrSql = StrSql + "(POS9.PERSDE1 ||' '||  POS9.PERSDE2) AS PERSDES9, "
                StrSql = StrSql + "(POS10.PERSDE1 ||' '||  POS10.PERSDE2) AS PERSDES10, "
                StrSql = StrSql + "(POS11.PERSDE1 ||' '||  POS11.PERSDE2) AS PERSDES11, "
                StrSql = StrSql + "(POS12.PERSDE1 ||' '||  POS12.PERSDE2) AS PERSDES12, "
                StrSql = StrSql + "(POS13.PERSDE1 ||' '||  POS13.PERSDE2) AS PERSDES13, "
                StrSql = StrSql + "(POS14.PERSDE1 ||' '||  POS14.PERSDE2) AS PERSDES14, "
                StrSql = StrSql + "(POS15.PERSDE1 ||' '||  POS15.PERSDE2) AS PERSDES15, "
                StrSql = StrSql + "(POS16.PERSDE1 ||' '||  POS16.PERSDE2) AS PERSDES16, "
                StrSql = StrSql + "(POS17.PERSDE1 ||' '||  POS17.PERSDE2) AS PERSDES17, "
                StrSql = StrSql + "(POS18.PERSDE1 ||' '||  POS18.PERSDE2) AS PERSDES18, "
                StrSql = StrSql + "(POS19.PERSDE1 ||' '||  POS19.PERSDE2) AS PERSDES19, "
                StrSql = StrSql + "(POS20.PERSDE1 ||' '||  POS20.PERSDE2) AS PERSDES20, "
                StrSql = StrSql + "(POS21.PERSDE1 ||' '||  POS21.PERSDE2) AS PERSDES21, "
                StrSql = StrSql + "(POS22.PERSDE1 ||' '||  POS22.PERSDE2) AS PERSDES22, "
                StrSql = StrSql + "(POS23.PERSDE1 ||' '||  POS23.PERSDE2) AS PERSDES23, "
                StrSql = StrSql + "(POS24.PERSDE1 ||' '||  POS24.PERSDE2) AS PERSDES24, "
                StrSql = StrSql + "(POS25.PERSDE1 ||' '||  POS25.PERSDE2) AS PERSDES25, "
                StrSql = StrSql + "(POS26.PERSDE1 ||' '||  POS26.PERSDE2) AS PERSDES26, "
                StrSql = StrSql + "(POS27.PERSDE1 ||' '||  POS27.PERSDE2) AS PERSDES27, "
                StrSql = StrSql + "(POS28.PERSDE1 ||' '||  POS28.PERSDE2) AS PERSDES28, "
                StrSql = StrSql + "(POS29.PERSDE1 ||' '||  POS29.PERSDE2) AS PERSDES29, "
                StrSql = StrSql + "(POS30.PERSDE1 ||' '||  POS30.PERSDE2) AS PERSDES30, "
                StrSql = StrSql + "CASE WHEN POS.M1>0 THEN PNUM.M1 ELSE 0 END AS N1, "
                StrSql = StrSql + "CASE WHEN POS.M2>0 THEN PNUM.M2 ELSE 0 END AS N2, "
                StrSql = StrSql + "CASE WHEN POS.M3>0 THEN PNUM.M3 ELSE 0 END AS N3, "
                StrSql = StrSql + "CASE WHEN POS.M4>0 THEN PNUM.M4 ELSE 0 END AS N4, "
                StrSql = StrSql + "CASE WHEN POS.M5>0 THEN PNUM.M5 ELSE 0 END AS N5, "
                StrSql = StrSql + "CASE WHEN POS.M6>0 THEN PNUM.M6 ELSE 0 END AS N6, "
                StrSql = StrSql + "CASE WHEN POS.M7>0 THEN PNUM.M7 ELSE 0 END AS N7, "
                StrSql = StrSql + "CASE WHEN POS.M8>0 THEN PNUM.M8 ELSE 0 END AS N8, "
                StrSql = StrSql + "CASE WHEN POS.M9>0 THEN PNUM.M9 ELSE 0 END AS N9, "
                StrSql = StrSql + "CASE WHEN POS.M10>0 THEN PNUM.M10 ELSE 0 END AS N10, "
                StrSql = StrSql + "CASE WHEN POS.M11>0 THEN PNUM.M11 ELSE 0 END AS N11, "
                StrSql = StrSql + "CASE WHEN POS.M12>0 THEN PNUM.M12 ELSE 0 END AS N12, "
                StrSql = StrSql + "CASE WHEN POS.M13>0 THEN PNUM.M13 ELSE 0 END AS N13, "
                StrSql = StrSql + "CASE WHEN POS.M14>0 THEN PNUM.M14 ELSE 0 END AS N14, "
                StrSql = StrSql + "CASE WHEN POS.M15>0 THEN PNUM.M15 ELSE 0 END AS N15, "
                StrSql = StrSql + "CASE WHEN POS.M16>0 THEN PNUM.M16 ELSE 0 END AS N16, "
                StrSql = StrSql + "CASE WHEN POS.M17>0 THEN PNUM.M17 ELSE 0 END AS N17, "
                StrSql = StrSql + "CASE WHEN POS.M18>0 THEN PNUM.M18 ELSE 0 END AS N18, "
                StrSql = StrSql + "CASE WHEN POS.M19>0 THEN PNUM.M19 ELSE 0 END AS N19, "
                StrSql = StrSql + "CASE WHEN POS.M20>0 THEN PNUM.M20 ELSE 0 END AS N20, "
                StrSql = StrSql + "CASE WHEN POS.M21>0 THEN PNUM.M21 ELSE 0 END AS N21, "
                StrSql = StrSql + "CASE WHEN POS.M22>0 THEN PNUM.M22 ELSE 0 END AS N22, "
                StrSql = StrSql + "CASE WHEN POS.M23>0 THEN PNUM.M23 ELSE 0 END AS N23, "
                StrSql = StrSql + "CASE WHEN POS.M24>0 THEN PNUM.M24 ELSE 0 END AS N24, "
                StrSql = StrSql + "CASE WHEN POS.M25>0 THEN PNUM.M25 ELSE 0 END AS N25, "
                StrSql = StrSql + "CASE WHEN POS.M26>0 THEN PNUM.M26 ELSE 0 END AS N26, "
                StrSql = StrSql + "CASE WHEN POS.M27>0 THEN PNUM.M27 ELSE 0 END AS N27, "
                StrSql = StrSql + "CASE WHEN POS.M28>0 THEN PNUM.M28 ELSE 0 END AS N28, "
                StrSql = StrSql + "CASE WHEN POS.M29>0 THEN PNUM.M29 ELSE 0 END AS N29, "
                StrSql = StrSql + "CASE WHEN POS.M30>0 THEN PNUM.M30 ELSE 0 END AS N30, "
                StrSql = StrSql + "(PAY.M1*PREF.CURR) AS P1, "
                StrSql = StrSql + "(PAY.M2*PREF.CURR) AS P2, "
                StrSql = StrSql + "(PAY.M3*PREF.CURR) AS P3, "
                StrSql = StrSql + "(PAY.M4*PREF.CURR) AS P4, "
                StrSql = StrSql + "(PAY.M5*PREF.CURR) AS P5, "
                StrSql = StrSql + "(PAY.M6*PREF.CURR) AS P6, "
                StrSql = StrSql + "(PAY.M7*PREF.CURR) AS P7, "
                StrSql = StrSql + "(PAY.M8*PREF.CURR) AS P8, "
                StrSql = StrSql + "(PAY.M9*PREF.CURR) AS P9, "
                StrSql = StrSql + "(PAY.M10*PREF.CURR) AS P10, "
                StrSql = StrSql + "(PAY.M11*PREF.CURR) AS P11, "
                StrSql = StrSql + "(PAY.M12*PREF.CURR) AS P12, "
                StrSql = StrSql + "(PAY.M13*PREF.CURR) AS P13, "
                StrSql = StrSql + "(PAY.M14*PREF.CURR) AS P14, "
                StrSql = StrSql + "(PAY.M15*PREF.CURR) AS P15, "
                StrSql = StrSql + "(PAY.M16*PREF.CURR) AS P16, "
                StrSql = StrSql + "(PAY.M17*PREF.CURR) AS P17, "
                StrSql = StrSql + "(PAY.M18*PREF.CURR) AS P18, "
                StrSql = StrSql + "(PAY.M19*PREF.CURR) AS P19, "
                StrSql = StrSql + "(PAY.M20*PREF.CURR) AS P20, "
                StrSql = StrSql + "(PAY.M21*PREF.CURR) AS P21, "
                StrSql = StrSql + "(PAY.M22*PREF.CURR) AS P22, "
                StrSql = StrSql + "(PAY.M23*PREF.CURR) AS P23, "
                StrSql = StrSql + "(PAY.M24*PREF.CURR) AS P24, "
                StrSql = StrSql + "(PAY.M25*PREF.CURR) AS P25, "
                StrSql = StrSql + "(PAY.M26*PREF.CURR) AS P26, "
                StrSql = StrSql + "(PAY.M27*PREF.CURR) AS P27, "
                StrSql = StrSql + "(PAY.M28*PREF.CURR) AS P28, "
                StrSql = StrSql + "(PAY.M29*PREF.CURR) AS P29, "
                StrSql = StrSql + "(PAY.M30*PREF.CURR) AS P30, "
                StrSql = StrSql + "((PAY.M1+PAY.M2+PAY.M3+PAY.M4+PAY.M5+PAY.M6+PAY.M7+PAY.M8+PAY.M9+PAY.M10+PAY.M11+PAY.M12+PAY.M13+PAY.M14+PAY.M15+PAY.M16+PAY.M17+PAY.M18+PAY.M19+PAY.M20+PAY.M21+PAY.M22+PAY.M23+PAY.M24+PAY.M25+PAY.M26+PAY.M27+PAY.M28+PAY.M29+PAY.M30)*PREF.CURR)P31, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM PERSONNELPOS POS "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID = POS.CASEID "
                StrSql = StrSql + "INNER JOIN PERSONNELNUM PNUM "
                StrSql = StrSql + "ON PNUM.CASEID = POS.CASEID "
                StrSql = StrSql + "INNER JOIN PersonnelPAY PAY "
                StrSql = StrSql + "ON PAY.CASEID = POS.CASEID "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS1 "
                StrSql = StrSql + "ON POS1.PERSID=POS.M1 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS2 "
                StrSql = StrSql + "ON POS2.PERSID=POS.M2 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS3 "
                StrSql = StrSql + "ON POS3.PERSID=POS.M3 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS4 "
                StrSql = StrSql + "ON POS4.PERSID=POS.M4 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS5 "
                StrSql = StrSql + "ON POS5.PERSID=POS.M5 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS6 "
                StrSql = StrSql + "ON POS6.PERSID=POS.M6 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS7 "
                StrSql = StrSql + "ON POS7.PERSID=POS.M7 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS8 "
                StrSql = StrSql + "ON POS8.PERSID=POS.M8 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS9 "
                StrSql = StrSql + "ON POS9.PERSID=POS.M9 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS10 "
                StrSql = StrSql + "ON POS10.PERSID=POS.M10 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS11 "
                StrSql = StrSql + "ON POS11.PERSID=POS.M11 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS12 "
                StrSql = StrSql + "ON POS12.PERSID=POS.M12 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS13 "
                StrSql = StrSql + "ON POS13.PERSID=POS.M13 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS14 "
                StrSql = StrSql + "ON POS14.PERSID=POS.M14 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS15 "
                StrSql = StrSql + "ON POS15.PERSID=POS.M15 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS16 "
                StrSql = StrSql + "ON POS16.PERSID=POS.M16 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS17 "
                StrSql = StrSql + "ON POS17.PERSID=POS.M17 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS18 "
                StrSql = StrSql + "ON POS18.PERSID=POS.M18 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS19 "
                StrSql = StrSql + "ON POS19.PERSID=POS.M19 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS20 "
                StrSql = StrSql + "ON POS20.PERSID=POS.M20 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS21 "
                StrSql = StrSql + "ON POS21.PERSID=POS.M21 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS22 "
                StrSql = StrSql + "ON POS22.PERSID=POS.M22 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS23 "
                StrSql = StrSql + "ON POS23.PERSID=POS.M23 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS24 "
                StrSql = StrSql + "ON POS24.PERSID=POS.M24 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS25 "
                StrSql = StrSql + "ON POS25.PERSID=POS.M25 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS26 "
                StrSql = StrSql + "ON POS26.PERSID=POS.M26 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS27 "
                StrSql = StrSql + "ON POS27.PERSID=POS.M27 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS28 "
                StrSql = StrSql + "ON POS28.PERSID=POS.M28 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS29 "
                StrSql = StrSql + "ON POS29.PERSID=POS.M29 "
                StrSql = StrSql + "INNER JOIN PERSONNEL  POS30 "
                StrSql = StrSql + "ON POS30.PERSID=POS.M30 "
                StrSql = StrSql + "WHERE POS.CASEID =" + CaseId.ToString() + " )  DUAL"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Results"
        Public Function GetProfitAndLossDetailsOLD(ByVal CaseId As String, ByVal Isdep As Boolean) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim Pm As String = String.Empty
            Dim Revenue As String = String.Empty
            Dim Vm As String = String.Empty
            Try

                If Isdep Then
                    Pm = "PMDEP"
                    Revenue = "REVENUEDEP"
                    Vm = "VMDEP"
                Else
                    Pm = "PM"
                    Revenue = "REVENUE"
                    Vm = "VM"
                End If



                StrSql = "SELECT  "
                StrSql = StrSql + "'Revenue' AS PDES1, "
                StrSql = StrSql + "'Materials' AS PDES2, "
                StrSql = StrSql + "'Labor' AS PDES3, "
                StrSql = StrSql + "'Energy' AS PDES4, "
                StrSql = StrSql + "'Distribution Packaging' AS PDES5, "
                StrSql = StrSql + "'Shipping to Customer' AS PDES6, "
                StrSql = StrSql + "'Variable Margin' AS PDES7, "
                StrSql = StrSql + "'Office Supplies' AS PDES8, "
                StrSql = StrSql + "'Labor' AS PDES9, "
                StrSql = StrSql + "'Energy' AS PDES10, "
                StrSql = StrSql + "'Lease Cost' AS PDES11, "
                StrSql = StrSql + "'Insurance' AS PDES12, "
                StrSql = StrSql + "'Utilities' AS PDES13, "
                StrSql = StrSql + "'Communications' AS PDES14, "
                StrSql = StrSql + "'Travel' AS PDES15, "
                StrSql = StrSql + "'Maintenance Supplies' AS PDES16, "
                StrSql = StrSql + "'Minor Equipment' AS PDES17, "
                StrSql = StrSql + "'Outside Services'  AS PDES18, "
                StrSql = StrSql + "'Professional Services' AS PDES19, "
                StrSql = StrSql + "'Laboratory Supplies' AS PDES20, "
                StrSql = StrSql + "'Ink Supplies' AS PDES21, "
                StrSql = StrSql + "'Plate Supplies' AS PDES22, "
                StrSql = StrSql + "'Metal Supplies' AS PDES23, "
                StrSql = StrSql + "'Depreciation' AS PDES24, "
                StrSql = StrSql + "'Plant Margin' AS PDES25, "
                StrSql = StrSql + "" + Revenue + " AS PL1, "
                StrSql = StrSql + "VMATERIAL AS PL2, "
                StrSql = StrSql + "VLABOR AS PL3, "
                StrSql = StrSql + "VENERGY AS PL4, "
                StrSql = StrSql + "VPACK AS PL5, "
                StrSql = StrSql + "VSHIP AS PL6, "
                StrSql = StrSql + "" + Vm + " AS PL7, "
                StrSql = StrSql + "OFFICESUPPLIES AS PL8, "
                StrSql = StrSql + "PLABOR AS PL9, "
                StrSql = StrSql + "PENERGY AS PL10, "
                StrSql = StrSql + "LEASECOST AS PL11, "
                StrSql = StrSql + "INSURANCE AS PL12, "
                StrSql = StrSql + "UTILITIES AS PL13, "
                StrSql = StrSql + "COMMUN AS PL14, "
                StrSql = StrSql + "TRAVEL AS PL15, "
                StrSql = StrSql + "MAINT AS PL16, "
                StrSql = StrSql + "MINOR AS PL17, "
                StrSql = StrSql + "OUT  AS PL18, "
                StrSql = StrSql + "PROF AS PL19, "
                StrSql = StrSql + "LAB AS PL20, "
                StrSql = StrSql + "INKSUP AS PL21, "
                StrSql = StrSql + "PLATESUP AS PL22, "
                StrSql = StrSql + "METSUP AS PL23, "
                StrSql = StrSql + "DEP.DEPRECIATION AS PL24, "
                StrSql = StrSql + "" + Pm + " AS PL25, "
                StrSql = StrSql + "FINVOLMSI,"
                StrSql = StrSql + "FINVOLMUNITS,"
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "'units' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)SUNITLBL, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(100*PREF.CURR)/FINVOLMUNITS "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "

 'start
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE2||'/'||PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + " PREF.TITLE2||'/1000 unit'"
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN1, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((Pref.CURR/PREF.CONVAREA)/(FINVOLMSI)) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(Pref.CURR/(FINVOLMUNITS/1000)) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT1, "
                'end

                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI*PREF.CONVAREA)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL, "
                StrSql = StrSql + "(VOLUME*PREF.CONVWT) SVOLUME, "
                StrSql = StrSql + "(CUST.M1*PREF.CURR/PREF.CONVWT) AS UNITPS, "
                StrSql = StrSql + "(UNITPRICE*PREF.CURR/PREF.CONVWT) AS UNITPP, "
                StrSql = StrSql + "UNITPRICE2 AS UNITPP2,"
                StrSql = StrSql + "UNITTYPE, "
                StrSql = StrSql + "PREF.CURR, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " CASE WHEN CUSSALESUNIT=0 THEN RESULTSPL.CUSSALESVOLUME*PREF.CONVWT "
                StrSql = StrSql + " ELSE (CASE  WHEN FINVOLMSI > 1 THEN (RESULTSPL.CUSSALESVOLUME*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN RESULTSPL.CUSSALESVOLUME END END)"
                StrSql = StrSql + " END AS CUSSALESVOLUME, "
                StrSql = StrSql + " CUSSALESUNIT, "
                StrSql = StrSql + " CUSSALESVOLUME CUSSALESVOLUME1 "

                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN CUSTOMERIN CUST "
                StrSql = StrSql + "ON CUST.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEP "
                StrSql = StrSql + "ON DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ") "




                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetCostDetailsOLD(ByVal CaseId As String, ByVal Isdep As Boolean) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim fCost As String = String.Empty
            Dim tCost As String = String.Empty
            Try

                If Isdep Then
                    fCost = "FIXEDCOSTDEP"
                    tCost = "TOTALCOSTDEP"
                Else
                    fCost = "FIXEDCOST"
                    tCost = "TOTALCOST"
                End If



                StrSql = "SELECT  "
                StrSql = StrSql + "'Material Cost' AS PDES1, "
                StrSql = StrSql + "'Labor Cost' AS PDES2, "
                StrSql = StrSql + "'Energy Cost' AS PDES3, "
                StrSql = StrSql + "'Distribution Packaging Cost' AS PDES4, "
                StrSql = StrSql + "'Shipping Cost' AS PDES5, "
                StrSql = StrSql + "'Total Variable Cost' AS PDES6, "
                StrSql = StrSql + "'Office Supplies Cost' AS PDES7, "
                StrSql = StrSql + "'Labor Cost' AS PDES8, "
                StrSql = StrSql + "'Energy Cost' AS PDES9, "
                StrSql = StrSql + "'Lease Cost' AS PDES10, "
                StrSql = StrSql + "'Insurance Cost' AS PDES11, "
                StrSql = StrSql + "'Utilities Cost' AS PDES12, "
                StrSql = StrSql + "'Communications Cost' AS PDES13, "
                StrSql = StrSql + "'Travel Cost' AS PDES14, "
                StrSql = StrSql + "'Maintenance Supplies Cost' AS PDES15, "
                StrSql = StrSql + "'Minor Equipment Cost' AS PDES16, "
                StrSql = StrSql + "'Outside Services Cost' AS PDES17, "
                StrSql = StrSql + "'Professional Services Cost'  AS PDES18, "
                StrSql = StrSql + "'Laboratory Supplies Cost' AS PDES19, "
                StrSql = StrSql + "'Ink Supplies Cost' AS PDES20, "
                StrSql = StrSql + "'Plate Supplies Cost' AS PDES21, "
                StrSql = StrSql + "'Metal Supplies Cost' AS PDES22, "
                StrSql = StrSql + "'Depreciation' AS PDES23, "
                StrSql = StrSql + "'Total Fixed Cost' AS PDES24, "
                StrSql = StrSql + "'Total Cost' AS PDES25, "
                StrSql = StrSql + "VMATERIAL AS PL1, "
                StrSql = StrSql + "VLABOR AS PL2, "
                StrSql = StrSql + "VENERGY AS PL3, "
                StrSql = StrSql + "VPACK AS PL4, "
                StrSql = StrSql + "VSHIP AS PL5, "
                StrSql = StrSql + "VARIABLECOST AS PL6, "
                StrSql = StrSql + "OFFICESUPPLIES AS PL7, "
                StrSql = StrSql + "PLABOR AS PL8, "
                StrSql = StrSql + "PENERGY AS PL9, "
                StrSql = StrSql + "LEASECOST AS PL10, "
                StrSql = StrSql + "INSURANCE AS PL11, "
                StrSql = StrSql + "UTILITIES AS PL12, "
                StrSql = StrSql + "COMMUN AS PL13, "
                StrSql = StrSql + "TRAVEL AS PL14, "
                StrSql = StrSql + "MAINT AS PL15, "
                StrSql = StrSql + "MINOR AS PL16, "
                StrSql = StrSql + "OUT  AS PL17, "
                StrSql = StrSql + "PROF AS PL18, "
                StrSql = StrSql + "LAB AS PL19, "
                StrSql = StrSql + "INKSUP AS PL20, "
                StrSql = StrSql + "PLATESUP AS PL21, "
                StrSql = StrSql + "METSUP AS PL22, "
                StrSql = StrSql + "DEP.DEPRECIATION AS PL23, "
                StrSql = StrSql + "" + fCost + " AS PL24, "
                StrSql = StrSql + "" + tCost + " AS PL25, "
                StrSql = StrSql + "FINVOLMSI,"
                StrSql = StrSql + "FINVOLMUNITS,"
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per '||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "PREF.TITLE6||' per unit ' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN, "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "'units' "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)SUNITLBL, "
                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR)/FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "

 'start
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "PREF.TITLE2||'/'||	PREF.TITLE3 "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + " PREF.TITLE2||'/1000 unit'"
                StrSql = StrSql + "END "
                StrSql = StrSql + "END)PUN1, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((Pref.CURR/PREF.CONVAREA)/(FINVOLMSI)) "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(Pref.CURR/(FINVOLMUNITS/1000)) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT1, "
                'end


                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI*PREF.CONVAREA)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL, "
                StrSql = StrSql + "(VOLUME*PREF.CONVWT) SVOLUME, "
                StrSql = StrSql + "PREF.CURR, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "RESULTSPL.CASEID, "
                StrSql = StrSql + " CASE WHEN CUSSALESUNIT=0 THEN RESULTSPL.CUSSALESVOLUME*PREF.CONVWT "
                StrSql = StrSql + " ELSE (CASE  WHEN FINVOLMSI > 1 THEN (RESULTSPL.CUSSALESVOLUME*PREF.CONVAREA) ELSE CASE WHEN FINVOLMUNITS > 1 THEN RESULTSPL.CUSSALESVOLUME END END)"
                StrSql = StrSql + " END AS CUSSALESVOLUME, "
                StrSql = StrSql + " CUSSALESVOLUME CUSSALESVOLUME1, "
                StrSql = StrSql + " CUSSALESUNIT "
                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEP "
                StrSql = StrSql + "ON DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ")"




                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPalletInDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

	Public Function GetBulkCostDetails(ByVal CaseId As String, ByVal Isdep As Boolean) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim fCost As String = String.Empty
            Dim tCost As String = String.Empty
            Try

                StrSql = "Select "
                StrSql = StrSql + "VMATERIAL AS PL1,"
                StrSql = StrSql + "VLABOR As PL2, "
                StrSql = StrSql + "VENERGY AS PL3,"
                StrSql = StrSql + "VPACK As PL6, "
                StrSql = StrSql + "VSHIP AS PL7,"
                StrSql = StrSql + "FIXEDCOST As PL4, "
                StrSql = StrSql + "DEP.DEPRECIATION AS PL5,"
                StrSql = StrSql + "TOTALCOSTDEP AS PL8, "
                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR/PREF.CONVAREA)/FINVOLMSI) "
                StrSql = StrSql + "Else "
                StrSql = StrSql + "Case WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "((100*PREF.CURR)/FINVOLMUNITS) "
                StrSql = StrSql + "End "
                StrSql = StrSql + "End),0)SUNIT, "
                StrSql = StrSql + "PREF.CURR,PREF.CONVAREA,PREF.CONVWT,PREF.TITLE1,PREF.TITLE3,PREF.TITLE2,PREF.TITLE4,"
                StrSql = StrSql + "PREF.TITLE5,PREF.TITLE6,PREF.TITLE7,PREF.TITLE8,PREF.TITLE9,PREF.TITLE10,PREF.TITLE11,PREF.TITLE12,PREF.UNITS,"
                StrSql = StrSql + "RESULTSPL.CASEID, CASEDE1, (CASEDE1||' ' ||CASEDE2)CASEDES,"
                StrSql = StrSql + "CASEDE3,REPLACE( casede3, CHR(13) || CHR(10) ) CASEDE3N, CASEDE2, (GROUPS.DES1  ||' '|| GROUPS.DES2)GRPDES "
                StrSql = StrSql + "From RESULTSPL "
                StrSql = StrSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "Left OUTER JOIN GROUPCASES GRPS ON GRPS.CASEID=PC.CASEID "
                StrSql = StrSql + "INNER Join GROUPS ON GROUPS.GROUPID=GRPS.GROUPID "
                StrSql = StrSql + "INNER Join PREFERENCES PREF "
                StrSql = StrSql + "On PREF.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "INNER Join DEPRECIATION DEP "
                StrSql = StrSql + "On DEP.CASEID=RESULTSPL.CASEID "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId.ToString() + ")"

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetBulkCostDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Charts"
        Public Function GetChartPrefrences(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT  USERID,  "
                StrSql = StrSql + "UNITS, "
                StrSql = StrSql + "CURRENCY, "
                StrSql = StrSql + "CURR, "
                StrSql = StrSql + "CONVERSIONFACTOR, "
                StrSql = StrSql + " TO_CHAR(CURREFFDATE,'MON DD,YYYY') AS CEFFDATE, "
                StrSql = StrSql + "TITLE1, "
                StrSql = StrSql + "TITLE2, "
                StrSql = StrSql + "TITLE3, "
                StrSql = StrSql + "TITLE4, "
                StrSql = StrSql + "TITLE5, "
                StrSql = StrSql + "TITLE6, "
                StrSql = StrSql + "CONVAREA, "
                StrSql = StrSql + "TITLE7, "
                StrSql = StrSql + "TITLE8, "
                StrSql = StrSql + "TITLE9, "
                StrSql = StrSql + "TITLE10, "
                StrSql = StrSql + "TITLE11, "
                StrSql = StrSql + "TITLE12, "
                StrSql = StrSql + "CONVWT, "
                StrSql = StrSql + "CONVAREA2, "
                StrSql = StrSql + "CONVTHICK, "
                StrSql = StrSql + "CONVTHICK2, "
                StrSql = StrSql + "CONVTHICK3 "
                StrSql = StrSql + "FROM CHARTPREFERENCES "
                StrSql = StrSql + "WHERE USERID=" + UserId.ToString() + " "
                'StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "' "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function

        Public Function GetChartProfitAndLoss(ByVal IsDep As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                If IsDep = "N" Then


                    StrSql = "SELECT 'Revenue' AS TYPEDES,  "
                    StrSql = StrSql + "'REVENUE' AS TYPE, "
                    StrSql = StrSql + "'1' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Variable Margin' AS TYPEDES, "
                    StrSql = StrSql + "'VM' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Plant Margin' AS TYPEDES, "
                    StrSql = StrSql + "'PM' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL ORDER BY  SEQ"
                Else

                    StrSql = "SELECT 'Revenue With Depreciation' AS TYPEDES,  "
                    StrSql = StrSql + "'REVENUEDEP' AS TYPE, "
                    StrSql = StrSql + "'1' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Variable Margin With Depreciation' AS TYPEDES, "
                    StrSql = StrSql + "'VMDEP' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Plant Margin With Depreciation' AS TYPEDES, "
                    StrSql = StrSql + "'PMDEP' AS TYPE, "
                    StrSql = StrSql + "'3' AS SEQ "
                    StrSql = StrSql + "FROM DUAL ORDER BY  SEQ"

                End If
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("S1GetData:GetChartErgy:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetChartCost(ByVal IsDep As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                If IsDep = "N" Then

                    StrSql = "SELECT 'Variable Cost' AS TYPEDES,  "
                    StrSql = StrSql + "'VARIABLECOST' AS TYPE, "
                    StrSql = StrSql + "'1' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Fixed Cost' AS TYPEDES, "
                    StrSql = StrSql + "'FIXEDCOST' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Total Cost' AS TYPEDES, "
                    StrSql = StrSql + "'TOTALCOST' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL ORDER BY  SEQ"
                Else
                    StrSql = "SELECT 'Variable Cost With Depreciation' AS TYPEDES,  "
                    StrSql = StrSql + "'VARIABLECOST' AS TYPE, "
                    StrSql = StrSql + "'1' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Fixed Cost With Depreciation' AS TYPEDES, "
                    StrSql = StrSql + "'FIXEDCOSTDEP' AS TYPE, "
                    StrSql = StrSql + "'2' AS SEQ "
                    StrSql = StrSql + "FROM DUAL "
                    StrSql = StrSql + "UNION "
                    StrSql = StrSql + "SELECT 'Total Cost With Depreciation' AS TYPEDES, "
                    StrSql = StrSql + "'TOTALCOSTDEP' AS TYPE, "
                    StrSql = StrSql + "'3' AS SEQ "
                    StrSql = StrSql + "FROM DUAL ORDER BY  SEQ"

                End If
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("S1GetData:GetChartErgy:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetChartProfitAndLossRes(ByVal CaseId1 As String, ByVal CaseId2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT RESULTSPL.CASEID,  "
                StrSql = StrSql + "( CASE WHEN RESULTSPL.CASEID <= 1000 THEN "
                StrSql = StrSql + "( SELECT (BASECASES.CASEID||':'||REPLACE(REPLACE((REPLACE(NVL(BASECASES.CASEDE1,''),')','}')),'(','{')||' '||REPLACE((REPLACE(NVL(BASECASES.CASEDE2,''),')','}')),'(','{'),';',':') ) "
                StrSql = StrSql + "FROM BASECASES "
                StrSql = StrSql + "WHERE  BASECASES.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + ") ELSE "
                StrSql = StrSql + "( SELECT DISTINCT (PERMISSIONSCASES.CASEID||':'||REPLACE(REPLACE((REPLACE(NVL(PERMISSIONSCASES.CASEDE1,''),')','}')),'(','{') || ' ' || REPLACE((REPLACE(NVL(PERMISSIONSCASES.CASEDE2,''),')','}')),'(','{'),';',':') )  "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "WHERE  PERMISSIONSCASES.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + ") "
                StrSql = StrSql + "END  ) AS CASEDE, "
                StrSql = StrSql + "RESULTSPL.FINVOLMSI, "
                StrSql = StrSql + "RESULTSPL.FINVOLMUNITS, "
                StrSql = StrSql + "RESULTSPL.VOLUME, "
                StrSql = StrSql + "RESULTSPL.REVENUE, "
                StrSql = StrSql + "RESULTSPL.REVENUEDEP, "
                StrSql = StrSql + "RESULTSPL.VM, "
                StrSql = StrSql + "RESULTSPL.VMDEP, "
                StrSql = StrSql + "RESULTSPL.PM, "
                StrSql = StrSql + "RESULTSPL.PMDEP, "
                StrSql = StrSql + "RESULTSPL.CUSSALESVOLUME CUSSALESVOLUME, "
                StrSql = StrSql + "RESULTSPL.CUSSALESUNIT, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(100)/FINVOLMSI "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(100)/FINVOLMUNITS "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "
                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL "

                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId1.ToString() + "," + CaseId2.ToString() + ") "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetChartProfitAndLossRes:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetChartCostRes(ByVal CaseId1 As String, ByVal CaseId2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT RESULTSPL.CASEID,  "
                StrSql = StrSql + "( CASE WHEN RESULTSPL.CASEID <= 1000 THEN "
                StrSql = StrSql + "( SELECT (BASECASES.CASEID||':'||REPLACE(REPLACE((REPLACE(NVL(BASECASES.CASEDE1,''),')','}')),'(','{')||' '||REPLACE((REPLACE(NVL(BASECASES.CASEDE2,''),')','}')),'(','{'),';',':') ) "
                StrSql = StrSql + "FROM BASECASES "
                StrSql = StrSql + "WHERE  BASECASES.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + ") ELSE "
                StrSql = StrSql + "( SELECT DISTINCT (PERMISSIONSCASES.CASEID||':'||REPLACE(REPLACE((REPLACE(NVL(PERMISSIONSCASES.CASEDE1,''),')','}')),'(','{') || ' ' || REPLACE((REPLACE(NVL(PERMISSIONSCASES.CASEDE2,''),')','}')),'(','{'),';',':') )  "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "WHERE  PERMISSIONSCASES.CASEID = RESULTSPL.CASEID "
                StrSql = StrSql + ") "
                StrSql = StrSql + "END  ) AS CASEDE, "
                StrSql = StrSql + "RESULTSPL.FINVOLMSI, "
                StrSql = StrSql + "RESULTSPL.FINVOLMUNITS, "
                StrSql = StrSql + "RESULTSPL.VOLUME, "
                StrSql = StrSql + "RESULTSPL.FIXEDCOSTDEP, "
                StrSql = StrSql + "RESULTSPL.TOTALCOSTDEP, "
                StrSql = StrSql + "RESULTSPL.VARIABLECOST, "
                StrSql = StrSql + "RESULTSPL.FIXEDCOST, "
                StrSql = StrSql + "RESULTSPL.TOTALCOST, "
                StrSql = StrSql + "RESULTSPL.CUSSALESVOLUME CUSSALESVOLUME, "
                StrSql = StrSql + "RESULTSPL.CUSSALESUNIT, "
                StrSql = StrSql + "NVL( "
                StrSql = StrSql + "(CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(100)/FINVOLMSI "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(100)/FINVOLMUNITS "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNIT, "
                StrSql = StrSql + "NVL((CASE  WHEN FINVOLMSI > 1 THEN "
                StrSql = StrSql + "(FINVOLMSI)"
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "CASE WHEN FINVOLMUNITS > 1 THEN "
                StrSql = StrSql + "(FINVOLMUNITS) "
                StrSql = StrSql + "END "
                StrSql = StrSql + "END),0)SUNITVAL "
                StrSql = StrSql + "FROM RESULTSPL "
                StrSql = StrSql + "WHERE RESULTSPL.CASEID IN (" + CaseId1.ToString() + "," + CaseId2.ToString() + ") "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetChartCostRes:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

#End Region

#Region "Error"
        Public Function GetErrors(ByVal ErrorCode As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT ERRORID,  "
                StrSql = StrSql + "ERRORCODE, "
                StrSql = StrSql + "ERRORDE1, "
                StrSql = StrSql + "ERRORDE2, "
                StrSql = StrSql + "ERRORTYPE, "
                StrSql = StrSql + "SHORTERROR "
                StrSql = StrSql + "FROM SAVVYPACKERROR "
                StrSql = StrSql + "WHERE ERRORCODE='" + ErrorCode.ToString() + "' "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
#End Region

#Region "Wizard"
        Public Function GetSessionWizardId() As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT (SEQSESSIONID.NEXTVAL) As SessionId FROM DUAL "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
#End Region

#Region "LicenseAdministrator"
        Public Function GetPCaseDetailsByLicense(ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT DISTINCT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseDetailsByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCasesByLicense(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS "
                ' StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Case Grouping:"
        Public Function ValidateGroupName(ByVal Des1 As String, ByVal Des2 As String, ByVal USERID As String, ByVal Comp As String) As DataSet
            Dim odButil As New DBUtil()
            Dim strsql As String = String.Empty
            Dim Dts As New DataSet
            Dim GROUPID As String = ""
            Dim i As Integer = 0
            Try
                'Getting GROUPID from Sequence
                strsql = String.Empty
                strsql = strsql + "SELECT 1 "
                strsql = strsql + "FROM "
                strsql = strsql + "GROUPS "
                strsql = strsql + "WHERE "
                strsql = strsql + "USERID=" + USERID + " "
                strsql = strsql + "AND UPPER(DES1)='" + Des1.ToUpper() + "' "
                strsql = strsql + "AND "
                If Des2 = "" Then
                    strsql = strsql + "DES2 IS NULL "
                Else
                    strsql = strsql + "UPPER(DES2)='" + Des2.ToUpper() + "' "
                End If
                If Comp = "COMP" Or Comp = "COMPS1" Then
                    strsql = strsql + "AND SERVICEID IS NOT NULL "
                Else
                    strsql = strsql + "AND SERVICEID IS NULL "
                End If
                Dts = odButil.FillDataSet(strsql, EconConnection)
                Return Dts
            Catch ex As Exception
                Return Dts
                Throw New Exception("E1GetData:ValidateGroupName:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetPCaseGrpDetails(ByVal UserID As String, ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "

                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "

                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "


                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " "
                StrSql = StrSql + "AND PC.SERVICEID IS NULL  "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                StrSql = StrSql + " ) "

                StrSql = StrSql + "WHERE UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetGroupDetails(ByVal UserID As String, ByVal flag As Char) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + " "
                strSQL = strSQL + "AND SERVICEID IS NULL "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CaseID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS "
                        strSQL = strSQL + "WHERE USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next
                    If flag = "Y" Then ' Y FOR GROUPDEATILS PAGE ,N FOR EDITGROUPS PAGE
                        strSQL = "SELECT 0 GROUPID,  "
                        strSQL = strSQL + "'None'  GROUPNAME, "
                        strSQL = strSQL + "'NA' CaseID, "
                        strSQL = strSQL + "'NA'  GROUPDES, "
                        strSQL = strSQL + "'0:None'  CDES1, "
                        strSQL = strSQL + "'NA'  CREATIONDATE, "
                        strSQL = strSQL + "'NA'  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "DUAL "
                        strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                    End If
                    strSqlOutPut = " SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 "
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetPerBaseCases(ByVal UserId As String) As DataTable
            Dim Dts As New DataTable
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")

                ' Dim StrSql As String = "SELECT CASEID,CASEDE1,('CASE:'||CASEID||' - '|| CASEDE1||' ' || CASEDE2) AS CASEDE FROM PERMISSIONSCASES WHERE UPPER(username)='" + UserName.ToUpper() + "'"
                'StrSql = StrSql + "UNION SELECT CASEID,CASEDE1,('CASE:'||CASEID||' - '|| CASEDE1||' ' || CASEDE2) AS CASEDE  FROM BASECASES ORDER BY caseDE1"

                Dim StrSql As String = "SELECT CASEID,CASEDE1,('CASE:'||CASEID||' - '|| CASEDE1||' ' || CASEDE2) AS CASEDE FROM PERMISSIONSCASES WHERE USERID=" + UserId.ToString() + " "
                StrSql = StrSql + "UNION SELECT CASEID,CASEDE1,('CASE:'||CASEID||' - '|| CASEDE1||' ' || CASEDE2) AS CASEDE  FROM BASECASES ORDER BY caseDE1"

                Dts = odbUtil.FillDataTable(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetGroupDetailsByID(ByVal grpID As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                Dim StrSql As String = ""
                StrSql = "SELECT GROUPID,  "
                StrSql = StrSql + "DES1, "
                StrSql = StrSql + "DES2, "
                StrSql = StrSql + "USERID, "
                StrSql = StrSql + "DES1 || '&'||'nbsp;'||'&'||'nbsp;'||'&'||'nbsp;'|| DES2 AS GDES, "
                StrSql = StrSql + "CREATIONDATE, "
                StrSql = StrSql + "UPDATEDATE "
                StrSql = StrSql + "FROM GROUPS WHERE GROUPID= " + grpID + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetGroupIDByUSer(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT GROUPID,  "
                StrSql = StrSql + "DES1, "
                StrSql = StrSql + "DES2, "
                StrSql = StrSql + "USERID, "
                StrSql = StrSql + "CREATIONDATE, "
                StrSql = StrSql + "UPDATEDATE "
                StrSql = StrSql + "FROM GROUPS WHERE USERID= " + UserID + " "
                StrSql = StrSql + "AND SERVICEID IS NULL "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function ValiDateGroupcases(ByVal CaseIDs As String, ByVal UserID As String) As DataSet
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim Dts As New DataSet()
            Dim strCaseIDS() As String
            Dim i As Integer = 0
            Dim StrSql As String = ""
            Dim strQuery As String = String.Empty
            Dim count As Integer = 0
            Try
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                strCaseIDS = Regex.Split(CaseIDs, ",")

                If strCaseIDS.Length > 0 Then
                    For i = 0 To strCaseIDS.Length - 1
                        If strCaseIDS(i) <> "" Then
                            StrSql = "SELECT GROUPS.GROUPID,  "
                            StrSql = StrSql + "CASEID, "
                            StrSql = StrSql + "DES1 AS GROUPNAME "
                            StrSql = StrSql + "FROM "
                            StrSql = StrSql + "GROUPCASES "
                            StrSql = StrSql + "INNER JOIN GROUPS "
                            StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.GROUPID "
                            StrSql = StrSql + "WHERE CASEID=" + strCaseIDS(i).ToString()
                            StrSql = StrSql + " AND UserID=" + UserID.ToString()
                            Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                            If Dts.Tables(0).Rows.Count > 0 Then
                                If count = 0 Then
                                    strQuery = " SELECT '" + Dts.Tables(0).Rows(0).Item("CASEID").ToString() + "' CASEID,'" + Dts.Tables(0).Rows(0).Item("GROUPID").ToString() + "' GROUPID,'" + Dts.Tables(0).Rows(0).Item("GROUPNAME").ToString() + "' AS GROUPNAME FROM DUAL "
                                Else
                                    strQuery = strQuery + " UNION ALL SELECT '" + Dts.Tables(0).Rows(0).Item("CASEID").ToString() + "' CASEID,'" + Dts.Tables(0).Rows(0).Item("GROUPID").ToString() + "' GROUPID,'" + Dts.Tables(0).Rows(0).Item("GROUPNAME").ToString() + "' AS GROUPNAME FROM DUAL "
                                End If
                                count += 1
                            End If
                        End If
                    Next
                End If
                If strQuery <> "" Then
                    Dts = odbUtil.FillDataSet(strQuery, MyConnectionString)
                Else
                    StrSql = " SELECT * FROM GROUPCASES WHERE GROUPID=0 "
                    Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                End If

                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetGroupCasesByUSer(ByVal grpID As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                Dim StrSql As String = ""
                StrSql = "SELECT GROUPCASEID,  "
                StrSql = StrSql + "GROUPID, "
                StrSql = StrSql + "CASEID, "
                StrSql = StrSql + "SEQ "
                StrSql = StrSql + "FROM GROUPCASES WHERE GROUPID=" + grpID + " "
                StrSql = StrSql + "ORDER BY SEQ ASC "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetGroupCaseDetails(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim cnt As Integer = 0
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dts = objGetData.GetGroupIDByUSer(UserID)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = objGetData.GetGroupCasesByUSer(Dts.Tables(0).Rows(i).Item("GROUPID").ToString())
                        If ds.Tables(0).Rows.Count > 0 Then
                            For j = 0 To ds.Tables(0).Rows.Count - 1
                                If j = 0 Then
                                    CaseIDs = ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + " " + ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = "0"
                        End If
                        If cnt = 0 Then
                            cnt += 1
                            'strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' || ' ,Cases:" + CaseIDs + "' AS GROUPDES,'" + CaseIDs + "' AS CASEIDS FROM DUAL "
                            strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '|| '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1 FROM DUAL "
                        Else
                            cnt += 1
                            strSQL = strSQL + "UNION ALL SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' ||  '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '||  '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1 FROM DUAL "
                        End If
                    Next
                    strSQL = " SELECT * FROM ( " + strSQL + " ) DUAL ORDER BY UPPER(DES1),UPPER(DES2)"
                End If
                If strSQL <> "" Then
                    DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                Else
                    strSQL = "select * FROM GROUPS WHERE GROUPID=0"
                    DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                End If
                Return DtRes
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetEditCases(ByVal UserId As String, ByVal grpID As String, ByVal flag As String) As DataTable
            Dim Dts As New DataTable()
            Dim i As New Integer
            Try
                Dim odbUtil As New DBUtil()
                Dim StrSql As String = ""
                StrSql = "SELECT CASEID,CASEDE1,CASEDE,SEQ FROM  "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT PERMISSIONSCASES.CASEID, "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "SEQ, "
                StrSql = StrSql + "('CASE:'||PERMISSIONSCASES.CASEID||' - '|| CASEDE1||' ' || CASEDE2) AS CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + " LEFT OUTER JOIN ECON.GROUPCASES ON GROUPCASES.CASEID=PERMISSIONSCASES.CASEID "
                'StrSql = StrSql + "WHERE Upper(username)='" + UserName.ToUpper() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID=" + UserId.ToString() + " "
                If flag <> "true" Then
                    StrSql = StrSql + "AND  GROUPID=" + grpID.ToString() + " "
                End If
                StrSql = StrSql + ") "
                StrSql = StrSql + "Where CASEID "
                If flag = "true" Then
                    StrSql = StrSql + "NOT IN "
                    StrSql = StrSql + "(  "
                    StrSql = StrSql + "SELECT CASEID "
                    StrSql = StrSql + "FROM GROUPCASES "
                    StrSql = StrSql + "WHERE GROUPID=" + grpID + ") "
                    StrSql = StrSql + "ORDER BY CASEDE1,CASEID "
                Else
                    StrSql = StrSql + "IN "
                    StrSql = StrSql + "(  "
                    StrSql = StrSql + "SELECT CASEID "
                    StrSql = StrSql + "FROM GROUPCASES "
                    StrSql = StrSql + "WHERE GROUPID=" + grpID + ") "
                    StrSql = StrSql + "ORDER BY SEQ "
                End If


                Dts = odbUtil.FillDataTable(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Return Dts
            End Try
        End Function
        Public Function GetPCaseDetailsByGroup(ByVal UserId As String, ByVal grpId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT PERMISSIONSCASES.CASEID,CASEDE1,CASEDE2,CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(PERMISSIONSCASES.CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES,SEQ FROM PERMISSIONSCASES "
                StrSql = StrSql + " INNER JOIN GROUPCASES ON GROUPCASES.CASEID=PERMISSIONSCASES.CASEID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "'  AND GROUPCASES.GROUPID=" + grpId + " "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + "  AND GROUPCASES.GROUPID=" + grpId + " "
                StrSql = StrSql + " AND PERMISSIONSCASES.CASEID IN(SELECT CASEID FROM GROUPCASES WHERE GROUPID =" + grpId + ")"
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "


                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseDetailsByGroup:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetGroupCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String, ByVal groupID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "AND CASEID IN(SELECT CASEID FROM ECON.GROUPCASES WHERE GROUPID=" + groupID + " ) "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetMaxSEQGCASE(ByVal grpId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT NVL(MAX(SEQ),0) MAXCOUNT  "
                StrSql = StrSql + "FROM GROUPCASES "
                StrSql = StrSql + "WHERE GROUPID= " + grpId

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMaxSEQGCASE:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetAllGroupDetails(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + " "
                strSQL = strSQL + "AND SERVICEID IS NULL "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CASEID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "USR.UserName, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(GPS.CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN GPS.CREATIONDATE-GPS.UPDATEDATE =0 THEN 'NA' ELSE to_char(GPS.UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS GPS "
                        strSQL = strSQL + "INNER JOIN ECON.USERS USR "
                        strSQL = strSQL + "ON  USR.USERID=GPS.USERID "
                        strSQL = strSQL + "WHERE GPS.USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next

                    strSqlOutPut = "SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
#End Region

#Region "Injection Molding"
        Public Function GetInjectionDetails(ByVal CaseID As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT   INJIN.CASEID,  "

                StrSql = StrSql + "m1.Matde2, "
                StrSql = StrSql + "m2.Matde2, "
                StrSql = StrSql + "m3.Matde2, "
                StrSql = StrSql + "m4.Matde2,"
                StrSql = StrSql + "m5.Matde2, "
                StrSql = StrSql + "m6.Matde2, "
                StrSql = StrSql + "m7.Matde2, "
                StrSql = StrSql + "m8.Matde2, "
                StrSql = StrSql + "m9.Matde2, "
                StrSql = StrSql + "m10.Matde2,"

                StrSql = StrSql + "case when m1.sg = 0 then 0 else PWt1/(m1.SG*62.43) end partvol1, "
                StrSql = StrSql + "case when m2.sg = 0 then 0 else PWt2/(m2.SG*62.43) end partvol2, "
                StrSql = StrSql + "case when m3.sg = 0 then 0 else PWt3/(m3.SG*62.43) end partvol3, "
                StrSql = StrSql + "case when m4.sg = 0 then 0 else PWt4/(m4.SG*62.43) end partvol4, "
                StrSql = StrSql + "case when m5.sg = 0 then 0 else PWt5/(m5.SG*62.43) end partvol5, "
                StrSql = StrSql + "case when m6.sg = 0 then 0 else PWt6/(m6.SG*62.43) end partvol6, "
                StrSql = StrSql + "case when m7.sg = 0 then 0 else PWt7/(m7.SG*62.43) end partvol7, "
                StrSql = StrSql + "case when m8.sg = 0 then 0 else PWt8/(m8.SG*62.43) end partvol8, "
                StrSql = StrSql + "case when m9.sg = 0 then 0 else PWt9/(m9.SG*62.43) end partvol9, "
                StrSql = StrSql + "case when m10.sg = 0 then 0 else PWt10/(m10.SG*62.43) end partvol10, "



                StrSql = StrSql + "CASE RunSys1  WHEN '1' THEN 0  ELSE sa1*CavPL1*0.10   END SArea1, "
                StrSql = StrSql + " CASE RunSys2  WHEN '1' THEN 0  ELSE sa2*CavPL1*0.10   END SArea2, "
                StrSql = StrSql + "CASE RunSys3  WHEN '1' THEN 0  ELSE sa3*CavPL1*0.10   END SArea3, "
                StrSql = StrSql + "CASE RunSys4  WHEN '1' THEN 0  ELSE sa4*CavPL1*0.10   END SArea4, "
                StrSql = StrSql + "CASE RunSys5  WHEN '1' THEN 0  ELSE sa5*CavPL1*0.10   END SArea5, "
                StrSql = StrSql + "CASE RunSys6  WHEN '1' THEN 0  ELSE sa6*CavPL1*0.10   END SArea6, "
                StrSql = StrSql + "CASE RunSys7  WHEN '1' THEN 0  ELSE sa7*CavPL1*0.10   END SArea7, "
                StrSql = StrSql + "CASE RunSys8  WHEN '1' THEN 0  ELSE sa8*CavPL1*0.10   END SArea8, "
                StrSql = StrSql + "CASE RunSys9  WHEN '1' THEN 0  ELSE sa9*CavPL1*0.10   END SArea9, "
                StrSql = StrSql + "CASE RunSys10 WHEN '1' THEN 0  ELSE sa10*CavPL1*0.10   END SArea10, "

                StrSql = StrSql + "Lvls1*cavpl1   totalcav1, "
                StrSql = StrSql + "Lvls2*cavpl2   totalcav2, "
                StrSql = StrSql + "Lvls3*cavpl3   totalcav3, "
                StrSql = StrSql + "Lvls4*cavpl4   totalcav4, "
                StrSql = StrSql + "Lvls5*cavpl5   totalcav5, "
                StrSql = StrSql + "Lvls6*cavpl6   totalcav6, "
                StrSql = StrSql + "Lvls7*cavpl7   totalcav7, "
                StrSql = StrSql + "Lvls8*cavpl8   totalcav8, "
                StrSql = StrSql + "Lvls9*cavpl9   totalcav9, "
                StrSql = StrSql + "Lvls10*cavpl10   totalcav10, "
                StrSql = StrSql + "sa1*CavPL1 totpartSA1, "
                StrSql = StrSql + "sa2*CavPL2 totpartSA2, "
                StrSql = StrSql + "sa3*CavPL3 totpartSA3, "
                StrSql = StrSql + "sa4*CavPL4 totpartSA4, "
                StrSql = StrSql + "sa5*CavPL5 totpartSA5, "
                StrSql = StrSql + "sa6*CavPL6 totpartSA6, "
                StrSql = StrSql + "sa7*CavPL7 totpartSA7, "
                StrSql = StrSql + "sa8*CavPL8 totpartSA8, "
                StrSql = StrSql + "sa9*CavPL9 totpartSA9, "
                StrSql = StrSql + "sa10*CavPL10 totpartSA10, "
                For i = 1 To 10
                    StrSql = StrSql + "CASE runsys" + i.ToString() + " "
                    StrSql = StrSql + "WHEN '1' then "
                    StrSql = StrSql + "CASE m" + i.ToString() + ".SG when 0 then 0"
                    StrSql = StrSql + "ELSE  ROUND((PWt" + i.ToString() + "*16.0/m" + i.ToString() + ".SG* Lvls" + i.ToString() + "*cavpl" + i.ToString() + "),3) "
                    StrSql = StrSql + "END "
                    StrSql = StrSql + "ELSE "
                    StrSql = StrSql + "CASE  m" + i.ToString() + ".SG when 0 then 0 "
                    StrSql = StrSql + "ELSE ROUND(1.2*PWt" + i.ToString() + "*16.0/m" + i.ToString() + ".SG* Lvls" + i.ToString() + "*cavpl" + i.ToString() + ",3) "
                    StrSql = StrSql + "END "
                    StrSql = StrSql + "END ShotWt" + i.ToString() + ", "
                Next
                'StrSql = StrSql + "runsys1, m1.SG, PWt1,mwt1,m1.meltdensity*998.8473 MD1,injrateps1,m1.EFFDIFFUSIVITY EFFDIFFUSIVITY1, "
                'StrSql = StrSql + "runsys2, m2.SG, PWt2,mwt2,m2.meltdensity*998.8473 MD2,injrateps2,m2.EFFDIFFUSIVITY EFFDIFFUSIVITY2, "
                'StrSql = StrSql + "runsys3, m3.SG, PWt3,mwt3,m3.meltdensity*998.8473 MD3,injrateps3,m3.EFFDIFFUSIVITY EFFDIFFUSIVITY3, "
                'StrSql = StrSql + "runsys4, m4.SG, PWt4,mwt4,m4.meltdensity*998.8473 MD4,injrateps4,m4.EFFDIFFUSIVITY EFFDIFFUSIVITY4, "
                'StrSql = StrSql + "runsys5, m5.SG, PWt5,mwt5,m5.meltdensity*998.8473 MD5,injrateps5,m5.EFFDIFFUSIVITY EFFDIFFUSIVITY5, "
                'StrSql = StrSql + "runsys6, m6.SG, PWt6,mwt6,m6.meltdensity*998.8473 MD6,injrateps6,m6.EFFDIFFUSIVITY EFFDIFFUSIVITY6, "
                'StrSql = StrSql + "runsys7, m7.SG, PWt7,mwt7,m7.meltdensity*998.8473 MD7,injrateps7,m7.EFFDIFFUSIVITY EFFDIFFUSIVITY7, "
                'StrSql = StrSql + "runsys8, m8.SG, PWt8,mwt8,m8.meltdensity*998.8473 MD8,injrateps8,m8.EFFDIFFUSIVITY EFFDIFFUSIVITY8, "
                'StrSql = StrSql + "runsys9, m9.SG, PWt9,mwt9,m9.meltdensity*998.8473 MD9,injrateps9,m9.EFFDIFFUSIVITY EFFDIFFUSIVITY9, "
                'StrSql = StrSql + "runsys10,m10.SG, PWt10,mwt10,m10.meltdensity*998.8473 MD10,injrateps10,m10.EFFDIFFUSIVITY EFFDIFFUSIVITY10, "
                StrSql = StrSql + "runsys1, m1.SG, PWt1,mwt1,NVL(INJA1.meltdensity*998.8473,0) MD1,injrateps1,NVL(INJA1.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY1, "
                StrSql = StrSql + "runsys2, m2.SG, PWt2,mwt2,NVL(INJA2.meltdensity*998.8473,0) MD2,injrateps2,NVL(INJA2.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY2, "
                StrSql = StrSql + "runsys3, m3.SG, PWt3,mwt3,NVL(INJA3.meltdensity*998.8473,0) MD3,injrateps3,NVL(INJA3.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY3, "
                StrSql = StrSql + "runsys4, m4.SG, PWt4,mwt4,NVL(INJA4.meltdensity*998.8473,0) MD4,injrateps4,NVL(INJA4.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY4, "
                StrSql = StrSql + "runsys5, m5.SG, PWt5,mwt5,NVL(INJA5.meltdensity*998.8473,0) MD5,injrateps5,NVL(INJA5.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY5, "
                StrSql = StrSql + "runsys6, m6.SG, PWt6,mwt6,NVL(INJA6.meltdensity*998.8473,0) MD6,injrateps6,NVL(INJA6.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY6, "
                StrSql = StrSql + "runsys7, m7.SG, PWt7,mwt7,NVL(INJA7.meltdensity*998.8473,0) MD7,injrateps7,NVL(INJA7.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY7, "
                StrSql = StrSql + "runsys8, m8.SG, PWt8,mwt8,NVL(INJA8.meltdensity*998.8473,0) MD8,injrateps8,NVL(INJA8.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY8, "
                StrSql = StrSql + "runsys9, m9.SG, PWt9,mwt9,NVL(INJA9.meltdensity*998.8473,0) MD9,injrateps9,NVL(INJA9.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY9, "
                StrSql = StrSql + "runsys10,m10.SG, PWt10,mwt10,NVL(INJA10.meltdensity*998.8473,0) MD10,injrateps10,NVL(INJA10.EFFDIFFUSIVITY,0) EFFDIFFUSIVITY10, "


                StrSql = StrSql + " INJIN.MATID1, "
                StrSql = StrSql + " INJIN.MATID2, "
                StrSql = StrSql + " INJIN.MATID3, "
                StrSql = StrSql + " INJIN.MATID4, "
                StrSql = StrSql + " INJIN.MATID5, "
                StrSql = StrSql + " INJIN.MATID6, "
                StrSql = StrSql + " INJIN.MATID7, "
                StrSql = StrSql + " INJIN.MATID8, "
                StrSql = StrSql + " INJIN.MATID9, "
                StrSql = StrSql + " INJIN.MATID10, "

                StrSql = StrSql + " INJIN.AWT1, "
                StrSql = StrSql + " INJIN.AWT2, "
                StrSql = StrSql + " INJIN.AWT3, "
                StrSql = StrSql + " INJIN.AWT4, "
                StrSql = StrSql + " INJIN.AWT5, "
                StrSql = StrSql + " INJIN.AWT6, "
                StrSql = StrSql + " INJIN.AWT7, "
                StrSql = StrSql + " INJIN.AWT8, "
                StrSql = StrSql + " INJIN.AWT9, "
                StrSql = StrSql + " INJIN.AWT10, "
                StrSql = StrSql + " INJIN.SA1, "
                StrSql = StrSql + " INJIN.SA2, "
                StrSql = StrSql + " INJIN.SA3, "
                StrSql = StrSql + " INJIN.SA4, "
                StrSql = StrSql + " INJIN.SA5, "
                StrSql = StrSql + " INJIN.SA6, "
                StrSql = StrSql + " INJIN.SA7, "
                StrSql = StrSql + " INJIN.SA8, "
                StrSql = StrSql + " INJIN.SA9, "
                StrSql = StrSql + " INJIN.SA10, "
                StrSql = StrSql + " INJIN.SMold1, "
                StrSql = StrSql + " INJIN.SMold2, "
                StrSql = StrSql + " INJIN.SMold3, "
                StrSql = StrSql + " INJIN.SMold4, "
                StrSql = StrSql + " INJIN.SMold5, "
                StrSql = StrSql + " INJIN.SMold6, "
                StrSql = StrSql + " INJIN.SMold7, "
                StrSql = StrSql + " INJIN.SMold8, "
                StrSql = StrSql + " INJIN.SMold9, "
                StrSql = StrSql + " INJIN.SMold10, "

                StrSql = StrSql + " INJIN.Lvls1, "
                StrSql = StrSql + " INJIN.Lvls2, "
                StrSql = StrSql + " INJIN.Lvls3, "
                StrSql = StrSql + " INJIN.Lvls4, "
                StrSql = StrSql + " INJIN.Lvls5, "
                StrSql = StrSql + " INJIN.Lvls6, "
                StrSql = StrSql + " INJIN.Lvls7, "
                StrSql = StrSql + " INJIN.Lvls8, "
                StrSql = StrSql + " INJIN.Lvls9, "
                StrSql = StrSql + " INJIN.Lvls10, "
                StrSql = StrSql + " INJIN.CavPL1 , "
                StrSql = StrSql + " INJIN.CavPL2 , "
                StrSql = StrSql + " INJIN.CavPL3 , "
                StrSql = StrSql + " INJIN.CavPL4, "
                StrSql = StrSql + " INJIN.CavPL5, "
                StrSql = StrSql + " INJIN.CavPL6, "
                StrSql = StrSql + " INJIN.CavPL7, "
                StrSql = StrSql + " INJIN.CavPL8, "
                StrSql = StrSql + " INJIN.CavPL9, "
                StrSql = StrSql + " INJIN.CavPL10, "
                StrSql = StrSql + " INJIN.SD1, "
                StrSql = StrSql + " INJIN.SD2, "
                StrSql = StrSql + " INJIN.SD3, "
                StrSql = StrSql + " INJIN.SD4, "
                StrSql = StrSql + " INJIN.SD5, "
                StrSql = StrSql + " INJIN.SD6, "
                StrSql = StrSql + " INJIN.SD7, "
                StrSql = StrSql + " INJIN.SD8, "
                StrSql = StrSql + " INJIN.SD9, "
                StrSql = StrSql + " INJIN.SD10, "

                StrSql = StrSql + " INJIN.DryCT1, "
                StrSql = StrSql + " INJIN.DryCT2, "
                StrSql = StrSql + " INJIN.DryCT3, "
                StrSql = StrSql + " INJIN.DryCT4, "
                StrSql = StrSql + " INJIN.DryCT5, "
                StrSql = StrSql + " INJIN.DryCT6, "
                StrSql = StrSql + " INJIN.DryCT7, "
                StrSql = StrSql + " INJIN.DryCT8, "
                StrSql = StrSql + " INJIN.DryCT9, "
                StrSql = StrSql + " INJIN.DryCT10, "
                StrSql = StrSql + " INJIN.EjectTmp1, "
                StrSql = StrSql + " INJIN.EjectTmp2, "
                StrSql = StrSql + " INJIN.EjectTmp3, "
                StrSql = StrSql + " INJIN.EjectTmp4, "
                StrSql = StrSql + " INJIN.EjectTmp5, "
                StrSql = StrSql + " INJIN.EjectTmp6, "
                StrSql = StrSql + " INJIN.EjectTmp7, "
                StrSql = StrSql + " INJIN.EjectTmp8, "
                StrSql = StrSql + " INJIN.EjectTmp9, "
                StrSql = StrSql + " INJIN.EjectTmp10, "
                StrSql = StrSql + " INJIN.InjectTmp1, "
                StrSql = StrSql + " INJIN.InjectTmp2, "
                StrSql = StrSql + " INJIN.InjectTmp3, "
                StrSql = StrSql + " INJIN.InjectTmp4, "
                StrSql = StrSql + " INJIN.InjectTmp5, "
                StrSql = StrSql + " INJIN.InjectTmp6, "
                StrSql = StrSql + " INJIN.InjectTmp7, "
                StrSql = StrSql + " INJIN.InjectTmp8, "
                StrSql = StrSql + " INJIN.InjectTmp9, "
                StrSql = StrSql + " INJIN.InjectTmp10, "
                StrSql = StrSql + " INJIN.MoldTmp1, "
                StrSql = StrSql + " INJIN.MoldTmp2, "
                StrSql = StrSql + " INJIN.MoldTmp3, "
                StrSql = StrSql + " INJIN.MoldTmp4, "
                StrSql = StrSql + " INJIN.MoldTmp5, "
                StrSql = StrSql + " INJIN.MoldTmp6, "
                StrSql = StrSql + " INJIN.MoldTmp7, "
                StrSql = StrSql + " INJIN.MoldTmp8, "
                StrSql = StrSql + " INJIN.MoldTmp9, "
                StrSql = StrSql + " INJIN.MoldTmp10 ,  "
                'prefered Values of temp
                StrSql = StrSql + " NVL(INJA1.INJTEMPEJECT,0) EjectTmpp1, "
                StrSql = StrSql + " NVL(INJA2.INJTEMPEJECT,0) EjectTmpp2, "
                StrSql = StrSql + " NVL(INJA3.INJTEMPEJECT,0) EjectTmpp3, "
                StrSql = StrSql + " NVL(INJA4.INJTEMPEJECT,0) EjectTmpp4, "
                StrSql = StrSql + " NVL(INJA5.INJTEMPEJECT,0) EjectTmpp5, "
                StrSql = StrSql + " NVL(INJA6.INJTEMPEJECT,0) EjectTmpp6, "
                StrSql = StrSql + " NVL(INJA7.INJTEMPEJECT,0) EjectTmpp7, "
                StrSql = StrSql + " NVL(INJA8.INJTEMPEJECT,0) EjectTmpp8, "
                StrSql = StrSql + " NVL(INJA9.INJTEMPEJECT,0) EjectTmpp9, "
                StrSql = StrSql + " NVL(INJA10.INJTEMPEJECT,0) EjectTmpp10, "
                StrSql = StrSql + " NVL(INJA1.INJTEMPMELT,0) InjectTmpp1, "
                StrSql = StrSql + " NVL(INJA2.INJTEMPMELT,0) InjectTmpp2, "
                StrSql = StrSql + " NVL(INJA3.INJTEMPMELT,0) InjectTmpp3, "
                StrSql = StrSql + " NVL(INJA4.INJTEMPMELT,0) InjectTmpp4, "
                StrSql = StrSql + " NVL(INJA5.INJTEMPMELT,0) InjectTmpp5, "
                StrSql = StrSql + " NVL(INJA6.INJTEMPMELT,0) InjectTmpp6, "
                StrSql = StrSql + " NVL(INJA7.INJTEMPMELT,0) InjectTmpp7, "
                StrSql = StrSql + " NVL(INJA8.INJTEMPMELT,0) InjectTmpp8, "
                StrSql = StrSql + " NVL(INJA9.INJTEMPMELT,0) InjectTmpp9, "
                StrSql = StrSql + " NVL(INJA10.INJTEMPMELT,0) InjectTmpp10, "

                StrSql = StrSql + " NVL(INJA1.INJTEMPTOOL,0) MoldTmpp1, "
                StrSql = StrSql + " NVL(INJA2.INJTEMPTOOL,0) MoldTmpp2, "
                StrSql = StrSql + " NVL(INJA3.INJTEMPTOOL,0) MoldTmpp3, "
                StrSql = StrSql + " NVL(INJA4.INJTEMPTOOL,0) MoldTmpp4, "
                StrSql = StrSql + " NVL(INJA5.INJTEMPTOOL,0) MoldTmpp5, "
                StrSql = StrSql + " NVL(INJA6.INJTEMPTOOL,0) MoldTmpp6, "
                StrSql = StrSql + " NVL(INJA7.INJTEMPTOOL,0) MoldTmpp7, "
                StrSql = StrSql + " NVL(INJA8.INJTEMPTOOL,0) MoldTmpp8, "
                StrSql = StrSql + " NVL(INJA9.INJTEMPTOOL,0) MoldTmpp9, "
                StrSql = StrSql + " NVL(INJA10.INJTEMPTOOL,0)  MoldTmpp10, "
                StrSql = StrSql + " NVL(INJA1.STANDARDWALL,0) STANDARDWALL1, "
                StrSql = StrSql + " NVL(INJA2.STANDARDWALL,0) STANDARDWALL2, "
                StrSql = StrSql + " NVL(INJA3.STANDARDWALL,0) STANDARDWALL3, "
                StrSql = StrSql + " NVL(INJA4.STANDARDWALL,0) STANDARDWALL4, "
                StrSql = StrSql + " NVL(INJA5.STANDARDWALL,0) STANDARDWALL5, "
                StrSql = StrSql + " NVL(INJA6.STANDARDWALL,0) STANDARDWALL6, "
                StrSql = StrSql + " NVL(INJA7.STANDARDWALL,0) STANDARDWALL7, "
                StrSql = StrSql + " NVL(INJA8.STANDARDWALL,0) STANDARDWALL8, "
                StrSql = StrSql + " NVL(INJA9.STANDARDWALL,0) STANDARDWALL9, "
                StrSql = StrSql + " NVL(INJA10.STANDARDWALL,0)  STANDARDWALL10, "

                StrSql = StrSql + " INJIN.Nopress1,"
                StrSql = StrSql + " INJIN.Nopress2,"
                StrSql = StrSql + " INJIN.Nopress3,"
                StrSql = StrSql + " INJIN.Nopress4,"
                StrSql = StrSql + " INJIN.Nopress5,"
                StrSql = StrSql + " INJIN.Nopress6,"
                StrSql = StrSql + " INJIN.Nopress7,"
                StrSql = StrSql + " INJIN.Nopress8,"
                StrSql = StrSql + " INJIN.Nopress9,"
                StrSql = StrSql + " INJIN.Nopress10,"

                StrSql = StrSql + " INJIN.FixEnerLoad1,"
                StrSql = StrSql + " INJIN.FixEnerLoad2,"
                StrSql = StrSql + " INJIN.FixEnerLoad3,"
                StrSql = StrSql + " INJIN.FixEnerLoad4,"
                StrSql = StrSql + " INJIN.FixEnerLoad5,"
                StrSql = StrSql + " INJIN.FixEnerLoad6,"
                StrSql = StrSql + " INJIN.FixEnerLoad7,"
                StrSql = StrSql + " INJIN.FixEnerLoad8,"
                StrSql = StrSql + " INJIN.FixEnerLoad9,"
                StrSql = StrSql + " INJIN.FixEnerLoad10,"

                StrSql = StrSql + " INJIN.ProcessLoad1,"
                StrSql = StrSql + " INJIN.ProcessLoad2,"
                StrSql = StrSql + " INJIN.ProcessLoad3,"
                StrSql = StrSql + " INJIN.ProcessLoad4,"
                StrSql = StrSql + " INJIN.ProcessLoad5,"
                StrSql = StrSql + " INJIN.ProcessLoad6,"
                StrSql = StrSql + " INJIN.ProcessLoad7,"
                StrSql = StrSql + " INJIN.ProcessLoad8,"
                StrSql = StrSql + " INJIN.ProcessLoad9,"
                StrSql = StrSql + " INJIN.ProcessLoad10,"

                'preferences
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.TITLE13, "
                StrSql = StrSql + "PREF.TITLE14, "
                StrSql = StrSql + "PREF.TITLE15, "
                StrSql = StrSql + "PREF.TITLE16, "
                StrSql = StrSql + "PREF.CONVWT CONVWT, "
                StrSql = StrSql + "PREF.CONVWT2 CONVWT2, "
                StrSql = StrSql + "PREF.CONVWT3 CONVWT3, "
                StrSql = StrSql + "PREF.CONVWT4 CONVWT4, "
                StrSql = StrSql + "PREF.CONVTHICK CONVTHICK, "
                StrSql = StrSql + "PREF.CURR CURR, "
                StrSql = StrSql + "PREF.CONVAREA CONVAREA, "
                StrSql = StrSql + "PREF.CONVAREA3 CONVAREA3, "
                StrSql = StrSql + "PREF.CONVVOL CONVVOL, "
                StrSql = StrSql + "PREF.UNITS "

                StrSql = StrSql + "FROM InjectionInput INJIN  "
                'StrSql = StrSql + "inner JOIN materials MAT1 "
                StrSql = StrSql + "inner JOIN materials M1  ON INJIN.MATID1 = M1.matid  "
                StrSql = StrSql + "inner JOIN materials M2  ON INJIN.MATID2 = M2.matid "
                StrSql = StrSql + "inner JOIN materials M3  ON INJIN.MATID3 = M3.matid "
                StrSql = StrSql + "inner JOIN materials M4  ON INJIN.MATID4 = M4.matid "
                StrSql = StrSql + "inner JOIN materials M5  ON INJIN.MATID5 = M5.matid "
                StrSql = StrSql + "inner JOIN materials M6  ON INJIN.MATID6 = M6.matid "
                StrSql = StrSql + "inner JOIN materials M7  ON INJIN.MATID7 = M7.matid "
                StrSql = StrSql + "inner JOIN materials M8  ON INJIN.MATID8 = M8.matid "
                StrSql = StrSql + "inner JOIN materials M9  ON INJIN.MATID9 = M9.matid "
                StrSql = StrSql + "inner JOIN materials M10  ON INJIN.MATID10 = M10.matid "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID= " + CaseID.ToString()
                '------------Added on 24/01/2014
                StrSql = StrSql + " LEFT OUTER JOIN INJECTIONARCH INJA1 "
                StrSql = StrSql + "ON INJA1.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA1.MATID = M1.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA2 "
                StrSql = StrSql + "ON INJA2.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA2.MATID = M2.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA3 "
                StrSql = StrSql + "ON INJA3.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA3.MATID = M3.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA4 "
                StrSql = StrSql + "ON INJA4.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA4.MATID = M4.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA5 "
                StrSql = StrSql + "ON INJA5.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA5.MATID = M5.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA6 "
                StrSql = StrSql + "ON INJA6.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA6.MATID = M6.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA7 "
                StrSql = StrSql + "ON INJA7.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA7.MATID = M7.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA8 "
                StrSql = StrSql + "ON INJA8.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA8.MATID = M8.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA9 "
                StrSql = StrSql + "ON INJA9.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA9.MATID = M9.MATID "
                StrSql = StrSql + "LEFT OUTER JOIN INJECTIONARCH INJA10 "
                StrSql = StrSql + "ON INJA10.EFFDATE = PREF.EFFDATE "
                StrSql = StrSql + "AND INJA10.MATID = M10.MATID "
                StrSql = StrSql + "WHERE InjIn.CASEID =" + CaseID.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetInjectionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetMaterialByText(ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT MATID,MATDE1, (MATDE1||' '||MATDE2)MatDES,MATDE2,PRICE,MATID,  "
                StrSql = StrSql + "SG, "
                StrSql = StrSql + "SERVERDATE, "
                StrSql = StrSql + "BW, "
                StrSql = StrSql + "THICK, "
                StrSql = StrSql + "MATDE3, "
                StrSql = StrSql + "INJMOLD, "
                StrSql = StrSql + "MELTDENSITY, "
                StrSql = StrSql + "INJTEMPMELT, "
                StrSql = StrSql + "INJTEMPTOOL, "
                StrSql = StrSql + "INJTEMPEJECT, "
                StrSql = StrSql + "EFFDIFFUSIVITY, "
                StrSql = StrSql + "CFFACTOR "
                StrSql = StrSql + "FROM MATERIALS "
                StrSql = StrSql + "WHERE "
                StrSql = StrSql + "(UPPER(MATDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(PRICE) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(MATID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(SG) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(SERVERDATE) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BW) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(THICK) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(MATDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(INJMOLD) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(MELTDENSITY) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(INJTEMPMELT) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(INJTEMPTOOL) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(INJTEMPEJECT) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(EFFDIFFUSIVITY) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CFFACTOR) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + " ) AND INJMOLD=1 Or MATID=0"
                StrSql = StrSql + "ORDER BY  UPPER(MATDE2) "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMaterialByText:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetInjectionEquiData(ByVal CaseID As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CLAMPSIZE,  "
                StrSql = StrSql + "INJRATEL, "
                StrSql = StrSql + "INJRATEH, "
                StrSql = StrSql + "INJRATEA, "
                StrSql = StrSql + "SHOTCAPL*PREF.CONVWT4 SHOTCAPL, "
                StrSql = StrSql + "SHOTCAPH*PREF.CONVWT4 SHOTCAPH, "
                StrSql = StrSql + "RATE, "
                StrSql = StrSql + "INVESTCOSTL, "
                StrSql = StrSql + "INVESTCOSTH, "
                StrSql = StrSql + "INVESTCOSTA, "
                StrSql = StrSql + "PREF.UNITS units, "
                StrSql = StrSql + "PREF.CURRENCY CURRENCY, "
                StrSql = StrSql + "PREF.TITLE2 TITLE2, "
                StrSql = StrSql + "PREF.TITLE14 TITLE14, "
                StrSql = StrSql + "PREF.CONVWT3 CONVWT3, "
                StrSql = StrSql + "PREF.CONVWT4 CONVWT4, "
                StrSql = StrSql + "PREF.CONVVOL CONVVOL, "
                StrSql = StrSql + "PREF.TITLE16 TITLE16, "
                StrSql = StrSql + "PREF.TITLE13 TITLE13 "
                StrSql = StrSql + "FROM INJECTIONEQUIPMENT "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID = " + CaseID.ToString()
                StrSql = StrSql + "ORDER BY  CLAMPSIZE ASC"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetInjectionEquiData:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Ink Printing"
        Public Function GetColorsByText(ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT COLORID, (COLORID||'  '||COLORNAME)COLDES,COLORNAME,PMS,COLORNBR,  "
                StrSql = StrSql + "BCOLOR1, "
                StrSql = StrSql + "BCOLOR2, "
                StrSql = StrSql + "BCOLOR3, "
                StrSql = StrSql + "BCOLOR4, "
                StrSql = StrSql + "BCOLOR5, "
                StrSql = StrSql + "BCOLOR6, "
                StrSql = StrSql + "BCOLOR7, "
                StrSql = StrSql + "BCOLOR8, "
                StrSql = StrSql + "BCOLOR9, "
                StrSql = StrSql + "BCOLOR10, "
                StrSql = StrSql + "BCOLOR11 "
                StrSql = StrSql + "FROM COLORDETAILS "
                StrSql = StrSql + "WHERE "
                StrSql = StrSql + "UPPER(COLORNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(PMS) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(COLORNBR) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR4) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR5) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR6) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR7) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR8) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR9) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR10) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(BCOLOR11) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(COLORNAME) "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetColorsByText:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetColors(ByVal ColId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT COLORID, (COLORID||'  '||COLORNAME)COLDES,COLORNAME,PMS  "
                StrSql = StrSql + "FROM COLORDETAILS "
                StrSql = StrSql + "WHERE COLORNBR = CASE WHEN " + ColId.ToString() + " = -1 THEN "
                StrSql = StrSql + "COLORNBR "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + ColId.ToString() + " "
                StrSql = StrSql + "END "
                StrSql = StrSql + "ORDER BY  UPPER(COLORNAME) "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetColors:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetColorDetails(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                strsql = "SELECT  "
                StrSql = StrSql + "PREF.CASEID, "
                StrSql = StrSql + "COLOR1, "
                StrSql = StrSql + "COLOR2, "
                StrSql = StrSql + "COLOR3, "
                StrSql = StrSql + "COLOR4 , "
                StrSql = StrSql + "COLOR5, "
                StrSql = StrSql + "COLOR6 , "
                StrSql = StrSql + "COLOR7, "
                StrSql = StrSql + "COLOR8, "
                StrSql = StrSql + "COLOR9, "
                StrSql = StrSql + "COLOR10, "
                StrSql = StrSql + "COV1, "
                StrSql = StrSql + "COV2, "
                StrSql = StrSql + "COV3, "
                StrSql = StrSql + "COV4, "
                StrSql = StrSql + "COV5, "
                StrSql = StrSql + "COV6, "
                StrSql = StrSql + "COV7, "
                StrSql = StrSql + "COV8, "
                StrSql = StrSql + "COV9, "
                StrSql = StrSql + "COV10, "
                StrSql = StrSql + "PREF.TITLE1, "
                StrSql = StrSql + "PREF.TITLE3, "
                StrSql = StrSql + "PREF.TITLE2, "
                StrSql = StrSql + "PREF.TITLE4, "
                StrSql = StrSql + "PREF.TITLE5, "
                StrSql = StrSql + "PREF.TITLE6, "
                StrSql = StrSql + "PREF.TITLE7, "
                StrSql = StrSql + "PREF.TITLE8, "
                StrSql = StrSql + "PREF.TITLE9, "
                StrSql = StrSql + "PREF.TITLE10, "
                StrSql = StrSql + "PREF.TITLE11, "
                StrSql = StrSql + "PREF.TITLE12, "
                StrSql = StrSql + "PREF.TITLE13, "
                StrSql = StrSql + "PREF.CONVWT, "
                StrSql = StrSql + "PREF.CONVWT2, "
                StrSql = StrSql + "PREF.CONVAREA, "
                StrSql = StrSql + "PREF.UNITS "
                StrSql = StrSql + "FROM COLORINPUT "
                StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                StrSql = StrSql + "ON PREF.CASEID=COLORINPUT.CASEID "
                StrSql = StrSql + "WHERE PREF.CASEID =" + CaseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetColorDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetColorPrefDetails(ByVal UserId As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim ds As New DataSet()
            Try
                StrSql = "SELECT BASECOLORID,DATECOL  "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "( "
                StrSql = StrSql + "SELECT 1 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 1 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 2 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 2 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 3 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 3 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 4 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 4 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 5 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 5 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 6 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 6 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 7 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 7 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 8 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 8 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 9 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 9 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 10 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 10 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT 11 BasecolorId,TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy') DATECOL  FROM BASECOLORARCH WHERE BASECOLORID = 11 AND "
                StrSql = StrSql + "EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY') "
                StrSql = StrSql + ") "
                StrSql = StrSql + "ORDER BY BASECOLORID ASC "
                ds = odbUtil.FillDataSet(StrSql, EconConnection)

                If ds.Tables(0).Rows.Count > 0 Then
                    StrSql = "SELECT B1.COLORNAME COLOR1,  "
                    StrSql = StrSql + "B2.COLORNAME COLOR2, "
                    StrSql = StrSql + "B3.COLORNAME COLOR3, "
                    StrSql = StrSql + "B4.COLORNAME COLOR4, "
                    StrSql = StrSql + "B5.COLORNAME COLOR5, "
                    StrSql = StrSql + "B6.COLORNAME COLOR6, "
                    StrSql = StrSql + "B7.COLORNAME COLOR7, "
                    StrSql = StrSql + "B8.COLORNAME COLOR8, "
                    StrSql = StrSql + "B9.COLORNAME COLOR9, "
                    StrSql = StrSql + "B10.COLORNAME COLOR10, "
                    StrSql = StrSql + "B11.COLORNAME COLOR11, "
                    'Bug#379# start
                    StrSql = StrSql + "(BA1.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS1, "
                    StrSql = StrSql + "(BA2.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS2, "
                    StrSql = StrSql + "(BA3.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS3, "
                    StrSql = StrSql + "(BA4.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS4, "
                    StrSql = StrSql + "(BA5.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS5, "
                    StrSql = StrSql + "(BA6.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS6, "
                    StrSql = StrSql + "(BA7.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS7, "
                    StrSql = StrSql + "(BA8.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS8, "
                    StrSql = StrSql + "(BA9.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS9, "
                    StrSql = StrSql + "(BA10.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS10, "
                    StrSql = StrSql + "(BA11.WETPRICE/PREF.CONVWT*PREF.CURR) WETPS11, "
                    'Bug#379# End
                    StrSql = StrSql + "(INKP.WETPRICE1/PREF.CONVWT*PREF.CURR) WETPP1, "
                    StrSql = StrSql + "(INKP.WETPRICE2/PREF.CONVWT*PREF.CURR) WETPP2, "
                    StrSql = StrSql + "(INKP.WETPRICE3/PREF.CONVWT*PREF.CURR) WETPP3, "
                    StrSql = StrSql + "(INKP.WETPRICE4/PREF.CONVWT*PREF.CURR) WETPP4, "
                    StrSql = StrSql + "(INKP.WETPRICE5/PREF.CONVWT*PREF.CURR) WETPP5, "
                    StrSql = StrSql + "(INKP.WETPRICE6/PREF.CONVWT*PREF.CURR) WETPP6, "
                    StrSql = StrSql + "(INKP.WETPRICE7/PREF.CONVWT*PREF.CURR) WETPP7, "
                    StrSql = StrSql + "(INKP.WETPRICE8/PREF.CONVWT*PREF.CURR) WETPP8, "
                    StrSql = StrSql + "(INKP.WETPRICE9/PREF.CONVWT*PREF.CURR) WETPP9, "
                    StrSql = StrSql + "(INKP.WETPRICE10/PREF.CONVWT*PREF.CURR) WETPP10, "
                    StrSql = StrSql + "(INKP.WETPRICE11/PREF.CONVWT*PREF.CURR) WETPP11, "
                    'Bug#379# Start
                    StrSql = StrSql + "BA1.PERSOL PERSOLS1, "
                    StrSql = StrSql + "BA2.PERSOL PERSOLS2, "
                    StrSql = StrSql + "BA3.PERSOL PERSOLS3, "
                    StrSql = StrSql + "BA4.PERSOL PERSOLS4, "
                    StrSql = StrSql + "BA5.PERSOL PERSOLS5, "
                    StrSql = StrSql + "BA6.PERSOL PERSOLS6, "
                    StrSql = StrSql + "BA7.PERSOL PERSOLS7, "
                    StrSql = StrSql + "BA8.PERSOL PERSOLS8, "
                    StrSql = StrSql + "BA9.PERSOL PERSOLS9, "
                    StrSql = StrSql + "BA10.PERSOL PERSOLS10, "
                    StrSql = StrSql + "BA11.PERSOL PERSOLS11, "
                    'Bug#379# End
                    StrSql = StrSql + "INKP.PERSOL1 PERSOLP1, "
                    StrSql = StrSql + "INKP.PERSOL2 PERSOLP2, "
                    StrSql = StrSql + "INKP.PERSOL3 PERSOLP3, "
                    StrSql = StrSql + "INKP.PERSOL4 PERSOLP4, "
                    StrSql = StrSql + "INKP.PERSOL5 PERSOLP5, "
                    StrSql = StrSql + "INKP.PERSOL6 PERSOLP6, "
                    StrSql = StrSql + "INKP.PERSOL7 PERSOLP7, "
                    StrSql = StrSql + "INKP.PERSOL8 PERSOLP8, "
                    StrSql = StrSql + "INKP.PERSOL9 PERSOLP9, "
                    StrSql = StrSql + "INKP.PERSOL10 PERSOLP10, "
                    StrSql = StrSql + "INKP.PERSOL11 PERSOLP11, "
                    'Bug#379# Start
                    StrSql = StrSql + "BA1.SGRAVITY SGRAVITYS1, "
                    StrSql = StrSql + "BA2.SGRAVITY SGRAVITYS2, "
                    StrSql = StrSql + "BA3.SGRAVITY SGRAVITYS3, "
                    StrSql = StrSql + "BA4.SGRAVITY SGRAVITYS4, "
                    StrSql = StrSql + "BA5.SGRAVITY SGRAVITYS5, "
                    StrSql = StrSql + "BA6.SGRAVITY SGRAVITYS6, "
                    StrSql = StrSql + "BA7.SGRAVITY SGRAVITYS7, "
                    StrSql = StrSql + "BA8.SGRAVITY SGRAVITYS8, "
                    StrSql = StrSql + "BA9.SGRAVITY SGRAVITYS9, "
                    StrSql = StrSql + "BA10.SGRAVITY SGRAVITYS10, "
                    StrSql = StrSql + "BA11.SGRAVITY SGRAVITYS11, "
                    'Bug#379# End
                    StrSql = StrSql + "INKP.SGRAVITY1 SGRAVITYP1, "
                    StrSql = StrSql + "INKP.SGRAVITY2 SGRAVITYP2, "
                    StrSql = StrSql + "INKP.SGRAVITY3 SGRAVITYP3, "
                    StrSql = StrSql + "INKP.SGRAVITY4 SGRAVITYP4, "
                    StrSql = StrSql + "INKP.SGRAVITY5 SGRAVITYP5, "
                    StrSql = StrSql + "INKP.SGRAVITY6 SGRAVITYP6, "
                    StrSql = StrSql + "INKP.SGRAVITY7 SGRAVITYP7, "
                    StrSql = StrSql + "INKP.SGRAVITY8 SGRAVITYP8, "
                    StrSql = StrSql + "INKP.SGRAVITY9 SGRAVITYP9, "
                    StrSql = StrSql + "INKP.SGRAVITY10 SGRAVITYP10, "
                    StrSql = StrSql + "INKP.SGRAVITY11 SGRAVITYP11, "
                    StrSql = StrSql + "PREF.TITLE1, "
                    StrSql = StrSql + "PREF.TITLE3, "
                    StrSql = StrSql + "PREF.TITLE2, "
                    StrSql = StrSql + "PREF.TITLE4, "
                    StrSql = StrSql + "PREF.TITLE5, "
                    StrSql = StrSql + "PREF.TITLE6, "
                    StrSql = StrSql + "PREF.TITLE7, "
                    StrSql = StrSql + "PREF.TITLE8, "
                    StrSql = StrSql + "PREF.TITLE9, "
                    StrSql = StrSql + "PREF.TITLE10, "
                    StrSql = StrSql + "PREF.TITLE11, "
                    StrSql = StrSql + "PREF.TITLE12, "
                    StrSql = StrSql + "PREF.UNITS "
                    StrSql = StrSql + "FROM INKPREFERENCES INKP "
                    StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                    StrSql = StrSql + "ON PREF.CASEID=" + CaseId + " "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B1 "
                    StrSql = StrSql + "ON B1.BASECOLORID=1 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B2 "
                    StrSql = StrSql + "ON B2.BASECOLORID=2 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B3 "
                    StrSql = StrSql + "ON B3.BASECOLORID=3 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B4 "
                    StrSql = StrSql + "ON B4.BASECOLORID=4 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B5 "
                    StrSql = StrSql + "ON B5.BASECOLORID=5 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B6 "
                    StrSql = StrSql + "ON B6.BASECOLORID=6 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B7 "
                    StrSql = StrSql + "ON B7.BASECOLORID=7 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B8 "
                    StrSql = StrSql + "ON B8.BASECOLORID=8 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B9 "
                    StrSql = StrSql + "ON B9.BASECOLORID=9 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B10 "
                    StrSql = StrSql + "ON B10.BASECOLORID=10 "
                    StrSql = StrSql + "INNER JOIN BASECOLOR B11 "
                    StrSql = StrSql + "ON B11.BASECOLORID=11 "
                    'Bug#379# Start
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA1 "
                    'StrSql = StrSql + "ON BA1.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 1 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA1.BASECOLORID = 1 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA2 "
                    'StrSql = StrSql + "ON BA2.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 2 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA2.BASECOLORID = 2 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA3 "
                    'StrSql = StrSql + "ON BA3.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 3 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA3.BASECOLORID = 3 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA4 "
                    'StrSql = StrSql + "ON BA4.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 4 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA4.BASECOLORID = 4 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA5 "
                    'StrSql = StrSql + "ON BA5.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 5 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA5.BASECOLORID = 5 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA6 "
                    'StrSql = StrSql + "ON BA6.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 6 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA6.BASECOLORID = 6 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA7 "
                    'StrSql = StrSql + "ON BA7.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 7 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA7.BASECOLORID = 7 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA8 "
                    'StrSql = StrSql + "ON BA8.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 8 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA8.BASECOLORID = 8 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA9 "
                    'StrSql = StrSql + "ON BA9.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 9 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA9.BASECOLORID = 9 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA10 "
                    'StrSql = StrSql + "ON BA10.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 10 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA10.BASECOLORID = 10 "
                    'StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA11 "
                    'StrSql = StrSql + "ON BA11.EFFDATE = TO_DATE((SELECT TO_CHAR(MAX(EFFDATE),'mm/dd/yyyy')  FROM BASECOLORARCH WHERE BASECOLORID = 11 AND EFFDATE<=TO_DATE( (SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy')  FROM PREFERENCES WHERE CASEID=" + CaseId + ") ,'MM//DD/YYYY')),'MM/DD/YYYY')  "
                    'StrSql = StrSql + "AND BA11.BASECOLORID = 11"
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA1 "
                    StrSql = StrSql + "ON BA1.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(0).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA1.BASECOLORID = 1 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA2 "
                    StrSql = StrSql + "ON BA2.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(1).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA2.BASECOLORID = 2 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA3 "
                    StrSql = StrSql + "ON BA3.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(2).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA3.BASECOLORID = 3 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA4 "
                    StrSql = StrSql + "ON BA4.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(3).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA4.BASECOLORID = 4 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA5 "
                    StrSql = StrSql + "ON BA5.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(4).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA5.BASECOLORID = 5 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA6 "
                    StrSql = StrSql + "ON BA6.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(5).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA6.BASECOLORID = 6 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA7 "
                    StrSql = StrSql + "ON BA7.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(6).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA7.BASECOLORID = 7 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA8 "
                    StrSql = StrSql + "ON BA8.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(7).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA8.BASECOLORID = 8 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA9 "
                    StrSql = StrSql + "ON BA9.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(8).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA9.BASECOLORID = 9 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA10 "
                    StrSql = StrSql + "ON BA10.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(9).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA10.BASECOLORID = 10 "
                    StrSql = StrSql + "LEFT OUTER JOIN BASECOLORARCH BA11 "
                    StrSql = StrSql + "ON BA11.EFFDATE = TO_DATE('" + ds.Tables(0).Rows(10).Item("DATECOL").ToString() + "','MM/DD/YYYY')  "
                    StrSql = StrSql + "AND BA11.BASECOLORID = 11"
                    'Bug#379# end
                    'StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "' "
                    StrSql = StrSql + "WHERE USERID=" + UserId.ToString() + " "

                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                End If
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetColorPrefDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Bemis"
        Public Function GetStatusForSister(ByVal Schema As String, ByVal CaseId As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil()
            Dim CaseIds As String = String.Empty
            Dim con As String = ""
            Dim EconConnection As String = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try
                If Schema = "E1" Then
                    con = EconConnection
                End If
                StrSql = "SELECT CASEID FROM STATUSUPDATE WHERE "
                'StrSql = StrSql + "CASEID = " + CaseId + " AND UPPER(USERNAME)='" + userName.ToUpper() + "' AND UPPER(STATUS)='SISTER CASE' ORDER BY DATED ASC"
                StrSql = StrSql + "CASEID = " + CaseId + " AND USERID=" + UserId.ToString() + " AND UPPER(STATUS)='SISTER CASE' ORDER BY DATED ASC"

                Dts = odbUtil.FillDataSet(StrSql, con)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetStatusDetailsByID:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetModuleType(ByVal UserName As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT MODELTID FROM USERS  "
                StrSql = StrSql + "INNER JOIN LICENSEMASTER "
                StrSql = StrSql + "ON USERS.LICENSEID=LICENSEMASTER.LICENSEID "
                StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UserName.ToUpper().ToString() + "' "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetModuleType:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPCaseGrpDetailsBem(ByVal UserID As String, ByVal keyWord As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                'CaseIds = GetPropCaseStatus(UserID)

                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "
                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "
                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "
                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " "
                StrSql = StrSql + "AND NVL(PC.STATUSID,0) NOT IN(3,4,6) "
                StrSql = StrSql + " ) "
                StrSql = StrSql + "WHERE UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPropCasesById(ByVal UserId As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND CASEID= " + CaseId + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3,4) "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCasesById:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetGroupCaseDet(ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim strSQL2 As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim cnt As Integer = 0
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dts = objGetData.GetGroupIDByUSer(UserID)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = objGetData.GetGroupCasesByUSer(Dts.Tables(0).Rows(i).Item("GROUPID").ToString())
                        If ds.Tables(0).Rows.Count > 0 Then
                            For j = 0 To ds.Tables(0).Rows.Count - 1
                                If j = 0 Then
                                    CaseIDs = ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + " " + ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = "0"
                        End If
                        If cnt = 0 Then
                            cnt += 1
                            'strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' || ' ,Cases:" + CaseIDs + "' AS GROUPDES,'" + CaseIDs + "' AS CASEIDS FROM DUAL "
                            strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '|| '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1, " '  FROM DUAL "
                            strSQL = strSQL + " " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#')) || '   '|| (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#'))  AS GROUPDES1 FROM DUAL "

                        Else
                            cnt += 1
                            strSQL = strSQL + "UNION ALL SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").Replace("'", "''").ToString() + "' ||  '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' || '   '||  '" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "' AS CDES1, " ' FROM DUAL "
                            strSQL = strSQL + " " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des1").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#')) || '   '|| (REPLACE(replace('" + Dts.Tables(0).Rows(i).Item("Des2").ToString().Replace("'", "''") + "','''','##'),Chr(34) ,'$#'))  AS GROUPDES1 FROM DUAL "

                        End If
                    Next
                    strSQL = "SELECT * FROM (" + strSQL + ") DUAL "
                End If
                strSQL2 = "SELECT 0 GROUPID,'' AS GROUPNAME,'All Groups and All Cases'  AS GROUPDES,'' AS CASEIDS,'' AS DES1,'' AS DES2,'' AS CDES1,'All Groups and All Cases'  AS GROUPDES1 FROM DUAL "
                If strSQL <> "" Then
                    strSQL2 = strSQL2 + " UNION ALL " + strSQL
                    strSQL2 = "SELECT GROUPID,GROUPNAME,GROUPDES,CASEIDS,DES1,DES2,CDES1,GROUPDES1 FROM (" + strSQL2 + " )ORDER BY UPPER(DES1),UPPER(DES2) "
                    DtRes = odbUtil.FillDataSet(strSQL2, MyConnectionString)
                Else
                    strSQL2 = strSQL2 + ""
                    DtRes = odbUtil.FillDataSet(strSQL2, MyConnectionString)
                End If
                Return DtRes
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
          Public Function GetApprovedCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1  "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + "FROM PERMISSIONSCASES "

                StrSql = StrSql + "INNER JOIN USERS "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "

                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID=3) "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetAppCasesByLicense(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID, CASEDE1, CASEDE2, CASEDE3,CASEDE,CASEDES, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1  "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID,  'Select Case' CASEDE1, ''CASEDE2, ''CASEDE3,'Select Case' CASEDE,'Select Case' CASEDES, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "

                StrSql = StrSql + "SELECT DISTINCT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,(CASEDE1||'  '||CASEDE2)CASEDES, "
               StrSql = StrSql + "MS.STATUS,PERMISSIONSCASES.STATUSID ,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID, (REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "

                StrSql = StrSql + "AND PERMISSIONSCASES.STATUSID IN(3,6)) "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPropCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                'CaseIds = GetPropCaseStatus(UserId)

                StrSql = "SELECT  CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1  "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID,'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "

                StrSql = StrSql + "UNION ALL "


               StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3) "

                'StrSql = StrSql + "UNION ALL "
                'StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                'StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE CaseId in(" + CaseIds + ") "
                ''StrSql = StrSql + "AND UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                'StrSql = StrSql + "AND PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + ") "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPropCaseStatus(ByVal UserId As String) As String
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Dim ds As New DataSet()
            Dim i As Integer = 0
            Dim cnt As Integer = 0
            Try
                StrSql = StrSql + "SELECT CASEID "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "WHERE STATUSID=4 AND UPPER(USERNAME)='" + UserName.ToUpper() + "' "
                StrSql = StrSql + "WHERE STATUSID=4 AND USERID=" + UserId.ToString() + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = GetPropDisAppStatus(UserId, Dts.Tables(0).Rows(i).Item("CaseId").ToString())
                        If ds.Tables(0).Rows.Count = 0 Then
                            If cnt = 0 Then
                                CaseIds = Dts.Tables(0).Rows(0).Item("CaseId").ToString()
                            Else
                                CaseIds = CaseIds + "," + Dts.Tables(0).Rows(i).Item("CaseId").ToString()
                            End If
                            cnt += 1
                        End If
                    Next

                Else
                    CaseIds = "0"
                End If
                Return CaseIds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return CaseIds
            End Try
        End Function
        Public Function GetPropDisAppStatus(ByVal UserId As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim CaseIds As String = ""
            Try
                StrSql = StrSql + "SELECT * "
                StrSql = StrSql + "FROM STATUSUPDATE "
                StrSql = StrSql + "WHERE USERID=" + UserId.ToString() + " AND CASEID=" + CaseId.ToString() + " AND UPPER(STATUS)='APPROVED' "
                'StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UserName.ToUpper().ToString() + "' AND CASEID=" + CaseId.ToString() + " AND UPPER(STATUS)='APPROVED' "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                If Dts.Tables(0).Rows.Count > 0 Then

                Else
                    CaseIds = "0"
                End If
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetPropCasesByLicense(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim StrSqlN As String = String.Empty
            Dim CaseIds As String = ""

            Dim ds As New DataSet()
            Dim dsUsers As New DataSet()
            Dim i As Integer = 0
            Dim cnt As Integer = 0
            Dim j As Integer = 0

            Try
                'CaseIds = GetPropLicCaseStatus(UserName)

                StrSql = "SELECT  CASEID, CASEDE1, CASEDE2, CASEDE3,CASEDE,CASEDES, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1  "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID,  'Select Case' CASEDE1, ''CASEDE2, ''CASEDE3,'Select Case' CASEDE,'Select Case' CASEDES, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID, 'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
                StrSql = StrSql + "SELECT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,(CASEDE1||'  '||CASEDE2)CASEDES, "
                StrSql = StrSql + "MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1  "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                StrSql = StrSql + "INNER JOIN USERS "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.USERID=" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(PERMISSIONSCASES.STATUSID,0) NOT IN(3) "
                StrSql = StrSql + ") "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetStatusDetailsByID(ByVal CaseId As String, ByVal UserID As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil()
            Dim CaseIds As String = String.Empty
            Try
                StrSql = "SELECT CASEID,STATUS,DATED,U2.USERNAME ACTIONBY,COMMENTS FROM STATUSUPDATE  "
                StrSql = StrSql + "INNER JOIN ECON.USERS ON USERS.USERID=STATUSUPDATE.USERID  "
                StrSql = StrSql + "INNER JOIN ECON.USERS U2 ON U2.USERID=STATUSUPDATE.ACTIONBY  WHERE "
                StrSql = StrSql + "CASEID = " + CaseId + " AND STATUSUPDATE.USERID=" + UserID.ToString() + " ORDER BY DATED ASC "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetStatusDetailsByID:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetGrpStatusDetailsByID(ByVal CaseId As String, ByVal UserId As String) As DataSet
            Dim Dts As New DataSet()
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil()
            Dim CaseIds As String = String.Empty
            Try
                StrSql = "SELECT CASEID,STATUS,DATED,USERS.USERNAME ACTIONBY,COMMENTS FROM STATUSUPDATE INNER JOIN ECON.USERS ON USERS.USERID=STATUSUPDATE.ACTIONBY WHERE "
                'StrSql = StrSql + "CASEID = " + CaseId + " AND UPPER(USERNAME)='" + UserName.ToUpper() + "' "
                StrSql = StrSql + "CASEID = " + CaseId + " AND USERID=" + UserId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetStatusDetailsByID:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetPermissionStatus(ByVal CaseId As Integer, ByVal UserId As String) As DataSet
            Try
                Dim Dts As New DataSet()
                Dim odbUtil As New DBUtil()
                Dim StrSql As String = ""
                StrSql = ""
                StrSql = "SELECT CASEID,STATUS,DATED,USERS.USERNAME ACTIONBY,COMMENTS FROM STATUSUPDATE INNER JOIN ECON.USERS ON USERS.USERID=STATUSUPDATE.ACTIONBY "
                StrSql = StrSql + "WHERE CASEID=" + CaseId.ToString() + " AND UPPER(ACTIONBY)=" + UserId.ToString() + " ORDER BY DATED ASC "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1Data:GetPermissionStatus:" + ex.Message.ToString())
            End Try
        End Function
        Public Function GetGroupPCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String, ByVal groupID As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID, CASEDES,CASEDE1, CASEDE2,CASEDE, STATUS,STATUSID,CaseOwner,CaseOwnerID,CASEDES1 "
                StrSql = StrSql + "FROM "
                StrSql = StrSql + "(SELECT 0 CASEID, 'Select Case' CASEDES, 'Select Case' CASEDE1, ''CASEDE2, 'Select Case' CASEDE, '' STATUS,0 STATUSID,'None'  CaseOwner,0 CaseOwnerID, 'Select Case' CASEDES1 "
                StrSql = StrSql + "FROM DUAL "
                StrSql = StrSql + "UNION ALL "
               StrSql = StrSql + "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE,MS.STATUS,PERMISSIONSCASES.STATUSID,USERS.USERNAME CaseOwner,USERS.USERID CaseOwnerID,(REPLACE(replace(CASEDE1,'''','##'),Chr(34) ,'$#')||' '||REPLACE(replace(CASEDE2,'''','##'),Chr(34) ,'$#'))CASEDES1 "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID=PERMISSIONSCASES.USERID "
                StrSql = StrSql + "LEFT OUTER JOIN MODSTATUS MS ON MS.STATUSID=PERMISSIONSCASES.STATUSID "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE PERMISSIONSCASES.USERID =" + UserId.ToString() + " "

                StrSql = StrSql + "AND CASEID IN(SELECT CASEID FROM ECON.GROUPCASES WHERE GROUPID=" + groupID + " )) "
                StrSql = StrSql + "WHERE NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetUserCompanyUsersBem(ByVal UserName As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT USERID,USERNAME FROM (  "

                StrSql = StrSql + "SELECT  0 USERID,'Select User' USERNAME FROM DUAL  "
                StrSql = StrSql + "UNION ALL  "
                StrSql = StrSql + "SELECT  USERS.USERID,  "
                StrSql = StrSql + "USERS.USERNAME "
                StrSql = StrSql + "FROM USERS "
                StrSql = StrSql + "INNER JOIN USERPERMISSIONS "
                StrSql = StrSql + "ON USERPERMISSIONS.USERID= USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES "
                StrSql = StrSql + "ON SERVICES.SERVICEID = USERPERMISSIONS.SERVICEID "
                StrSql = StrSql + "WHERE USERS.LICENSEID=(SELECT LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper.ToString() + "') "
                StrSql = StrSql + "AND SERVICES.SERVICEDE IN ('ECON1','ECON2','SUSTAIN1','SUSTAIN2') "
                StrSql = StrSql + "AND UPPER(USERPERMISSIONS.USERROLE)='READWRITE' "
                StrSql = StrSql + "AND ISIADMINLICUSR='N' "
                StrSql = StrSql + "GROUP BY USERS.USERID,USERS.USERNAME) "
                StrSql = StrSql + "ORDER BY USERNAME "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetUserCompanyUsersBem:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Barrier Grade"
        Public Function GetGradesVal(ByVal GRADEID As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty

            Try
                StrSql = "SELECT GRADE.GRADEID,GRADE.GRADENAME FROM GRADE WHERE GRADEID =" + GRADEID.ToString()
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetGradesVal:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetAllGradesVal(ByVal GRADEID As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty

            Try
                StrSql = "SELECT GRADE.GRADEID,GRADE.GRADENAME FROM GRADE "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAllGradesVal:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetGrades(ByVal MatId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty

            Try
                If MatId = "0" Then
                    StrSql = "SELECT GRADE.GRADEID,GRADE.GRADENAME,0 SG,0 WEIGHT FROM GRADE JOIN MATGRADE ON GRADE.GRADEID=MATGRADE.GRADEID AND MATID =" + MatId.ToString()
                Else
                    StrSql = "SELECT  0 GRADEID, 'Nothing Selected' GRADENAME,0 SG,0 WEIGHT FROM DUAL UNION ALL SELECT GRADE.GRADEID,GRADE.GRADENAME,MAT.SG,GRADE.WEIGHT FROM GRADE "
                    StrSql = StrSql + "INNER JOIN MATGRADE ON GRADE.GRADEID=MATGRADE.GRADEID AND MATID =" + MatId.ToString()
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT  "
                    StrSql = StrSql + "ON MAT.MATID=MATGRADE.MATID "

                End If

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetGrades:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetMatGrades(ByVal MatId As Integer, ByVal GradeId As Integer) As Integer
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty

            Try
                StrSql = "SELECT GRADE.GRADEID,GRADE.GRADENAME,MAT.SG,GRADE.WEIGHT FROM GRADE "
                StrSql = StrSql + "INNER JOIN MATGRADE ON GRADE.GRADEID=MATGRADE.GRADEID AND MATGRADE.MATID =" + MatId.ToString() + " AND MATGRADE.GRADEID=" + GradeId.ToString() + " "
                StrSql = StrSql + "INNER JOIN MATERIALS MAT  "
                StrSql = StrSql + "ON MAT.MATID=MATGRADE.MATID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                If Dts.Tables(0).Rows.Count > 0 Then
                    Return GradeId
                Else
                    StrSql = "SELECT GRADE.GRADEID FROM MATGRADE  "
                    StrSql = StrSql + "INNER JOIN GRADE "
                    StrSql = StrSql + "ON GRADE.GRADEID=MATGRADE.GRADEID "
                    StrSql = StrSql + "WHERE MATGRADE.MATID= " + MatId.ToString() + " "
                    StrSql = StrSql + "AND GRADE.ISDEFAULT='Y' "
                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                    If Dts.Tables(0).Rows.Count > 0 Then
                        Return CInt(Dts.Tables(0).Rows(0).Item("GRADEID"))
                    End If
                End If

            Catch ex As Exception
            End Try
        End Function
        Public Function GetExtrusionDetailsBarrD(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  MAT.CASEID,  "
                StrSql = StrSql + "MAT.M1, "
                StrSql = StrSql + "MAT.M2, "
                StrSql = StrSql + "MAT.M3, "
                StrSql = StrSql + "MAT.M4, "
                StrSql = StrSql + "MAT.M5, "
                StrSql = StrSql + "MAT.M6, "
                StrSql = StrSql + "MAT.M7, "
                StrSql = StrSql + "MAT.M8, "
                StrSql = StrSql + "MAT.M9, "
                StrSql = StrSql + "MAT.M10, "
                StrSql = StrSql + "NVL(GRADE1,0) GRADE1, "
                StrSql = StrSql + "NVL(GRADE2,0) GRADE2, "
                StrSql = StrSql + "NVL(GRADE3,0) GRADE3, "
                StrSql = StrSql + "NVL(GRADE4,0) GRADE4, "
                StrSql = StrSql + "NVL(GRADE5,0) GRADE5, "
                StrSql = StrSql + "NVL(GRADE6,0) GRADE6, "
                StrSql = StrSql + "NVL(GRADE7,0) GRADE7, "
                StrSql = StrSql + "NVL(GRADE8,0) GRADE8, "
                StrSql = StrSql + "NVL(GRADE9,0) GRADE9, "
                StrSql = StrSql + "NVL(GRADE10,0) GRADE10 "
                StrSql = StrSql + "FROM MATERIALINPUT MAT "
                StrSql = StrSql + "INNER JOIN BARRIERINPUT BI "
                StrSql = StrSql + "ON MAT.CASEID=BI.CASEID "
                StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetailsBarrD:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetMinMaxBarrierTemp() As DataSet
            Dim StrSql1 As String
            Dim Ds As DataSet
            Dim odbUtil As New DBUtil()
            Try
                StrSql1 = "select max(TEMPVAL) MAXVAL,min(TEMPVAL) MINVAL from BARRIERTEMP"
                Ds = odbUtil.FillDataSet(StrSql1, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMinMaxBarrierTemp:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function
        Public Function GetMinMaxBarrierHumidity() As DataSet
            Dim StrSql1 As String
            Dim Ds As DataSet
            Dim odbUtil As New DBUtil() '
            Try
                StrSql1 = "select max(RHVALUE) MAXVAL,min(RHVALUE) MINVAL from BARRIERH"
                Ds = odbUtil.FillDataSet(StrSql1, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMinMaxBarrierHumidity:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function
        Public Function GetExtrusionDetailsBarrP(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim dseffdatefrm As New DataSet()
            Try
                dseffdatefrm = GetEffdateFrm(CaseId)

                If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                    StrSql = "SELECT  MAT.CASEID,  "
                    StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY')AS EDATE, "
                    StrSql = StrSql + "MAT.M1, "
                    StrSql = StrSql + "MAT.M2, "
                    StrSql = StrSql + "MAT.M3, "
                    StrSql = StrSql + "MAT.M4, "
                    StrSql = StrSql + "MAT.M5, "
                    StrSql = StrSql + "MAT.M6, "
                    StrSql = StrSql + "MAT.M7, "
                    StrSql = StrSql + "MAT.M8, "
                    StrSql = StrSql + "MAT.M9, "
                    StrSql = StrSql + "MAT.M10, "
                    StrSql = StrSql + "(MAT.T1*PREF.CONVTHICK) AS THICK1, "
                    StrSql = StrSql + "(MAT.T2*PREF.CONVTHICK) AS THICK2, "
                    StrSql = StrSql + "(MAT.T3*PREF.CONVTHICK) AS THICK3, "
                    StrSql = StrSql + "(MAT.T4*PREF.CONVTHICK) AS THICK4, "
                    StrSql = StrSql + "(MAT.T5*PREF.CONVTHICK) AS THICK5, "
                    StrSql = StrSql + "(MAT.T6*PREF.CONVTHICK) AS THICK6, "
                    StrSql = StrSql + "(MAT.T7*PREF.CONVTHICK) AS THICK7, "
                    StrSql = StrSql + "(MAT.T8*PREF.CONVTHICK) AS THICK8, "
                    StrSql = StrSql + "(MAT.T9*PREF.CONVTHICK) AS THICK9, "
                    StrSql = StrSql + "(MAT.T10*PREF.CONVTHICK) AS THICK10, "
                    StrSql = StrSql + "(MAT.S1/PREF.CONVWT*PREF.CURRAVG) AS PRP1, "
                    StrSql = StrSql + "(MAT.S2/PREF.CONVWT*PREF.CURRAVG) AS PRP2, "
                    StrSql = StrSql + "(MAT.S3/PREF.CONVWT*PREF.CURRAVG) AS PRP3, "
                    StrSql = StrSql + "(MAT.S4/PREF.CONVWT*PREF.CURRAVG) AS PRP4, "
                    StrSql = StrSql + "(MAT.S5/PREF.CONVWT*PREF.CURRAVG) AS PRP5, "
                    StrSql = StrSql + "(MAT.S6/PREF.CONVWT*PREF.CURRAVG) AS PRP6, "
                    StrSql = StrSql + "(MAT.S7/PREF.CONVWT*PREF.CURRAVG) AS PRP7, "
                    StrSql = StrSql + "(MAT.S8/PREF.CONVWT*PREF.CURRAVG) AS PRP8, "
                    StrSql = StrSql + "(MAT.S9/PREF.CONVWT*PREF.CURRAVG) AS PRP9, "
                    StrSql = StrSql + "(MAT.S10/PREF.CONVWT*PREF.CURRAVG) AS PRP10, "
                    StrSql = StrSql + "MAT.R1, "
                    StrSql = StrSql + "MAT.R2, "
                    StrSql = StrSql + "MAT.R3, "
                    StrSql = StrSql + "MAT.R4, "
                    StrSql = StrSql + "MAT.R5, "
                    StrSql = StrSql + "MAT.R6, "
                    StrSql = StrSql + "MAT.R7, "
                    StrSql = StrSql + "MAT.R8, "
                    StrSql = StrSql + "MAT.R9, "
                    StrSql = StrSql + "MAT.R10, "
                    StrSql = StrSql + "MAT.E1, "
                    StrSql = StrSql + "MAT.E2, "
                    StrSql = StrSql + "MAT.E3, "
                    StrSql = StrSql + "MAT.E4, "
                    StrSql = StrSql + "MAT.E5, "
                    StrSql = StrSql + "MAT.E6, "
                    StrSql = StrSql + "MAT.E7, "
                    StrSql = StrSql + "MAT.E8, "
                    StrSql = StrSql + "MAT.E9, "
                    StrSql = StrSql + "MAT.E10, "
                    StrSql = StrSql + "MAT.SG1 AS SGP1, "
                    StrSql = StrSql + "MAT.SG2 AS SGP2, "
                    StrSql = StrSql + "MAT.SG3 AS SGP3, "
                    StrSql = StrSql + "MAT.SG4 AS SGP4, "
                    StrSql = StrSql + "MAT.SG5 AS SGP5, "
                    StrSql = StrSql + "MAT.SG6 AS SGP6, "
                    StrSql = StrSql + "MAT.SG7 AS SGP7, "
                    StrSql = StrSql + "MAT.SG8 AS SGP8, "
                    StrSql = StrSql + "MAT.SG9 AS SGP9, "
                    StrSql = StrSql + "MAT.SG10 AS SGP10, "
                    StrSql = StrSql + "MAT.D1, "
                    StrSql = StrSql + "MAT.D2, "
                    StrSql = StrSql + "MAT.D3, "
                    StrSql = StrSql + "MAT.D4, "
                    StrSql = StrSql + "MAT.D5, "
                    StrSql = StrSql + "MAT.D6, "
                    StrSql = StrSql + "MAT.D7, "
                    StrSql = StrSql + "MAT.D8, "
                    StrSql = StrSql + "MAT.D9, "
                    StrSql = StrSql + "MAT.D10, "
                    StrSql = StrSql + "MAT.EFFDATE EFFDATEB, "
                    StrSql = StrSql + "MAT.PLATE, "
                    StrSql = StrSql + "MAT.DISCMATYN, "
                    StrSql = StrSql + "MATDESC.DISID1, "
                    StrSql = StrSql + "MATDESC.DISID2, "
                    StrSql = StrSql + "MATDESC.DISID3, "
                    StrSql = StrSql + "MATDESC.DISW1* PREF.CONVWT AS DISW1, "
                    StrSql = StrSql + "MATDESC.DISW2* PREF.CONVWT AS DISW2, "
                    StrSql = StrSql + "MATDESC.DISW3* PREF.CONVWT AS DISW3, "
                    StrSql = StrSql + "MATDESC.DISP1* PREF.CURR AS DISP1, "
                    StrSql = StrSql + "MATDESC.DISP2* PREF.CURR AS DISP2, "
                    StrSql = StrSql + "MATDESC.DISP3* PREF.CURR AS DISP3, "
                    StrSql = StrSql + "PREF.TITLE1, "
                    StrSql = StrSql + "PREF.TITLE3, "
                    StrSql = StrSql + "PREF.TITLE2, "
                    StrSql = StrSql + "PREF.TITLE4, "
                    StrSql = StrSql + "PREF.TITLE5, "
                    StrSql = StrSql + "PREF.TITLE6, "
                    StrSql = StrSql + "PREF.TITLE7, "
                    StrSql = StrSql + "PREF.TITLE8, "
                    StrSql = StrSql + "PREF.TITLE9, "
                    StrSql = StrSql + "PREF.TITLE10, "
                    StrSql = StrSql + "PREF.TITLE11, "
                    StrSql = StrSql + "PREF.TITLE12, "
                    StrSql = StrSql + "PREF.UNITS, "
                    StrSql = StrSql + "PREF.CONVAREA, "
                    StrSql = StrSql + "PREF.CONVTHICK, "
                    StrSql = StrSql + "PREF.TITLE19, "
                    StrSql = StrSql + "PREF.TITLE20, "
                    StrSql = StrSql + "PREF.CONVWT, "
                    StrSql = StrSql + "PREF.CURR, "
                    StrSql = StrSql + "OTR1, "
                    StrSql = StrSql + "OTR2, "
                    StrSql = StrSql + "OTR3, "
                    StrSql = StrSql + "OTR4 , "
                    StrSql = StrSql + "OTR5, "
                    StrSql = StrSql + "OTR6 , "
                    StrSql = StrSql + "OTR7, "
                    StrSql = StrSql + "OTR8, "
                    StrSql = StrSql + "OTR9, "
                    StrSql = StrSql + "OTR10, "
                    StrSql = StrSql + "WVTR1, "
                    StrSql = StrSql + "WVTR2, "
                    StrSql = StrSql + "WVTR3, "
                    StrSql = StrSql + "WVTR4, "
                    StrSql = StrSql + "WVTR5, "
                    StrSql = StrSql + "WVTR6, "
                    StrSql = StrSql + "WVTR7, "
                    StrSql = StrSql + "WVTR8, "
                    StrSql = StrSql + "WVTR9, "
                    StrSql = StrSql + "WVTR10, "
                    StrSql = StrSql + "NVL(GRADE1,0) GRADE1, "
                    StrSql = StrSql + "NVL(GRADE2,0) GRADE2, "
                    StrSql = StrSql + "NVL(GRADE3,0) GRADE3, "
                    StrSql = StrSql + "NVL(GRADE4,0) GRADE4, "
                    StrSql = StrSql + "NVL(GRADE5,0) GRADE5, "
                    StrSql = StrSql + "NVL(GRADE6,0) GRADE6, "
                    StrSql = StrSql + "NVL(GRADE7,0) GRADE7, "
                    StrSql = StrSql + "NVL(GRADE8,0) GRADE8, "
                    StrSql = StrSql + "NVL(GRADE9,0) GRADE9, "
                    StrSql = StrSql + "NVL(GRADE10,0) GRADE10, "
                    StrSql = StrSql + "MAT.OTRTEMP, "
                    StrSql = StrSql + "MAT.WVTRTEMP, "
                    StrSql = StrSql + "MAT.OTRRH, "
                    StrSql = StrSql + "MAT.WVTRRH "
                    StrSql = StrSql + "FROM MATERIALINPUT MAT "
                    StrSql = StrSql + "INNER JOIN BARRIERINPUT BI "
                    StrSql = StrSql + "ON MAT.CASEID=BI.CASEID "
                    StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                    StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                    StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                    StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "

                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Else
                    StrSql = "SELECT  MAT.CASEID,  "
                    StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY')AS EDATE, "
                    StrSql = StrSql + "MAT.M1, "
                    StrSql = StrSql + "MAT.M2, "
                    StrSql = StrSql + "MAT.M3, "
                    StrSql = StrSql + "MAT.M4, "
                    StrSql = StrSql + "MAT.M5, "
                    StrSql = StrSql + "MAT.M6, "
                    StrSql = StrSql + "MAT.M7, "
                    StrSql = StrSql + "MAT.M8, "
                    StrSql = StrSql + "MAT.M9, "
                    StrSql = StrSql + "MAT.M10, "
                    StrSql = StrSql + "(MAT.T1*PREF.CONVTHICK) AS THICK1, "
                    StrSql = StrSql + "(MAT.T2*PREF.CONVTHICK) AS THICK2, "
                    StrSql = StrSql + "(MAT.T3*PREF.CONVTHICK) AS THICK3, "
                    StrSql = StrSql + "(MAT.T4*PREF.CONVTHICK) AS THICK4, "
                    StrSql = StrSql + "(MAT.T5*PREF.CONVTHICK) AS THICK5, "
                    StrSql = StrSql + "(MAT.T6*PREF.CONVTHICK) AS THICK6, "
                    StrSql = StrSql + "(MAT.T7*PREF.CONVTHICK) AS THICK7, "
                    StrSql = StrSql + "(MAT.T8*PREF.CONVTHICK) AS THICK8, "
                    StrSql = StrSql + "(MAT.T9*PREF.CONVTHICK) AS THICK9, "
                    StrSql = StrSql + "(MAT.T10*PREF.CONVTHICK) AS THICK10, "
                    StrSql = StrSql + "(MAT.S1/PREF.CONVWT*PREF.CURR) AS PRP1, "
                    StrSql = StrSql + "(MAT.S2/PREF.CONVWT*PREF.CURR) AS PRP2, "
                    StrSql = StrSql + "(MAT.S3/PREF.CONVWT*PREF.CURR) AS PRP3, "
                    StrSql = StrSql + "(MAT.S4/PREF.CONVWT*PREF.CURR) AS PRP4, "
                    StrSql = StrSql + "(MAT.S5/PREF.CONVWT*PREF.CURR) AS PRP5, "
                    StrSql = StrSql + "(MAT.S6/PREF.CONVWT*PREF.CURR) AS PRP6, "
                    StrSql = StrSql + "(MAT.S7/PREF.CONVWT*PREF.CURR) AS PRP7, "
                    StrSql = StrSql + "(MAT.S8/PREF.CONVWT*PREF.CURR) AS PRP8, "
                    StrSql = StrSql + "(MAT.S9/PREF.CONVWT*PREF.CURR) AS PRP9, "
                    StrSql = StrSql + "(MAT.S10/PREF.CONVWT*PREF.CURR) AS PRP10, "
                    StrSql = StrSql + "MAT.R1, "
                    StrSql = StrSql + "MAT.R2, "
                    StrSql = StrSql + "MAT.R3, "
                    StrSql = StrSql + "MAT.R4, "
                    StrSql = StrSql + "MAT.R5, "
                    StrSql = StrSql + "MAT.R6, "
                    StrSql = StrSql + "MAT.R7, "
                    StrSql = StrSql + "MAT.R8, "
                    StrSql = StrSql + "MAT.R9, "
                    StrSql = StrSql + "MAT.R10, "
                    StrSql = StrSql + "MAT.E1, "
                    StrSql = StrSql + "MAT.E2, "
                    StrSql = StrSql + "MAT.E3, "
                    StrSql = StrSql + "MAT.E4, "
                    StrSql = StrSql + "MAT.E5, "
                    StrSql = StrSql + "MAT.E6, "
                    StrSql = StrSql + "MAT.E7, "
                    StrSql = StrSql + "MAT.E8, "
                    StrSql = StrSql + "MAT.E9, "
                    StrSql = StrSql + "MAT.E10, "
                    StrSql = StrSql + "MAT.SG1 AS SGP1, "
                    StrSql = StrSql + "MAT.SG2 AS SGP2, "
                    StrSql = StrSql + "MAT.SG3 AS SGP3, "
                    StrSql = StrSql + "MAT.SG4 AS SGP4, "
                    StrSql = StrSql + "MAT.SG5 AS SGP5, "
                    StrSql = StrSql + "MAT.SG6 AS SGP6, "
                    StrSql = StrSql + "MAT.SG7 AS SGP7, "
                    StrSql = StrSql + "MAT.SG8 AS SGP8, "
                    StrSql = StrSql + "MAT.SG9 AS SGP9, "
                    StrSql = StrSql + "MAT.SG10 AS SGP10, "
                    StrSql = StrSql + "MAT.D1, "
                    StrSql = StrSql + "MAT.D2, "
                    StrSql = StrSql + "MAT.D3, "
                    StrSql = StrSql + "MAT.D4, "
                    StrSql = StrSql + "MAT.D5, "
                    StrSql = StrSql + "MAT.D6, "
                    StrSql = StrSql + "MAT.D7, "
                    StrSql = StrSql + "MAT.D8, "
                    StrSql = StrSql + "MAT.D9, "
                    StrSql = StrSql + "MAT.D10, "
                    StrSql = StrSql + "MAT.EFFDATE EFFDATEB, "
                    StrSql = StrSql + "MAT.PLATE, "
                    StrSql = StrSql + "MAT.DISCMATYN, "
                    StrSql = StrSql + "MATDESC.DISID1, "
                    StrSql = StrSql + "MATDESC.DISID2, "
                    StrSql = StrSql + "MATDESC.DISID3, "
                    StrSql = StrSql + "MATDESC.DISW1* PREF.CONVWT AS DISW1, "
                    StrSql = StrSql + "MATDESC.DISW2* PREF.CONVWT AS DISW2, "
                    StrSql = StrSql + "MATDESC.DISW3* PREF.CONVWT AS DISW3, "
                    StrSql = StrSql + "MATDESC.DISP1* PREF.CURR AS DISP1, "
                    StrSql = StrSql + "MATDESC.DISP2* PREF.CURR AS DISP2, "
                    StrSql = StrSql + "MATDESC.DISP3* PREF.CURR AS DISP3, "
                    StrSql = StrSql + "PREF.TITLE1, "
                    StrSql = StrSql + "PREF.TITLE3, "
                    StrSql = StrSql + "PREF.TITLE2, "
                    StrSql = StrSql + "PREF.TITLE4, "
                    StrSql = StrSql + "PREF.TITLE5, "
                    StrSql = StrSql + "PREF.TITLE6, "
                    StrSql = StrSql + "PREF.TITLE7, "
                    StrSql = StrSql + "PREF.TITLE8, "
                    StrSql = StrSql + "PREF.TITLE9, "
                    StrSql = StrSql + "PREF.TITLE10, "
                    StrSql = StrSql + "PREF.TITLE11, "
                    StrSql = StrSql + "PREF.TITLE12, "
                    StrSql = StrSql + "PREF.UNITS, "
                    StrSql = StrSql + "PREF.CONVAREA, "
                    StrSql = StrSql + "PREF.CONVTHICK, "
                    StrSql = StrSql + "PREF.TITLE19, "
                    StrSql = StrSql + "PREF.TITLE20, "
                    StrSql = StrSql + "PREF.CONVWT, "
                    StrSql = StrSql + "PREF.CURR, "
                    StrSql = StrSql + "OTR1, "
                    StrSql = StrSql + "OTR2, "
                    StrSql = StrSql + "OTR3, "
                    StrSql = StrSql + "OTR4 , "
                    StrSql = StrSql + "OTR5, "
                    StrSql = StrSql + "OTR6 , "
                    StrSql = StrSql + "OTR7, "
                    StrSql = StrSql + "OTR8, "
                    StrSql = StrSql + "OTR9, "
                    StrSql = StrSql + "OTR10, "
                    StrSql = StrSql + "WVTR1, "
                    StrSql = StrSql + "WVTR2, "
                    StrSql = StrSql + "WVTR3, "
                    StrSql = StrSql + "WVTR4, "
                    StrSql = StrSql + "WVTR5, "
                    StrSql = StrSql + "WVTR6, "
                    StrSql = StrSql + "WVTR7, "
                    StrSql = StrSql + "WVTR8, "
                    StrSql = StrSql + "WVTR9, "
                    StrSql = StrSql + "WVTR10, "
                    StrSql = StrSql + "NVL(GRADE1,0) GRADE1, "
                    StrSql = StrSql + "NVL(GRADE2,0) GRADE2, "
                    StrSql = StrSql + "NVL(GRADE3,0) GRADE3, "
                    StrSql = StrSql + "NVL(GRADE4,0) GRADE4, "
                    StrSql = StrSql + "NVL(GRADE5,0) GRADE5, "
                    StrSql = StrSql + "NVL(GRADE6,0) GRADE6, "
                    StrSql = StrSql + "NVL(GRADE7,0) GRADE7, "
                    StrSql = StrSql + "NVL(GRADE8,0) GRADE8, "
                    StrSql = StrSql + "NVL(GRADE9,0) GRADE9, "
                    StrSql = StrSql + "NVL(GRADE10,0) GRADE10, "
                    StrSql = StrSql + "MAT.OTRTEMP, "
                    StrSql = StrSql + "MAT.WVTRTEMP, "
                    StrSql = StrSql + "MAT.OTRRH, "
                    StrSql = StrSql + "MAT.WVTRRH "
                    StrSql = StrSql + "FROM MATERIALINPUT MAT "
                    StrSql = StrSql + "INNER JOIN BARRIERINPUT BI "
                    StrSql = StrSql + "ON MAT.CASEID=BI.CASEID "
                    StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                    StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                    StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                    StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "

                    Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                End If



                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetailsBarrP:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetEffdateFrm(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT TO_CHAR(EFFDATE,'mm/dd/yyyy') EFFDATE,TO_CHAR(EFFDATEFRM,'mm/dd/yyyy') EFFDATEFRM,OCOUNTRY FROM PREFERENCES WHERE CASEID='" + CaseId.ToString() + "'"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEconCountry:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetExtrusionDetailsBarrS(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Dim dseffdatefrm As New DataSet()
            Dim effdate As Date
            Dim effdatefrm As Date
            Dim oCountry As String = ""
            Try
                dseffdatefrm = GetEffDateFrm(CaseId)
                oCountry = dseffdatefrm.Tables(0).Rows(0).Item("OCOUNTRY").ToString()
                If dseffdatefrm.Tables(0).Rows(0).Item("EFFDATEFRM").ToString() <> "" Then
                    effdate = dseffdatefrm.Tables(0).Rows(0).Item("effdate").ToString()
                    effdatefrm = dseffdatefrm.Tables(0).Rows(0).Item("effdatefrm").ToString()


                    StrSql = "SELECT  MAT.CASEID,  "
                    StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY')AS EDATE, "
                    StrSql = StrSql + "(TOT.THICK*PREF.CONVTHICK)THICK, "
                    StrSql = StrSql + "(MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                    StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                    StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                    StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                    StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                    StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                    StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                    StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                    StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                    StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                    'StrSql = StrSql + "(NVL(MATA1.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS1, "
                    'StrSql = StrSql + "(NVL(MATA2.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS2, "
                    'StrSql = StrSql + "(NVL(MATA3.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS3, "
                    'StrSql = StrSql + "(NVL(MATA4.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS4, "
                    'StrSql = StrSql + "(NVL(MATA5.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS5, "
                    'StrSql = StrSql + "(NVL(MATA6.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS6, "
                    'StrSql = StrSql + "(NVL(MATA7.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS7, "
                    'StrSql = StrSql + "(NVL(MATA8.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS8, "
                    'StrSql = StrSql + "(NVL(MATA9.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS9, "
                    'StrSql = StrSql + "(NVL(MATA10.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS10, "

                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M1) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS1,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M2) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS2,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M3) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS3,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M4) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS4,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M5) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS5,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M6) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS6,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M7) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS7,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M8) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS8,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M9) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS9,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCH WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCH.MATID = MAT.M10) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS10,"

                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M1) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS1,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M1 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS1,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M2) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS2,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M2 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS2,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M3) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS3,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M3 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS3,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M4) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS4,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M4 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS4,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M5) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS5,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M5 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS5,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M6) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS6,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M6 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS6,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M7) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS7,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M7 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS7,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M8) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS8,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M8 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS8,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M9) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS9,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M9 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS9,"
                    'StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M10) ,0)/PREF.CONVWT*PREF.CURRAVG)  PRS10,"
                    StrSql = StrSql + " (NVL((SELECT SUM (PRICE) / (MONTHS_BETWEEN( TO_DATE('" + effdate + "','mm/dd/yyyy'),TO_DATE('" + effdatefrm + "','mm/dd/yyyy'))+1) FROM MATERIALSARCHNEW WHERE EFFDATE BETWEEN TO_DATE ('" + effdatefrm + "', 'mm/dd/yyyy') AND TO_DATE ('" + effdate + "', 'mm/dd/yyyy')  AND MATERIALSARCHNEW.MATID = MAT.M10 AND MATERIALSARCHNEW.COUNTRYID=" + oCountry + ") ,0)/PREF.CONVWT*PREF.CURRAVG) PRS10,"


                    StrSql = StrSql + "(MAT1.ISADJTHICK) ISADJTHICK1,  "
                    StrSql = StrSql + "(MAT2.ISADJTHICK) ISADJTHICK2,  "
                    StrSql = StrSql + "(MAT3.ISADJTHICK) ISADJTHICK3,  "
                    StrSql = StrSql + "(MAT4.ISADJTHICK) ISADJTHICK4,  "
                    StrSql = StrSql + "(MAT5.ISADJTHICK) ISADJTHICK5,  "
                    StrSql = StrSql + "(MAT6.ISADJTHICK) ISADJTHICK6,  "
                    StrSql = StrSql + "(MAT7.ISADJTHICK) ISADJTHICK7,  "
                    StrSql = StrSql + "(MAT8.ISADJTHICK) ISADJTHICK8,  "
                    StrSql = StrSql + "(MAT9.ISADJTHICK) ISADJTHICK9,  "
                    StrSql = StrSql + "(MAT10.ISADJTHICK) ISADJTHICK10,  "

                    StrSql = StrSql + "(MAT1.SG)AS SGS1, "
                    StrSql = StrSql + "(MAT2.SG)AS SGS2, "
                    StrSql = StrSql + "(MAT3.SG)AS SGS3, "
                    StrSql = StrSql + "(MAT4.SG)AS SGS4, "
                    StrSql = StrSql + "(MAT5.SG)AS SGS5, "
                    StrSql = StrSql + "(MAT6.SG)AS SGS6, "
                    StrSql = StrSql + "(MAT7.SG)AS SGS7, "
                    StrSql = StrSql + "(MAT8.SG)AS SGS8, "
                    StrSql = StrSql + "(MAT9.SG)AS SGS9, "
                    StrSql = StrSql + "(MAT10.SG)AS SGS10, "
                    StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA) AS WTPARA1, "
                    StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA) AS WTPARA2, "
                    StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA) AS WTPARA3, "
                    StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA) AS WTPARA4, "
                    StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA) AS WTPARA5, "
                    StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA) AS WTPARA6, "
                    StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA) AS WTPARA7, "
                    StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA) AS WTPARA8, "
                    StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA) AS WTPARA9, "
                    StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA) AS WTPARA10, "
                    StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)WTPERAREA, "
                    StrSql = StrSql + "TOT.DISCRETEWT * PREF.CONVWT AS DISCTOTAL, "
                    StrSql = StrSql + "TOT.DISCRETECOST, "
                    StrSql = StrSql + "MAT1.ISASSIST ASSIST1,"
                    StrSql = StrSql + "MAT2.ISASSIST ASSIST2,"
                    StrSql = StrSql + "MAT3.ISASSIST ASSIST3,"
                    StrSql = StrSql + "MAT4.ISASSIST ASSIST4,"
                    StrSql = StrSql + "MAT5.ISASSIST ASSIST5,"
                    StrSql = StrSql + "MAT6.ISASSIST ASSIST6,"
                    StrSql = StrSql + "MAT7.ISASSIST ASSIST7,"
                    StrSql = StrSql + "MAT8.ISASSIST ASSIST8,"
                    StrSql = StrSql + "MAT9.ISASSIST ASSIST9,"
                    StrSql = StrSql + "MAT10.ISASSIST ASSIST10,"
                    StrSql = StrSql + "MAT1.PAGEURL PAGEURL1,"
                    StrSql = StrSql + "MAT2.PAGEURL PAGEURL2,"
                    StrSql = StrSql + "MAT3.PAGEURL PAGEURL3,"
                    StrSql = StrSql + "MAT4.PAGEURL PAGEURL4,"
                    StrSql = StrSql + "MAT5.PAGEURL PAGEURL5,"
                    StrSql = StrSql + "MAT6.PAGEURL PAGEURL6,"
                    StrSql = StrSql + "MAT7.PAGEURL PAGEURL7,"
                    StrSql = StrSql + "MAT8.PAGEURL PAGEURL8,"
                    StrSql = StrSql + "MAT9.PAGEURL PAGEURL9,"
                    StrSql = StrSql + "MAT10.PAGEURL PAGEURL10 "
                    StrSql = StrSql + "FROM MATERIALINPUT MAT "
                    StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                    StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN TOTAL TOT "
                    StrSql = StrSql + "ON TOT.CASEID = MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                    StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                    StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "

                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA1 "
                    'StrSql = StrSql + "ON MATA1.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA1.MATID = MAT.M1 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA2 "
                    'StrSql = StrSql + "ON MATA2.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA2.MATID = MAT.M2 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA3 "
                    'StrSql = StrSql + "ON MATA3.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA3.MATID = MAT.M3 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA4 "
                    'StrSql = StrSql + "ON MATA4.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA4.MATID = MAT.M4 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA5 "
                    'StrSql = StrSql + "ON MATA5.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA5.MATID = MAT.M5 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA6 "
                    'StrSql = StrSql + "ON MATA6.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA6.MATID = MAT.M6 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA7 "
                    'StrSql = StrSql + "ON MATA7.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA7.MATID = MAT.M7 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA8 "
                    'StrSql = StrSql + "ON MATA8.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA8.MATID = MAT.M8 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA9 "
                    'StrSql = StrSql + "ON MATA9.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA9.MATID = MAT.M9 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA10 "
                    'StrSql = StrSql + "ON MATA10.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA10.MATID = MAT.M10 "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA1 "
                    StrSql = StrSql + "ON MATA1.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA1.MATID = MAT.M1 " ' AND MATA1.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA1.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA2 "
                    StrSql = StrSql + "ON MATA2.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA2.MATID = MAT.M2 " 'AND MATA2.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA2.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA3 "
                    StrSql = StrSql + "ON MATA3.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA3.MATID = MAT.M3 " 'AND MATA3.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA3.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA4 "
                    StrSql = StrSql + "ON MATA4.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA4.MATID = MAT.M4 " 'AND MATA4.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA4.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA5 "
                    StrSql = StrSql + "ON MATA5.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA5.MATID = MAT.M5 " 'AND MATA5.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA5.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA6 "
                    StrSql = StrSql + "ON MATA6.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA6.MATID = MAT.M6 " 'AND MATA6.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA6.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA7 "
                    StrSql = StrSql + "ON MATA7.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA7.MATID = MAT.M7 " 'AND MATA7.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA7.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA8 "
                    StrSql = StrSql + "ON MATA8.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA8.MATID = MAT.M8 " 'AND MATA8.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA8.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA9 "
                    StrSql = StrSql + "ON MATA9.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA9.MATID = MAT.M9 " 'AND MATA9.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA9.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA10  "
                    StrSql = StrSql + "ON MATA10.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA10.MATID = MAT.M10 " 'AND MATA10.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA10.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                    StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                    StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                    StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                    StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                    StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                    StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                    StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                    StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                    StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                    StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                    StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "
                Else
                    StrSql = "SELECT  MAT.CASEID,  "
                    StrSql = StrSql + "TO_CHAR(MAT.EFFDATE,'MON DD,YYYY')AS EDATE, "
                    StrSql = StrSql + "(TOT.THICK*PREF.CONVTHICK)THICK, "
                    StrSql = StrSql + "(MAT1.MATDE1||' '||MAT1.MATDE2)MATS1,  "
                    StrSql = StrSql + "(MAT2.MATDE1||' '||MAT2.MATDE2)MATS2, "
                    StrSql = StrSql + "(MAT3.MATDE1||' '||MAT3.MATDE2)MATS3, "
                    StrSql = StrSql + "(MAT4.MATDE1||' '||MAT4.MATDE2)MATS4, "
                    StrSql = StrSql + "(MAT5.MATDE1||' '||MAT5.MATDE2)MATS5, "
                    StrSql = StrSql + "(MAT6.MATDE1||' '||MAT6.MATDE2)MATS6, "
                    StrSql = StrSql + "(MAT7.MATDE1||' '||MAT7.MATDE2)MATS7, "
                    StrSql = StrSql + "(MAT8.MATDE1||' '||MAT8.MATDE2)MATS8, "
                    StrSql = StrSql + "(MAT9.MATDE1||' '||MAT9.MATDE2)MATS9, "
                    StrSql = StrSql + "(MAT10.MATDE1||' '||MAT10.MATDE2)MATS10, "
                    StrSql = StrSql + "(NVL(MATA1.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS1, "
                    StrSql = StrSql + "(NVL(MATA2.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS2, "
                    StrSql = StrSql + "(NVL(MATA3.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS3, "
                    StrSql = StrSql + "(NVL(MATA4.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS4, "
                    StrSql = StrSql + "(NVL(MATA5.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS5, "
                    StrSql = StrSql + "(NVL(MATA6.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS6, "
                    StrSql = StrSql + "(NVL(MATA7.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS7, "
                    StrSql = StrSql + "(NVL(MATA8.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS8, "
                    StrSql = StrSql + "(NVL(MATA9.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS9, "
                    StrSql = StrSql + "(NVL(MATA10.PRICE,0)/PREF.CONVWT*PREF.CURR)AS PRS10, "

                    StrSql = StrSql + "(MAT1.ISADJTHICK) ISADJTHICK1,  "
                    StrSql = StrSql + "(MAT2.ISADJTHICK) ISADJTHICK2,  "
                    StrSql = StrSql + "(MAT3.ISADJTHICK) ISADJTHICK3,  "
                    StrSql = StrSql + "(MAT4.ISADJTHICK) ISADJTHICK4,  "
                    StrSql = StrSql + "(MAT5.ISADJTHICK) ISADJTHICK5,  "
                    StrSql = StrSql + "(MAT6.ISADJTHICK) ISADJTHICK6,  "
                    StrSql = StrSql + "(MAT7.ISADJTHICK) ISADJTHICK7,  "
                    StrSql = StrSql + "(MAT8.ISADJTHICK) ISADJTHICK8,  "
                    StrSql = StrSql + "(MAT9.ISADJTHICK) ISADJTHICK9,  "
                    StrSql = StrSql + "(MAT10.ISADJTHICK) ISADJTHICK10,  "

                    StrSql = StrSql + "(MAT1.SG)AS SGS1, "
                    StrSql = StrSql + "(MAT2.SG)AS SGS2, "
                    StrSql = StrSql + "(MAT3.SG)AS SGS3, "
                    StrSql = StrSql + "(MAT4.SG)AS SGS4, "
                    StrSql = StrSql + "(MAT5.SG)AS SGS5, "
                    StrSql = StrSql + "(MAT6.SG)AS SGS6, "
                    StrSql = StrSql + "(MAT7.SG)AS SGS7, "
                    StrSql = StrSql + "(MAT8.SG)AS SGS8, "
                    StrSql = StrSql + "(MAT9.SG)AS SGS9, "
                    StrSql = StrSql + "(MAT10.SG)AS SGS10, "
                    StrSql = StrSql + "(MATOUT.M1*PREF.CONVWT/PREF.CONVAREA) AS WTPARA1, "
                    StrSql = StrSql + "(MATOUT.M2*PREF.CONVWT/PREF.CONVAREA) AS WTPARA2, "
                    StrSql = StrSql + "(MATOUT.M3*PREF.CONVWT/PREF.CONVAREA) AS WTPARA3, "
                    StrSql = StrSql + "(MATOUT.M4*PREF.CONVWT/PREF.CONVAREA) AS WTPARA4, "
                    StrSql = StrSql + "(MATOUT.M5*PREF.CONVWT/PREF.CONVAREA) AS WTPARA5, "
                    StrSql = StrSql + "(MATOUT.M6*PREF.CONVWT/PREF.CONVAREA) AS WTPARA6, "
                    StrSql = StrSql + "(MATOUT.M7*PREF.CONVWT/PREF.CONVAREA) AS WTPARA7, "
                    StrSql = StrSql + "(MATOUT.M8*PREF.CONVWT/PREF.CONVAREA) AS WTPARA8, "
                    StrSql = StrSql + "(MATOUT.M9*PREF.CONVWT/PREF.CONVAREA) AS WTPARA9, "
                    StrSql = StrSql + "(MATOUT.M10*PREF.CONVWT/PREF.CONVAREA) AS WTPARA10, "
                    StrSql = StrSql + "(TOT.WTPERAREA*PREF.CONVWT/PREF.CONVAREA)WTPERAREA, "
                    StrSql = StrSql + "TOT.DISCRETEWT * PREF.CONVWT AS DISCTOTAL, "
                    StrSql = StrSql + "TOT.DISCRETECOST, "
                    StrSql = StrSql + "MAT1.ISASSIST ASSIST1,"
                    StrSql = StrSql + "MAT2.ISASSIST ASSIST2,"
                    StrSql = StrSql + "MAT3.ISASSIST ASSIST3,"
                    StrSql = StrSql + "MAT4.ISASSIST ASSIST4,"
                    StrSql = StrSql + "MAT5.ISASSIST ASSIST5,"
                    StrSql = StrSql + "MAT6.ISASSIST ASSIST6,"
                    StrSql = StrSql + "MAT7.ISASSIST ASSIST7,"
                    StrSql = StrSql + "MAT8.ISASSIST ASSIST8,"
                    StrSql = StrSql + "MAT9.ISASSIST ASSIST9,"
                    StrSql = StrSql + "MAT10.ISASSIST ASSIST10,"
                    StrSql = StrSql + "MAT1.PAGEURL PAGEURL1,"
                    StrSql = StrSql + "MAT2.PAGEURL PAGEURL2,"
                    StrSql = StrSql + "MAT3.PAGEURL PAGEURL3,"
                    StrSql = StrSql + "MAT4.PAGEURL PAGEURL4,"
                    StrSql = StrSql + "MAT5.PAGEURL PAGEURL5,"
                    StrSql = StrSql + "MAT6.PAGEURL PAGEURL6,"
                    StrSql = StrSql + "MAT7.PAGEURL PAGEURL7,"
                    StrSql = StrSql + "MAT8.PAGEURL PAGEURL8,"
                    StrSql = StrSql + "MAT9.PAGEURL PAGEURL9,"
                    StrSql = StrSql + "MAT10.PAGEURL PAGEURL10 "
                    StrSql = StrSql + "FROM MATERIALINPUT MAT "
                    StrSql = StrSql + "INNER JOIN PREFERENCES PREF "
                    StrSql = StrSql + "ON PREF.CASEID=MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN TOTAL TOT "
                    StrSql = StrSql + "ON TOT.CASEID = MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALDISIN MATDESC "
                    StrSql = StrSql + "ON MATDESC.CASEID = MAT.CASEID "
                    StrSql = StrSql + "INNER JOIN MATERIALOUTPUT MATOUT "
                    StrSql = StrSql + "ON MATOUT.CASEID=MAT.CASEID "

                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA1 "
                    'StrSql = StrSql + "ON MATA1.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA1.MATID = MAT.M1 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA2 "
                    'StrSql = StrSql + "ON MATA2.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA2.MATID = MAT.M2 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA3 "
                    'StrSql = StrSql + "ON MATA3.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA3.MATID = MAT.M3 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA4 "
                    'StrSql = StrSql + "ON MATA4.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA4.MATID = MAT.M4 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA5 "
                    'StrSql = StrSql + "ON MATA5.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA5.MATID = MAT.M5 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA6 "
                    'StrSql = StrSql + "ON MATA6.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA6.MATID = MAT.M6 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA7 "
                    'StrSql = StrSql + "ON MATA7.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA7.MATID = MAT.M7 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA8 "
                    'StrSql = StrSql + "ON MATA8.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA8.MATID = MAT.M8 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA9 "
                    'StrSql = StrSql + "ON MATA9.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA9.MATID = MAT.M9 "
                    'StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCH MATA10 "
                    'StrSql = StrSql + "ON MATA10.EFFDATE = MAT.EFFDATE "
                    'StrSql = StrSql + "AND MATA10.MATID = MAT.M10 "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA1 "
                    StrSql = StrSql + "ON MATA1.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA1.MATID = MAT.M1 " ' AND MATA1.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA1.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA2 "
                    StrSql = StrSql + "ON MATA2.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA2.MATID = MAT.M2 " 'AND MATA2.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA2.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA3 "
                    StrSql = StrSql + "ON MATA3.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA3.MATID = MAT.M3 " 'AND MATA3.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA3.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA4 "
                    StrSql = StrSql + "ON MATA4.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA4.MATID = MAT.M4 " 'AND MATA4.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA4.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA5 "
                    StrSql = StrSql + "ON MATA5.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA5.MATID = MAT.M5 " 'AND MATA5.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA5.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA6 "
                    StrSql = StrSql + "ON MATA6.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA6.MATID = MAT.M6 " 'AND MATA6.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA6.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA7 "
                    StrSql = StrSql + "ON MATA7.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA7.MATID = MAT.M7 " 'AND MATA7.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA7.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA8 "
                    StrSql = StrSql + "ON MATA8.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA8.MATID = MAT.M8 " 'AND MATA8.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA8.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA9 "
                    StrSql = StrSql + "ON MATA9.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA9.MATID = MAT.M9 " 'AND MATA9.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA9.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "LEFT OUTER JOIN MATERIALSARCHNEW MATA10  "
                    StrSql = StrSql + "ON MATA10.EFFDATE = MAT.EFFDATE "
                    StrSql = StrSql + "AND MATA10.MATID = MAT.M10 " 'AND MATA10.COUNTRYID='" + cntryid.ToString() + "' "
                    StrSql = StrSql + "AND MATA10.COUNTRYID=PREF.OCOUNTRY "

                    StrSql = StrSql + "INNER JOIN MATERIALS MAT1 "
                    StrSql = StrSql + "ON MAT1.MATID = MAT.M1 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT2 "
                    StrSql = StrSql + "ON MAT2.MATID = MAT.M2 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT3 "
                    StrSql = StrSql + "ON MAT3.MATID = MAT.M3 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT4 "
                    StrSql = StrSql + "ON MAT4.MATID = MAT.M4 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT5 "
                    StrSql = StrSql + "ON MAT5.MATID = MAT.M5 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT6 "
                    StrSql = StrSql + "ON MAT6.MATID = MAT.M6 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT7 "
                    StrSql = StrSql + "ON MAT7.MATID = MAT.M7 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT8 "
                    StrSql = StrSql + "ON MAT8.MATID = MAT.M8 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT9 "
                    StrSql = StrSql + "ON MAT9.MATID = MAT.M9 "
                    StrSql = StrSql + "INNER JOIN MATERIALS MAT10 "
                    StrSql = StrSql + "ON MAT10.MATID = MAT.M10 "
                    StrSql = StrSql + "WHERE MAT.CASEID =" + CaseId.ToString() + " "
                End If
               

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetailsBarrS:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Comp Module"
        Public Function GetCompUserDetails(ByVal Id As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT USERS.USERID,  "
                StrSql = StrSql + "UPPER(USERNAME)USERNAME, "
                StrSql = StrSql + "USERNAME AS TOOLUSERNAME, "
                'Checking for License Administrator
                StrSql = StrSql + "NVL(USERS.ISIADMINLICUSR,'N')ISIADMINLICUSR,"
                StrSql = StrSql + "USERS.LICENSEID,"
                StrSql = StrSql + "SERVICES.SERVICEID,"
                StrSql = StrSql + "SERVICES.SERVICEDE, "
                StrSql = StrSql + "USERPERMISSIONS.USERROLE AS SERVIECROLE, "
                StrSql = StrSql + "USERPERMISSIONS.MAXCASECOUNT, "
                StrSql = StrSql + "(CASE WHEN NVL(USERS.ISINTERNALUSR,'N') ='Y' THEN "
                StrSql = StrSql + "'AADMIN' "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "'USER' "
                StrSql = StrSql + "END)USERROLE "
                StrSql = StrSql + "FROM ULOGIN "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON UPPER(USERS.USERNAME) = UPPER(ULOGIN.UNAME) "
                StrSql = StrSql + "AND UPPER(USERS.PASSWORD) = UPPER(ULOGIN.UPWD) "
                StrSql = StrSql + "INNER JOIN USERPERMISSIONS "
                StrSql = StrSql + "ON USERPERMISSIONS.USERID = USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES "
                StrSql = StrSql + "ON SERVICES.SERVICEID = USERPERMISSIONS.SERVICEID "
                StrSql = StrSql + "WHERE ULOGIN.ID = " + Id.ToString() + " "
                StrSql = StrSql + "AND SERVICES.SERVICEDE='CompEcon' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompUserDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetBCaseCompDetails() As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID,CASEDE1, CASEDE2,SERVICEUSER.USERID SERVICEUSERID,"
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "INNER JOIN USERS ON UPPER(USERS.USERNAME) = UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID = PERMISSIONSCASES.USERID "
                StrSql = StrSql + "INNER JOIN SERVICEUSER ON SERVICEUSER.USERID= USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES ON SERVICES.SERVICEID= SERVICEUSER.SERVICEID "
                StrSql = StrSql + "WHERE SERVICES.SERVICEDE='CompEcon' "
                StrSql = StrSql + "AND PERMISSIONSCASES.SERVICEID IS NULL "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetBCaseCompDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetServiceCompUser(ByVal UserId As String) As DataSet
            Dim Dts As DataSet
            Dim StrSql As String = String.Empty
            Dim odbUtil As New DBUtil()
            Try
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                StrSql = "SELECT SERVICEUSER.SERVICEID ,SERVICES.SERVICEDE "
                StrSql = StrSql + "FROM SERVICEUSER INNER JOIN SERVICES ON SERVICES.SERVICEID=SERVICEUSER.SERVICEID "
                StrSql = StrSql + "WHERE USERID=" + UserId + " "
                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts

            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetPropCaseDetails(ByVal UserId As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,CASEDE1,CASEDE2,CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES FROM PERMISSIONSCASES "
                ' StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE UserId =" + UserId.ToString() + " "
                StrSql = StrSql + "AND SERVICEID=" + ServiceId + " "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPropCaseDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompPCaseDetailsByLicense(ByVal UserId As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDES "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND SERVICEID=" + ServiceId + " "
                StrSql = StrSql + "ORDER BY UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPCaseDetailsByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompGroupIDByUSer(ByVal UserID As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dim StrSql As String = ""
                StrSql = "SELECT GROUPID,  "
                StrSql = StrSql + "DES1, "
                StrSql = StrSql + "DES2, "
                StrSql = StrSql + "USERID, "
                StrSql = StrSql + "CREATIONDATE, "
                StrSql = StrSql + "UPDATEDATE, "
                StrSql = StrSql + "SERVICEID "
                StrSql = StrSql + "FROM GROUPS WHERE USERID= " + UserID + " "
                StrSql = StrSql + "AND SERVICEID IN (" + ServiceId + ")"

                Dts = odbUtil.FillDataSet(StrSql, MyConnectionString)
                Return Dts
            Catch ex As Exception
                Throw
                Return Dts
            End Try
        End Function
        Public Function GetCompGroupCaseDetails(ByVal UserID As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim cnt As Integer = 0
            Try
                Dim odbUtil As New DBUtil()
                Dim MyConnectionString As String = ""
                MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
                Dts = objGetData.GetCompGroupIDByUSer(UserID, ServiceId)
                If Dts.Tables(0).Rows.Count > 0 Then
                    For i = 0 To Dts.Tables(0).Rows.Count - 1
                        ds = objGetData.GetGroupCasesByUSer(Dts.Tables(0).Rows(i).Item("GROUPID").ToString())
                        If ds.Tables(0).Rows.Count > 0 Then
                            For j = 0 To ds.Tables(0).Rows.Count - 1
                                If j = 0 Then
                                    CaseIDs = ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + " " + ds.Tables(0).Rows(j).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = "0"
                        End If
                        If cnt = 0 Then
                            cnt += 1
                            'strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' || ' ,Cases:" + CaseIDs + "' AS GROUPDES,'" + CaseIDs + "' AS CASEIDS FROM DUAL "
                            strSQL = "SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '   '|| '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' AS CDES1 FROM DUAL "
                        Else
                            cnt += 1
                            strSQL = strSQL + "UNION ALL SELECT " + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " GROUPID,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' ||  '   ' || '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS GROUPNAME," + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + " || ' - ' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' || '   '||  '" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "'  AS GROUPDES,'" + CaseIDs + "' AS CASEIDS,'" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' AS DES1,'" + Dts.Tables(0).Rows(i).Item("Des2").ToString() + "' AS DES2,'" + Dts.Tables(0).Rows(i).Item("GROUPID").ToString() + "' || ':' || '" + Dts.Tables(0).Rows(i).Item("Des1").ToString() + "' AS CDES1 FROM DUAL "
                        End If
                    Next
                    strSQL = " SELECT * FROM ( " + strSQL + " ) DUAL ORDER BY UPPER(DES1),UPPER(DES2)"
                End If
                If strSQL <> "" Then
                    DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                Else
                    strSQL = "select * FROM GROUPS WHERE GROUPID=0"
                    DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                End If
                Return DtRes
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetCompUserCompanyUsers(ByVal UserName As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                StrSql = "SELECT  USERS.USERID,  "
                StrSql = StrSql + "USERS.USERNAME "
                StrSql = StrSql + "FROM USERS "
                StrSql = StrSql + "INNER JOIN USERPERMISSIONS "
                StrSql = StrSql + "ON USERPERMISSIONS.USERID= USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES "
                StrSql = StrSql + "ON SERVICES.SERVICEID = USERPERMISSIONS.SERVICEID "
                StrSql = StrSql + "WHERE USERS.LICENSEID=(SELECT LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper.ToString() + "') "
                StrSql = StrSql + "AND SERVICES.SERVICEID= " + ServiceId.ToString() + " "
                StrSql = StrSql + "AND UPPER(USERPERMISSIONS.USERROLE)='READWRITE' "
                StrSql = StrSql + "GROUP BY USERS.USERID,USERS.USERNAME "
                StrSql = StrSql + "ORDER BY USERS.USERNAME "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompUserCompanyUsers:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompCaseGrpDetails(ByVal UserID As String, ByVal keyWord As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT GROUPNAME,GROUPID,CASEID,CASEDE1,CASEDE2,CASEDE3,CASEDES,CREATIONDATE,SERVERDATE "
                StrSql = StrSql + " FROM "
                StrSql = StrSql + " ( "
                StrSql = StrSql + "SELECT CASE WHEN NVL(GROUPS.GROUPID,'0')='0' THEN 'None' ELSE GROUPS.DES1 END AS GROUPNAME,  "
                StrSql = StrSql + "NVL(GROUPS.GROUPID,'0') AS GROUPID, "
                StrSql = StrSql + "PC.CASEID, "
                StrSql = StrSql + "PC.CASEDE1, "
                StrSql = StrSql + "PC.CASEDE2, "
                StrSql = StrSql + "CAST(PC.CASEDE3 AS VARCHAR(4000))CASEDE3, "

                StrSql = StrSql + "(PC.CASEID||'. PACKAGE FORMAT= '||PC.CASEDE1||' UNIQUE FEATURES= '||PC.CASEDE2)CASEDES, "

                StrSql = StrSql + " PC.CREATIONDATE, "
                StrSql = StrSql + "CASE WHEN PC.CREATIONDATE-PC.SERVERDATE =0 THEN 'NA' ELSE to_char(PC.SERVERDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  SERVERDATE "


                StrSql = StrSql + "FROM GROUPS "
                StrSql = StrSql + "INNER JOIN GROUPCASES "
                StrSql = StrSql + "ON GROUPCASES.GROUPID=GROUPS.Groupid "
                StrSql = StrSql + "AND GROUPS.USERID=" + UserID + " "
                StrSql = StrSql + "RIGHT OUTER JOIN PERMISSIONSCASES PC "
                StrSql = StrSql + "ON PC.CASEID=GROUPCASES.CASEID "
                ' StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().Trim() + "' "
                StrSql = StrSql + "WHERE PC.USERID =" + UserID.ToString() + " "
                StrSql = StrSql + "AND PC.SERVICEID=" + ServiceId + " "
                StrSql = StrSql + "ORDER BY CASEID DESC "
                StrSql = StrSql + " ) "

                StrSql = StrSql + "WHERE UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE2) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                StrSql = StrSql + "OR UPPER(GROUPNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompCaseGrpDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompCases(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT CASEID, (CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "WHERE UPPER(USERNAME) ='" + UserName.ToUpper().ToString() + "' "
                StrSql = StrSql + "WHERE USERID =" + UserId.ToString() + " "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "AND SERVICEID=" + ServiceId + " "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompCasesByLicense(ByVal UserId As String, ByVal CaseDe1 As String, ByVal CaseDe2 As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT DISTINCT CASEID,  "
                StrSql = StrSql + "CASEDE1, "
                StrSql = StrSql + "CASEDE2, "
                StrSql = StrSql + "CAST(CASEDE3 AS VARCHAR(4000))CASEDE3,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                StrSql = StrSql + "INNER JOIN USERS "
                StrSql = StrSql + "ON USERS.USERID=PERMISSIONSCASES.USERID "
                'StrSql = StrSql + "ON UPPER(USERS.USERNAME)=UPPER(PERMISSIONSCASES.USERNAME) "
                'StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE UPPER(USERNAME)='" + UserName.ToUpper() + "') "
                StrSql = StrSql + "WHERE USERS.LICENSEID IN (SELECT USERS.LICENSEID FROM USERS WHERE USERID=" + UserId.ToString() + ") "
                StrSql = StrSql + "AND SERVICEID =" + ServiceId + " "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID"
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompCasesByLicense:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetCompBCases(ByVal CaseDe1 As String, ByVal CaseDe2 As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT  CASEID,(CASEDE1||'  '||CASEDE2)CASEDES,CASEDE1,CASEDE2,(CASEID||'. PACKAGE FORMAT= '||CASEDE1||' UNIQUE FEATURES= '||CASEDE2)CASEDE "
                StrSql = StrSql + "FROM PERMISSIONSCASES "
                'StrSql = StrSql + "INNER JOIN USERS ON UPPER(USERS.USERNAME) = UPPER(PERMISSIONSCASES.USERNAME) "
                StrSql = StrSql + "INNER JOIN USERS ON USERS.USERID = PERMISSIONSCASES.USERID "
                StrSql = StrSql + "INNER JOIN SERVICEUSER ON SERVICEUSER.USERID= USERS.USERID "
                StrSql = StrSql + "INNER JOIN SERVICES ON SERVICES.SERVICEID= SERVICEUSER.SERVICEID "
                StrSql = StrSql + "WHERE SERVICES.SERVICEDE='CompEcon' "
                StrSql = StrSql + "AND PERMISSIONSCASES.SERVICEID IS NULL "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE1),'#') LIKE '%" + CaseDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(CASEDE2),'#') LIKE '%" + CaseDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  UPPER(CASEDE1),CASEID "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompBCases:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
        Public Function GetAllCompGroupDetails(ByVal UserID As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + " "
                strSQL = strSQL + "AND SERVICEID IN (" + ServiceId + ")"
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CASEID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "USR.UserName, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(GPS.CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN GPS.CREATIONDATE-GPS.UPDATEDATE =0 THEN 'NA' ELSE to_char(GPS.UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS GPS "
                        strSQL = strSQL + "INNER JOIN ECON.USERS USR "
                        strSQL = strSQL + "ON  USR.USERID=GPS.USERID "
                        strSQL = strSQL + "WHERE GPS.USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next

                    strSqlOutPut = "SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetCompGroupDetails(ByVal UserID As String, ByVal flag As Char, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim objGetData As New E1GetData.Selectdata()
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim strSQL As String = String.Empty
            Dim ds As New DataSet()
            Dim CaseIDs As String = String.Empty
            Dim DtRes As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim MyConnectionString As String = ""
            Dim dtOutPut As New DataSet()
            Dim strSqlOutPut As String = String.Empty
            MyConnectionString = System.Configuration.ConfigurationManager.AppSettings("EconConnectionString")
            Try


                'Getting Groups
                strSQL = "SELECT GROUPID,  "
                strSQL = strSQL + "DES1 GROUPNAME, "
                strSQL = strSQL + "DES2 GROUPDES, "
                strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                strSQL = strSQL + "FROM "
                strSQL = strSQL + "GROUPS "
                strSQL = strSQL + "WHERE USERID= " + UserID + " "
                strSQL = strSQL + "AND SERVICEID IN (" + ServiceId + ") "
                DtRes = odbUtil.FillDataSet(strSQL, MyConnectionString)
                If DtRes.Tables(0).Rows.Count > 0 Then
                    For j = 0 To DtRes.Tables(0).Rows.Count - 1
                        'Getting CaseID
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "CASEID "
                        strSQL = strSQL + "FROM ECON.GROUPCASES "
                        strSQL = strSQL + "WHERE GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString()
                        strSQL = strSQL + " ORDER BY  SEQ"
                        Dts = odbUtil.FillDataSet(strSQL, EconConnection)
                        If Dts.Tables(0).Rows.Count > 0 Then
                            For i = 0 To Dts.Tables(0).Rows.Count - 1
                                If i = 0 Then
                                    CaseIDs = Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                Else
                                    CaseIDs = CaseIDs + ", " + Dts.Tables(0).Rows(i).Item("CASEID").ToString()
                                End If
                            Next
                        Else
                            CaseIDs = ""
                        End If
                        strSQL = "SELECT GROUPID,  "
                        strSQL = strSQL + "DES1 GROUPNAME, "
                        strSQL = strSQL + "'" + CaseIDs.ToString() + "' CaseID, "
                        strSQL = strSQL + "DES2 GROUPDES, "
                        strSQL = strSQL + "GROUPID || ':'|| DES1 CDES1,"
                        strSQL = strSQL + "to_char(CREATIONDATE,'mm/dd/yyyy hh:mi:ss AM'  ) CREATIONDATE, "
                        strSQL = strSQL + "CASE WHEN CREATIONDATE-UPDATEDATE =0 THEN 'NA' ELSE to_char(UPDATEDATE,'mm/dd/yyyy hh:mi:ss AM'  ) END  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "GROUPS "
                        strSQL = strSQL + "WHERE USERID= " + UserID + " AND GROUPID=" + DtRes.Tables(0).Rows(j).Item("GROUPID").ToString() + " "
                        If j = 0 Then
                            strSqlOutPut = strSQL
                        Else
                            strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                        End If
                    Next
                    If flag = "Y" Then ' Y FOR GROUPDEATILS PAGE ,N FOR EDITGROUPS PAGE
                        strSQL = "SELECT 0 GROUPID,  "
                        strSQL = strSQL + "'None'  GROUPNAME, "
                        strSQL = strSQL + "'NA' CaseID, "
                        strSQL = strSQL + "'NA'  GROUPDES, "
                        strSQL = strSQL + "'0:None'  CDES1, "
                        strSQL = strSQL + "'NA'  CREATIONDATE, "
                        strSQL = strSQL + "'NA'  UPDATEDATE "
                        strSQL = strSQL + "FROM "
                        strSQL = strSQL + "DUAL "
                        strSqlOutPut = strSqlOutPut + " UNION ALL " + strSQL
                    End If
                    strSqlOutPut = " SELECT * FROM ( " + strSqlOutPut + " ) DUAL ORDER BY UPPER(GROUPNAME),UPPER(GROUPDES)"
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                Else
                    strSqlOutPut = " SELECT * FROM GROUPCASES WHERE GROUPID=0 "
                    dtOutPut = odbUtil.FillDataSet(strSqlOutPut, EconConnection)
                End If

                Return dtOutPut
            Catch ex As Exception
                Throw
                Return DtRes
            End Try
        End Function
        Public Function GetCompTotalCaseCount(ByVal UserId As String, ByVal ServiceId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT COUNT(*) AS TOTALCOUNT FROM PERMISSIONSCASES  "
                'StrSql = StrSql + "WHERE UPPER(USERNAME)='" + UNAME.ToString().ToUpper() + "' "
                StrSql = StrSql + "WHERE USERID=" + UserId.ToString() + " "
                StrSql = StrSql + "AND SERVICEID=" + ServiceId + " "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCompTotalCaseCount:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Depreciation Cost"
        Public Function GetAssetC(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT EQUIP.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS ASSESTCOSTUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN 'square feet'  ELSE 'square meters' END AS PLANTAREAUNIT, "
                StrSql = StrSql + "NVL((EQCOS.M1*  PREF.CURR),0) AS ASSETP1, "
                StrSql = StrSql + "NVL((EQCOS.M2*  PREF.CURR),0) AS ASSETP2, "
                StrSql = StrSql + "NVL((EQCOS.M3*  PREF.CURR),0) AS ASSETP3, "
                StrSql = StrSql + "NVL((EQCOS.M4*  PREF.CURR),0) AS ASSETP4, "
                StrSql = StrSql + "NVL((EQCOS.M5*  PREF.CURR),0) AS ASSETP5, "
                StrSql = StrSql + "NVL((EQCOS.M6*  PREF.CURR),0) AS ASSETP6, "
                StrSql = StrSql + "NVL((EQCOS.M7*  PREF.CURR),0) AS ASSETP7, "
                StrSql = StrSql + "NVL((EQCOS.M8*  PREF.CURR),0) AS ASSETP8, "
                StrSql = StrSql + "NVL((EQCOS.M9*  PREF.CURR),0) AS ASSETP9, "
                StrSql = StrSql + "NVL((EQCOS.M10*  PREF.CURR),0) AS ASSETP10, "
                StrSql = StrSql + "NVL((EQCOS.M11*  PREF.CURR),0) AS ASSETP11, "
                StrSql = StrSql + "NVL((EQCOS.M12*  PREF.CURR),0) AS ASSETP12, "
                StrSql = StrSql + "NVL((EQCOS.M13*  PREF.CURR),0) AS ASSETP13, "
                StrSql = StrSql + "NVL((EQCOS.M14*  PREF.CURR),0) AS ASSETP14, "
                StrSql = StrSql + "NVL((EQCOS.M15*  PREF.CURR),0) AS ASSETP15, "
                StrSql = StrSql + "NVL((EQCOS.M16*  PREF.CURR),0) AS ASSETP16, "
                StrSql = StrSql + "NVL((EQCOS.M17*  PREF.CURR),0) AS ASSETP17, "
                StrSql = StrSql + "NVL((EQCOS.M18*  PREF.CURR),0) AS ASSETP18, "
                StrSql = StrSql + "NVL((EQCOS.M19*  PREF.CURR),0) AS ASSETP19, "
                StrSql = StrSql + "NVL((EQCOS.M20*  PREF.CURR),0) AS ASSETP20, "
                StrSql = StrSql + "NVL((EQCOS.M21*  PREF.CURR),0) AS ASSETP21, "
                StrSql = StrSql + "NVL((EQCOS.M22*  PREF.CURR),0) AS ASSETP22, "
                StrSql = StrSql + "NVL((EQCOS.M23*  PREF.CURR),0) AS ASSETP23, "
                StrSql = StrSql + "NVL((EQCOS.M24*  PREF.CURR),0) AS ASSETP24, "
                StrSql = StrSql + "NVL((EQCOS.M25*  PREF.CURR),0) AS ASSETP25, "
                StrSql = StrSql + "NVL((EQCOS.M26*  PREF.CURR),0) AS ASSETP26, "
                StrSql = StrSql + "NVL((EQCOS.M27*  PREF.CURR),0) AS ASSETP27, "
                StrSql = StrSql + "NVL((EQCOS.M28*  PREF.CURR),0) AS ASSETP28, "
                StrSql = StrSql + "NVL((EQCOS.M29*  PREF.CURR),0) AS ASSETP29, "
                StrSql = StrSql + "NVL((EQCOS.M30*  PREF.CURR),0) AS ASSETP30, "
                'StrSql = StrSql + "(EQUIP1.COST *  PREF.CURR) AS ASSETS1, "
                'StrSql = StrSql + "(EQUIP2.COST *  PREF.CURR) AS ASSETS2, "
                'StrSql = StrSql + "(EQUIP3.COST *  PREF.CURR) AS ASSETS3, "
                'StrSql = StrSql + "(EQUIP4.COST *  PREF.CURR) AS ASSETS4, "
                'StrSql = StrSql + "(EQUIP5.COST *  PREF.CURR) AS ASSETS5, "
                'StrSql = StrSql + "(EQUIP6.COST *  PREF.CURR) AS ASSETS6, "
                'StrSql = StrSql + "(EQUIP7.COST *  PREF.CURR) AS ASSETS7, "
                'StrSql = StrSql + "(EQUIP8.COST *  PREF.CURR) AS ASSETS8, "
                'StrSql = StrSql + "(EQUIP9.COST *  PREF.CURR) AS ASSETS9, "
                'StrSql = StrSql + "(EQUIP10.COST *  PREF.CURR) AS ASSETS10, "
                'StrSql = StrSql + "(EQUIP11.COST *  PREF.CURR) AS ASSETS11, "
                'StrSql = StrSql + "(EQUIP12.COST *  PREF.CURR) AS ASSETS12, "
                'StrSql = StrSql + "(EQUIP13.COST *  PREF.CURR) AS ASSETS13, "
                'StrSql = StrSql + "(EQUIP14.COST *  PREF.CURR) AS ASSETS14, "
                'StrSql = StrSql + "(EQUIP15.COST *  PREF.CURR) AS ASSETS15, "
                'StrSql = StrSql + "(EQUIP16.COST *  PREF.CURR) AS ASSETS16, "
                'StrSql = StrSql + "(EQUIP17.COST *  PREF.CURR) AS ASSETS17, "
                'StrSql = StrSql + "(EQUIP18.COST *  PREF.CURR) AS ASSETS18, "
                'StrSql = StrSql + "(EQUIP19.COST *  PREF.CURR) AS ASSETS19, "
                'StrSql = StrSql + "(EQUIP20.COST *  PREF.CURR) AS ASSETS20, "
                'StrSql = StrSql + "(EQUIP21.COST *  PREF.CURR) AS ASSETS21, "
                'StrSql = StrSql + "(EQUIP22.COST *  PREF.CURR) AS ASSETS22, "
                'StrSql = StrSql + "(EQUIP23.COST *  PREF.CURR) AS ASSETS23, "
                'StrSql = StrSql + "(EQUIP24.COST *  PREF.CURR) AS ASSETS24, "
                'StrSql = StrSql + "(EQUIP25.COST *  PREF.CURR) AS ASSETS25, "
                'StrSql = StrSql + "(EQUIP26.COST *  PREF.CURR) AS ASSETS26, "
                'StrSql = StrSql + "(EQUIP27.COST *  PREF.CURR) AS ASSETS27, "
                'StrSql = StrSql + "(EQUIP28.COST *  PREF.CURR) AS ASSETS28, "
                'StrSql = StrSql + "(EQUIP29.COST *  PREF.CURR) AS ASSETS29, "
                'StrSql = StrSql + "(EQUIP30.COST *  PREF.CURR) AS ASSETS30, "

                StrSql = StrSql + "NVL((EQUIPARCH1.COST *  PREF.CURR),0) AS ASSETS1, "
                StrSql = StrSql + "NVL((EQUIPARCH2.COST *  PREF.CURR),0) AS ASSETS2, "
                StrSql = StrSql + "NVL((EQUIPARCH3.COST *  PREF.CURR),0) AS ASSETS3, "
                StrSql = StrSql + "NVL((EQUIPARCH4.COST *  PREF.CURR),0) AS ASSETS4, "
                StrSql = StrSql + "NVL((EQUIPARCH5.COST *  PREF.CURR),0) AS ASSETS5, "
                StrSql = StrSql + "NVL((EQUIPARCH6.COST *  PREF.CURR),0) AS ASSETS6, "
                StrSql = StrSql + "NVL((EQUIPARCH7.COST *  PREF.CURR),0) AS ASSETS7, "
                StrSql = StrSql + "NVL((EQUIPARCH8.COST *  PREF.CURR),0) AS ASSETS8, "
                StrSql = StrSql + "NVL((EQUIPARCH9.COST *  PREF.CURR),0) AS ASSETS9, "
                StrSql = StrSql + "NVL((EQUIPARCH10.COST *  PREF.CURR),0) AS ASSETS10, "
                StrSql = StrSql + "NVL((EQUIPARCH11.COST *  PREF.CURR),0) AS ASSETS11, "
                StrSql = StrSql + "NVL((EQUIPARCH12.COST *  PREF.CURR),0) AS ASSETS12, "
                StrSql = StrSql + "NVL((EQUIPARCH13.COST *  PREF.CURR),0) AS ASSETS13, "
                StrSql = StrSql + "NVL((EQUIPARCH14.COST *  PREF.CURR),0) AS ASSETS14, "
                StrSql = StrSql + "NVL((EQUIPARCH15.COST *  PREF.CURR),0) AS ASSETS15, "
                StrSql = StrSql + "NVL((EQUIPARCH16.COST *  PREF.CURR),0) AS ASSETS16, "
                StrSql = StrSql + "NVL((EQUIPARCH17.COST *  PREF.CURR),0) AS ASSETS17, "
                StrSql = StrSql + "NVL((EQUIPARCH18.COST *  PREF.CURR),0) AS ASSETS18, "
                StrSql = StrSql + "NVL((EQUIPARCH19.COST *  PREF.CURR),0) AS ASSETS19, "
                StrSql = StrSql + "NVL((EQUIPARCH20.COST *  PREF.CURR),0) AS ASSETS20, "
                StrSql = StrSql + "NVL((EQUIPARCH21.COST *  PREF.CURR),0) AS ASSETS21, "
                StrSql = StrSql + "NVL((EQUIPARCH22.COST *  PREF.CURR),0) AS ASSETS22, "
                StrSql = StrSql + "NVL((EQUIPARCH23.COST *  PREF.CURR),0) AS ASSETS23, "
                StrSql = StrSql + "NVL((EQUIPARCH24.COST *  PREF.CURR),0) AS ASSETS24, "
                StrSql = StrSql + "NVL((EQUIPARCH25.COST *  PREF.CURR),0) AS ASSETS25, "
                StrSql = StrSql + "NVL((EQUIPARCH26.COST *  PREF.CURR),0) AS ASSETS26, "
                StrSql = StrSql + "NVL((EQUIPARCH27.COST *  PREF.CURR),0) AS ASSETS27, "
                StrSql = StrSql + "NVL((EQUIPARCH28.COST *  PREF.CURR),0) AS ASSETS28, "
                StrSql = StrSql + "NVL((EQUIPARCH29.COST *  PREF.CURR),0) AS ASSETS29, "
                StrSql = StrSql + "NVL((EQUIPARCH30.COST *  PREF.CURR),0) AS ASSETS30, "

                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP1.EQUIPID )EQUIPDES1, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP2.EQUIPID )EQUIPDES2, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP3.EQUIPID )EQUIPDES3, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP4.EQUIPID )EQUIPDES4, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP5.EQUIPID )EQUIPDES5, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP6.EQUIPID )EQUIPDES6, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP7.EQUIPID )EQUIPDES7, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP8.EQUIPID )EQUIPDES8, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP9.EQUIPID )EQUIPDES9, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP10.EQUIPID )EQUIPDES10,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP11.EQUIPID )EQUIPDES11, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP12.EQUIPID )EQUIPDES12, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP13.EQUIPID )EQUIPDES13, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP14.EQUIPID )EQUIPDES14,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP15.EQUIPID )EQUIPDES15,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP16.EQUIPID )EQUIPDES16, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP17.EQUIPID )EQUIPDES17, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP18.EQUIPID )EQUIPDES18, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP19.EQUIPID )EQUIPDES19, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP20.EQUIPID )EQUIPDES20, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP21.EQUIPID )EQUIPDES21, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP22.EQUIPID )EQUIPDES22, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP23.EQUIPID )EQUIPDES23, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP24.EQUIPID )EQUIPDES24, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP25.EQUIPID )EQUIPDES25, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP26.EQUIPID )EQUIPDES26, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP27.EQUIPID )EQUIPDES27, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP28.EQUIPID )EQUIPDES28, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP29.EQUIPID )EQUIPDES29, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM equipment WHERE EQUIPID=EQUIP30.EQUIPID )EQUIPDES30, "
                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30, "
                StrSql = StrSql + "EQNUM.D1 AS DEPRE1, "
                StrSql = StrSql + "EQNUM.D2 AS DEPRE2, "
                StrSql = StrSql + "EQNUM.D3 AS DEPRE3, "
                StrSql = StrSql + "EQNUM.D4 AS DEPRE4, "
                StrSql = StrSql + "EQNUM.D5 AS DEPRE5, "
                StrSql = StrSql + "EQNUM.D6 AS DEPRE6, "
                StrSql = StrSql + "EQNUM.D7 AS DEPRE7, "
                StrSql = StrSql + "EQNUM.D8 AS DEPRE8, "
                StrSql = StrSql + "EQNUM.D9 AS DEPRE9, "
                StrSql = StrSql + "EQNUM.D10 AS DEPRE10, "
                StrSql = StrSql + "EQNUM.D11 AS DEPRE11, "
                StrSql = StrSql + "EQNUM.D12 AS DEPRE12, "
                StrSql = StrSql + "EQNUM.D13 AS DEPRE13, "
                StrSql = StrSql + "EQNUM.D14 AS DEPRE14, "
                StrSql = StrSql + "EQNUM.D15 AS DEPRE15, "
                StrSql = StrSql + "EQNUM.D16 AS DEPRE16, "
                StrSql = StrSql + "EQNUM.D17 AS DEPRE17, "
                StrSql = StrSql + "EQNUM.D18 AS DEPRE18, "
                StrSql = StrSql + "EQNUM.D19 AS DEPRE19, "
                StrSql = StrSql + "EQNUM.D20 AS DEPRE20, "
                StrSql = StrSql + "EQNUM.D21 AS DEPRE21, "
                StrSql = StrSql + "EQNUM.D22 AS DEPRE22, "
                StrSql = StrSql + "EQNUM.D23 AS DEPRE23, "
                StrSql = StrSql + "EQNUM.D24 AS DEPRE24, "
                StrSql = StrSql + "EQNUM.D25 AS DEPRE25, "
                StrSql = StrSql + "EQNUM.D26 AS DEPRE26, "
                StrSql = StrSql + "EQNUM.D27 AS DEPRE27, "
                StrSql = StrSql + "EQNUM.D28 AS DEPRE28, "
                StrSql = StrSql + "EQNUM.D29 AS DEPRE29, "
                StrSql = StrSql + "EQNUM.D30 AS DEPRE30, "
                StrSql = StrSql + "(TOTAL.ASSETTOTAL*PREF.CURR) AS ASSETTOTAL, "
                StrSql = StrSql + "DEPC.YEARS AS DEPYEARS, "
                StrSql = StrSql + "(DEPC.DEPRECIATION*PREF.CURR) AS DEPTOTAL, "
                'Changes started on 6th april 2017
                StrSql = StrSql + "(RC.ICPE1*  PREF.CURR) AS ICPE1, "
                StrSql = StrSql + "(RC.ICPE2*  PREF.CURR) AS ICPE2, "
                StrSql = StrSql + "(RC.ICPE3*  PREF.CURR) AS ICPE3, "
                StrSql = StrSql + "(RC.ICPE4*  PREF.CURR) AS ICPE4, "
                StrSql = StrSql + "(RC.ICPE5*  PREF.CURR) AS ICPE5, "
                StrSql = StrSql + "(RC.ICPE6*  PREF.CURR) AS ICPE6, "
                StrSql = StrSql + "(RC.ICPE7*  PREF.CURR) AS ICPE7, "
                StrSql = StrSql + "(RC.ICPE8*  PREF.CURR) AS ICPE8, "
                StrSql = StrSql + "(RC.ICPE9*  PREF.CURR) AS ICPE9, "
                StrSql = StrSql + "(RC.ICPE10*  PREF.CURR) AS ICPE10, "
                StrSql = StrSql + "(RC.ICPE11*  PREF.CURR) AS ICPE11, "
                StrSql = StrSql + "(RC.ICPE12*  PREF.CURR) AS ICPE12, "
                StrSql = StrSql + "(RC.ICPE13*  PREF.CURR) AS ICPE13, "
                StrSql = StrSql + "(RC.ICPE14*  PREF.CURR) AS ICPE14, "
                StrSql = StrSql + "(RC.ICPE15*  PREF.CURR) AS ICPE15, "
                StrSql = StrSql + "(RC.ICPE16*  PREF.CURR) AS ICPE16, "
                StrSql = StrSql + "(RC.ICPE17*  PREF.CURR) AS ICPE17, "
                StrSql = StrSql + "(RC.ICPE18*  PREF.CURR) AS ICPE18, "
                StrSql = StrSql + "(RC.ICPE19*  PREF.CURR) AS ICPE19, "
                StrSql = StrSql + "(RC.ICPE20*  PREF.CURR) AS ICPE20, "
                StrSql = StrSql + "(RC.ICPE21*  PREF.CURR) AS ICPE21, "
                StrSql = StrSql + "(RC.ICPE22*  PREF.CURR) AS ICPE22, "
                StrSql = StrSql + "(RC.ICPE23*  PREF.CURR) AS ICPE23, "
                StrSql = StrSql + "(RC.ICPE24*  PREF.CURR) AS ICPE24, "
                StrSql = StrSql + "(RC.ICPE25*  PREF.CURR) AS ICPE25, "
                StrSql = StrSql + "(RC.ICPE26*  PREF.CURR) AS ICPE26, "
                StrSql = StrSql + "(RC.ICPE27*  PREF.CURR) AS ICPE27, "
                StrSql = StrSql + "(RC.ICPE28*  PREF.CURR) AS ICPE28, "
                StrSql = StrSql + "(RC.ICPE29*  PREF.CURR) AS ICPE29, "
                StrSql = StrSql + "(RC.ICPE30*  PREF.CURR) AS ICPE30, "

                StrSql = StrSql + "(RC.DCPE1*  PREF.CURR) AS DCPE1, "
                StrSql = StrSql + "(RC.DCPE2*  PREF.CURR) AS DCPE2, "
                StrSql = StrSql + "(RC.DCPE3*  PREF.CURR) AS DCPE3, "
                StrSql = StrSql + "(RC.DCPE4*  PREF.CURR) AS DCPE4, "
                StrSql = StrSql + "(RC.DCPE5*  PREF.CURR) AS DCPE5, "
                StrSql = StrSql + "(RC.DCPE6*  PREF.CURR) AS DCPE6, "
                StrSql = StrSql + "(RC.DCPE7*  PREF.CURR) AS DCPE7, "
                StrSql = StrSql + "(RC.DCPE8*  PREF.CURR) AS DCPE8, "
                StrSql = StrSql + "(RC.DCPE9*  PREF.CURR) AS DCPE9, "
                StrSql = StrSql + "(RC.DCPE10*  PREF.CURR) AS DCPE10, "
                StrSql = StrSql + "(RC.DCPE11*  PREF.CURR) AS DCPE11, "
                StrSql = StrSql + "(RC.DCPE12*  PREF.CURR) AS DCPE12, "
                StrSql = StrSql + "(RC.DCPE13*  PREF.CURR) AS DCPE13, "
                StrSql = StrSql + "(RC.DCPE14*  PREF.CURR) AS DCPE14, "
                StrSql = StrSql + "(RC.DCPE15*  PREF.CURR) AS DCPE15, "
                StrSql = StrSql + "(RC.DCPE16*  PREF.CURR) AS DCPE16, "
                StrSql = StrSql + "(RC.DCPE17*  PREF.CURR) AS DCPE17, "
                StrSql = StrSql + "(RC.DCPE18*  PREF.CURR) AS DCPE18, "
                StrSql = StrSql + "(RC.DCPE19*  PREF.CURR) AS DCPE19, "
                StrSql = StrSql + "(RC.DCPE20*  PREF.CURR) AS DCPE20, "
                StrSql = StrSql + "(RC.DCPE21*  PREF.CURR) AS DCPE21, "
                StrSql = StrSql + "(RC.DCPE22*  PREF.CURR) AS DCPE22, "
                StrSql = StrSql + "(RC.DCPE23*  PREF.CURR) AS DCPE23, "
                StrSql = StrSql + "(RC.DCPE24*  PREF.CURR) AS DCPE24, "
                StrSql = StrSql + "(RC.DCPE25*  PREF.CURR) AS DCPE25, "
                StrSql = StrSql + "(RC.DCPE26*  PREF.CURR) AS DCPE26, "
                StrSql = StrSql + "(RC.DCPE27*  PREF.CURR) AS DCPE27, "
                StrSql = StrSql + "(RC.DCPE28*  PREF.CURR) AS DCPE28, "
                StrSql = StrSql + "(RC.DCPE29*  PREF.CURR) AS DCPE29, "
                StrSql = StrSql + "(RC.DCPE30*  PREF.CURR) AS DCPE30, "

                StrSql = StrSql + "(RC.INVESTTOTALPE*  PREF.CURR) AS INVESTTOTALPE, "
                StrSql = StrSql + "(RC.DEPRETOTALPE*  PREF.CURR) AS DEPRETOTALPE, "
                'Changes ended on 6th april 2017

		'Equipment Label
                StrSql = StrSql + "(CASE WHEN EQUIP.M1= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M1 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES1, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M2= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M2 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES2, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M3= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M3 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES3, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M4= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M4 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES4, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M5= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M5 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES5, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M6= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M6 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES6, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M7= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M7 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES7, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M8= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M8 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES8, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M9= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M9 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES9, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M10= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M10 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES10, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M11= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M11 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES11, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M12= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M12 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES12, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M13= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M13 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES13, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M14= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M14 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES14, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M15= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M15 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES15, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M16= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M16 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES16, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M17= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M17 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES17, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M18= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M18 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES18, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M19= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M19 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES19, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M20= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M20 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES20, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M21= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M21 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES21, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M22= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M22 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES22, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M23= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M23 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES23, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M24= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M24 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES24, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M25= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M25 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES25, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M26= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M26 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES26, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M27= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M27 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES27, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M28= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M28 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES28, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M29= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M29 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES29, "

                StrSql = StrSql + "(CASE WHEN EQUIP.M30= 0 THEN "
                StrSql = StrSql + " '' "
                StrSql = StrSql + " ELSE "
                StrSql = StrSql + " (SELECT  EQUIPDES FROM USERSEQUIPMENT UE INNER JOIN EQUIPMENTTYPE ETYPE ON ETYPE.M30 = UE.EQUIPID INNER JOIN PREFERENCES PREF ON PREF.CASEID=UE.CASEID AND ETYPE.CASEID = " + CaseId.ToString() + " WHERE UE.CASEID = " + CaseId.ToString() + ") "
                StrSql = StrSql + " END) AS LEQUIPDES30 "

                'end label


                StrSql = StrSql + "FROM EQUIPMENTTYPE EQUIP "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIP.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIP.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIP.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIP.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIP.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIP.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIP.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIP.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIP.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIP.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIP.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIP.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIP.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIP.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIP.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIP.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIP.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIP.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIP.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIP.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIP.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIP.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIP.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIP.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIP.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIP.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIP.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIP.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIP.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT  EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIP.M30 "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTCOST EQCOS "
                StrSql = StrSql + "ON EQCOS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN DEPRECIATION DEPC "
                StrSql = StrSql + "ON DEPC.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN TOTAL "
                StrSql = StrSql + "ON TOTAL.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENTNUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIP.CASEID "
                'Changes started on 6th April 2017
                StrSql = StrSql + "INNER JOIN RESULTSCOST2 RC "
                StrSql = StrSql + "ON RC.CASEID=EQUIP.CASEID "
                'Changes ended on 6th April 2017

                'EQUIPARCH 
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH1 "
                StrSql = StrSql + "ON EQUIPARCH1.EQUIPID=EQUIP.M1 AND EQUIPARCH1.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH1.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH2 "
                StrSql = StrSql + "ON EQUIPARCH2.EQUIPID=EQUIP.M2 AND EQUIPARCH2.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH2.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH3 "
                StrSql = StrSql + "ON EQUIPARCH3.EQUIPID=EQUIP.M3 AND EQUIPARCH3.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH3.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH4 "
                StrSql = StrSql + "ON EQUIPARCH4.EQUIPID=EQUIP.M4 AND EQUIPARCH4.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH4.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH5 "
                StrSql = StrSql + "ON EQUIPARCH5.EQUIPID=EQUIP.M5 AND EQUIPARCH5.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH5.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH6 "
                StrSql = StrSql + "ON EQUIPARCH6.EQUIPID=EQUIP.M6 AND EQUIPARCH6.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH6.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH7 "
                StrSql = StrSql + "ON EQUIPARCH7.EQUIPID=EQUIP.M7 AND EQUIPARCH7.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH7.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH8 "
                StrSql = StrSql + "ON EQUIPARCH8.EQUIPID=EQUIP.M8 AND EQUIPARCH8.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH8.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH9 "
                StrSql = StrSql + "ON EQUIPARCH9.EQUIPID=EQUIP.M9 AND EQUIPARCH9.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH9.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH10 "
                StrSql = StrSql + "ON EQUIPARCH10.EQUIPID=EQUIP.M10 AND EQUIPARCH10.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH10.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH11 "
                StrSql = StrSql + "ON EQUIPARCH11.EQUIPID=EQUIP.M11 AND EQUIPARCH11.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH11.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH12 "
                StrSql = StrSql + "ON EQUIPARCH12.EQUIPID=EQUIP.M12 AND EQUIPARCH12.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH12.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH13 "
                StrSql = StrSql + "ON EQUIPARCH13.EQUIPID=EQUIP.M13 AND EQUIPARCH13.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH13.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH14 "
                StrSql = StrSql + "ON EQUIPARCH14.EQUIPID=EQUIP.M14 AND EQUIPARCH14.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH14.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH15 "
                StrSql = StrSql + "ON EQUIPARCH15.EQUIPID=EQUIP.M15 AND EQUIPARCH15.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH15.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH16 "
                StrSql = StrSql + "ON EQUIPARCH16.EQUIPID=EQUIP.M16 AND EQUIPARCH16.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH16.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH17 "
                StrSql = StrSql + "ON EQUIPARCH17.EQUIPID=EQUIP.M17 AND EQUIPARCH17.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH17.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH18 "
                StrSql = StrSql + "ON EQUIPARCH18.EQUIPID=EQUIP.M18 AND EQUIPARCH18.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH18.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH19 "
                StrSql = StrSql + "ON EQUIPARCH19.EQUIPID=EQUIP.M19 AND EQUIPARCH19.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH19.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH20 "
                StrSql = StrSql + "ON EQUIPARCH20.EQUIPID=EQUIP.M20 AND EQUIPARCH20.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH20.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH21 "
                StrSql = StrSql + "ON EQUIPARCH21.EQUIPID=EQUIP.M21 AND EQUIPARCH21.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH21.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH22 "
                StrSql = StrSql + "ON EQUIPARCH22.EQUIPID=EQUIP.M22 AND EQUIPARCH22.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH22.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH23 "
                StrSql = StrSql + "ON EQUIPARCH23.EQUIPID=EQUIP.M23 AND EQUIPARCH23.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH23.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH24 "
                StrSql = StrSql + "ON EQUIPARCH24.EQUIPID=EQUIP.M24 AND EQUIPARCH24.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH24.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH25 "
                StrSql = StrSql + "ON EQUIPARCH25.EQUIPID=EQUIP.M25 AND EQUIPARCH25.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH25.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH26 "
                StrSql = StrSql + "ON EQUIPARCH26.EQUIPID=EQUIP.M26 AND EQUIPARCH26.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH26.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH27 "
                StrSql = StrSql + "ON EQUIPARCH27.EQUIPID=EQUIP.M27 AND EQUIPARCH27.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH27.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH28 "
                StrSql = StrSql + "ON EQUIPARCH28.EQUIPID=EQUIP.M28 AND EQUIPARCH28.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH28.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH29 "
                StrSql = StrSql + "ON EQUIPARCH29.EQUIPID=EQUIP.M29 AND EQUIPARCH29.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH29.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIPARCH  EQUIPARCH30 "
                StrSql = StrSql + "ON EQUIPARCH30.EQUIPID=EQUIP.M30 AND EQUIPARCH30.COUNTRYID=PREF.OCOUNTRY AND EQUIPARCH30.EFFDATE =PREF.EFFDATE "
                'END
                StrSql = StrSql + "WHERE EQUIP.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEquipmentDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function

        Public Function GetAssetS(ByVal CaseId As Integer) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                StrSql = "SELECT EQUIP.CASEID,  "
                StrSql = StrSql + "PREF.TITLE2 AS ASSESTCOSTUNIT, "
                StrSql = StrSql + "PREF.UNITS, "
                StrSql = StrSql + "CASE PREF.UNITS  WHEN 0 THEN 'SQUARE FEET'  ELSE 'SQUARE METERS' END AS PLANTAREAUNIT, "
                'StrSql = StrSql + "(EQUIP1.COST *  PREF.CURR) AS ASSETS1, "
                'StrSql = StrSql + "(EQUIP2.COST *  PREF.CURR) AS ASSETS2, "
                'StrSql = StrSql + "(EQUIP3.COST *  PREF.CURR) AS ASSETS3, "
                'StrSql = StrSql + "(EQUIP4.COST *  PREF.CURR) AS ASSETS4, "
                'StrSql = StrSql + "(EQUIP5.COST *  PREF.CURR) AS ASSETS5, "
                'StrSql = StrSql + "(EQUIP6.COST *  PREF.CURR) AS ASSETS6, "
                'StrSql = StrSql + "(EQUIP7.COST *  PREF.CURR) AS ASSETS7, "
                'StrSql = StrSql + "(EQUIP8.COST *  PREF.CURR) AS ASSETS8, "
                'StrSql = StrSql + "(EQUIP9.COST *  PREF.CURR) AS ASSETS9, "
                'StrSql = StrSql + "(EQUIP10.COST *  PREF.CURR) AS ASSETS10, "
                'StrSql = StrSql + "(EQUIP11.COST *  PREF.CURR) AS ASSETS11, "
                'StrSql = StrSql + "(EQUIP12.COST *  PREF.CURR) AS ASSETS12, "
                'StrSql = StrSql + "(EQUIP13.COST *  PREF.CURR) AS ASSETS13, "
                'StrSql = StrSql + "(EQUIP14.COST *  PREF.CURR) AS ASSETS14, "
                'StrSql = StrSql + "(EQUIP15.COST *  PREF.CURR) AS ASSETS15, "
                'StrSql = StrSql + "(EQUIP16.COST *  PREF.CURR) AS ASSETS16, "
                'StrSql = StrSql + "(EQUIP17.COST *  PREF.CURR) AS ASSETS17, "
                'StrSql = StrSql + "(EQUIP18.COST *  PREF.CURR) AS ASSETS18, "
                'StrSql = StrSql + "(EQUIP19.COST *  PREF.CURR) AS ASSETS19, "
                'StrSql = StrSql + "(EQUIP20.COST *  PREF.CURR) AS ASSETS20, "
                'StrSql = StrSql + "(EQUIP21.COST *  PREF.CURR) AS ASSETS21, "
                'StrSql = StrSql + "(EQUIP22.COST *  PREF.CURR) AS ASSETS22, "
                'StrSql = StrSql + "(EQUIP23.COST *  PREF.CURR) AS ASSETS23, "
                'StrSql = StrSql + "(EQUIP24.COST *  PREF.CURR) AS ASSETS24, "
                'StrSql = StrSql + "(EQUIP25.COST *  PREF.CURR) AS ASSETS25, "
                'StrSql = StrSql + "(EQUIP26.COST *  PREF.CURR) AS ASSETS26, "
                'StrSql = StrSql + "(EQUIP27.COST *  PREF.CURR) AS ASSETS27, "
                'StrSql = StrSql + "(EQUIP28.COST *  PREF.CURR) AS ASSETS28, "
                'StrSql = StrSql + "(EQUIP29.COST *  PREF.CURR) AS ASSETS29, "
                'StrSql = StrSql + "(EQUIP30.COST *  PREF.CURR) AS ASSETS30, "
                StrSql = StrSql + "NVL((EQUIP2ARCH1.COST *  PREF.CURR),0) AS ASSETS1, "
                StrSql = StrSql + "NVL((EQUIP2ARCH2.COST *  PREF.CURR),0) AS ASSETS2, "
                StrSql = StrSql + "NVL((EQUIP2ARCH3.COST *  PREF.CURR),0) AS ASSETS3, "
                StrSql = StrSql + "NVL((EQUIP2ARCH4.COST *  PREF.CURR),0) AS ASSETS4, "
                StrSql = StrSql + "NVL((EQUIP2ARCH5.COST *  PREF.CURR),0) AS ASSETS5, "
                StrSql = StrSql + "NVL((EQUIP2ARCH6.COST *  PREF.CURR),0) AS ASSETS6, "
                StrSql = StrSql + "NVL((EQUIP2ARCH7.COST *  PREF.CURR),0) AS ASSETS7, "
                StrSql = StrSql + "NVL((EQUIP2ARCH8.COST *  PREF.CURR),0) AS ASSETS8, "
                StrSql = StrSql + "NVL((EQUIP2ARCH9.COST *  PREF.CURR),0) AS ASSETS9, "
                StrSql = StrSql + "NVL((EQUIP2ARCH10.COST *  PREF.CURR),0) AS ASSETS10, "
                StrSql = StrSql + "NVL((EQUIP2ARCH11.COST *  PREF.CURR),0) AS ASSETS11, "
                StrSql = StrSql + "NVL((EQUIP2ARCH12.COST *  PREF.CURR),0) AS ASSETS12, "
                StrSql = StrSql + "NVL((EQUIP2ARCH13.COST *  PREF.CURR),0) AS ASSETS13, "
                StrSql = StrSql + "NVL((EQUIP2ARCH14.COST *  PREF.CURR),0) AS ASSETS14, "
                StrSql = StrSql + "NVL((EQUIP2ARCH15.COST *  PREF.CURR),0) AS ASSETS15, "
                StrSql = StrSql + "NVL((EQUIP2ARCH16.COST *  PREF.CURR),0) AS ASSETS16, "
                StrSql = StrSql + "NVL((EQUIP2ARCH17.COST *  PREF.CURR),0) AS ASSETS17, "
                StrSql = StrSql + "NVL((EQUIP2ARCH18.COST *  PREF.CURR),0) AS ASSETS18, "
                StrSql = StrSql + "NVL((EQUIP2ARCH19.COST *  PREF.CURR),0) AS ASSETS19, "
                StrSql = StrSql + "NVL((EQUIP2ARCH20.COST *  PREF.CURR),0) AS ASSETS20, "
                StrSql = StrSql + "NVL((EQUIP2ARCH21.COST *  PREF.CURR),0) AS ASSETS21, "
                StrSql = StrSql + "NVL((EQUIP2ARCH22.COST *  PREF.CURR),0) AS ASSETS22, "
                StrSql = StrSql + "NVL((EQUIP2ARCH23.COST *  PREF.CURR),0) AS ASSETS23, "
                StrSql = StrSql + "NVL((EQUIP2ARCH24.COST *  PREF.CURR),0) AS ASSETS24, "
                StrSql = StrSql + "NVL((EQUIP2ARCH25.COST *  PREF.CURR),0) AS ASSETS25, "
                StrSql = StrSql + "NVL((EQUIP2ARCH26.COST *  PREF.CURR),0) AS ASSETS26, "
                StrSql = StrSql + "NVL((EQUIP2ARCH27.COST *  PREF.CURR),0) AS ASSETS27, "
                StrSql = StrSql + "NVL((EQUIP2ARCH28.COST *  PREF.CURR),0) AS ASSETS28, "
                StrSql = StrSql + "NVL((EQUIP2ARCH29.COST *  PREF.CURR),0) AS ASSETS29, "
                StrSql = StrSql + "NVL((EQUIP2ARCH30.COST *  PREF.CURR),0) AS ASSETS30, "
                StrSql = StrSql + "(EQCOS.M1*  PREF.CURR) AS ASSETP1, "
                StrSql = StrSql + "(EQCOS.M2*  PREF.CURR) AS ASSETP2, "
                StrSql = StrSql + "(EQCOS.M3*  PREF.CURR) AS ASSETP3, "
                StrSql = StrSql + "(EQCOS.M4*  PREF.CURR) AS ASSETP4, "
                StrSql = StrSql + "(EQCOS.M5*  PREF.CURR) AS ASSETP5, "
                StrSql = StrSql + "(EQCOS.M6*  PREF.CURR) AS ASSETP6, "
                StrSql = StrSql + "(EQCOS.M7*  PREF.CURR) AS ASSETP7, "
                StrSql = StrSql + "(EQCOS.M8*  PREF.CURR) AS ASSETP8, "
                StrSql = StrSql + "(EQCOS.M9*  PREF.CURR) AS ASSETP9, "
                StrSql = StrSql + "(EQCOS.M10*  PREF.CURR) AS ASSETP10, "
                StrSql = StrSql + "(EQCOS.M11*  PREF.CURR) AS ASSETP11, "
                StrSql = StrSql + "(EQCOS.M12*  PREF.CURR) AS ASSETP12, "
                StrSql = StrSql + "(EQCOS.M13*  PREF.CURR) AS ASSETP13, "
                StrSql = StrSql + "(EQCOS.M14*  PREF.CURR) AS ASSETP14, "
                StrSql = StrSql + "(EQCOS.M15*  PREF.CURR) AS ASSETP15, "
                StrSql = StrSql + "(EQCOS.M16*  PREF.CURR) AS ASSETP16, "
                StrSql = StrSql + "(EQCOS.M17*  PREF.CURR) AS ASSETP17, "
                StrSql = StrSql + "(EQCOS.M18*  PREF.CURR) AS ASSETP18, "
                StrSql = StrSql + "(EQCOS.M19*  PREF.CURR) AS ASSETP19, "
                StrSql = StrSql + "(EQCOS.M20*  PREF.CURR) AS ASSETP20, "
                StrSql = StrSql + "(EQCOS.M21*  PREF.CURR) AS ASSETP21, "
                StrSql = StrSql + "(EQCOS.M22*  PREF.CURR) AS ASSETP22, "
                StrSql = StrSql + "(EQCOS.M23*  PREF.CURR) AS ASSETP23, "
                StrSql = StrSql + "(EQCOS.M24*  PREF.CURR) AS ASSETP24, "
                StrSql = StrSql + "(EQCOS.M25*  PREF.CURR) AS ASSETP25, "
                StrSql = StrSql + "(EQCOS.M26*  PREF.CURR) AS ASSETP26, "
                StrSql = StrSql + "(EQCOS.M27*  PREF.CURR) AS ASSETP27, "
                StrSql = StrSql + "(EQCOS.M28*  PREF.CURR) AS ASSETP28, "
                StrSql = StrSql + "(EQCOS.M29*  PREF.CURR) AS ASSETP29, "
                StrSql = StrSql + "(EQCOS.M30*  PREF.CURR) AS ASSETP30, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP1.EQUIPID )EQUIPDES1, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP2.EQUIPID )EQUIPDES2, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP3.EQUIPID )EQUIPDES3, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP4.EQUIPID )EQUIPDES4, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP5.EQUIPID )EQUIPDES5, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP6.EQUIPID )EQUIPDES6, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP7.EQUIPID )EQUIPDES7, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP8.EQUIPID )EQUIPDES8, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP9.EQUIPID )EQUIPDES9, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP10.EQUIPID )EQUIPDES10,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP11.EQUIPID )EQUIPDES11, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP12.EQUIPID )EQUIPDES12, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP13.EQUIPID )EQUIPDES13, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP14.EQUIPID )EQUIPDES14,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP15.EQUIPID )EQUIPDES15,"
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP16.EQUIPID )EQUIPDES16, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP17.EQUIPID )EQUIPDES17, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP18.EQUIPID )EQUIPDES18, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP19.EQUIPID )EQUIPDES19, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP20.EQUIPID )EQUIPDES20, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP21.EQUIPID )EQUIPDES21, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP22.EQUIPID )EQUIPDES22, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP23.EQUIPID )EQUIPDES23, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP24.EQUIPID )EQUIPDES24, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP25.EQUIPID )EQUIPDES25, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP26.EQUIPID )EQUIPDES26, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP27.EQUIPID )EQUIPDES27, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP28.EQUIPID )EQUIPDES28, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP29.EQUIPID )EQUIPDES29, "
                StrSql = StrSql + "(SELECT EQUIPDE1||' '||EQUIPDE2 FROM EQUIPMENT2 WHERE EQUIPID=EQUIP30.EQUIPID )EQUIPDES30, "
                StrSql = StrSql + "EQNUM.D1 AS DEPRES1, "
                StrSql = StrSql + "EQNUM.D2 AS DEPRES2, "
                StrSql = StrSql + "EQNUM.D3 AS DEPRES3, "
                StrSql = StrSql + "EQNUM.D4 AS DEPRES4, "
                StrSql = StrSql + "EQNUM.D5 AS DEPRES5, "
                StrSql = StrSql + "EQNUM.D6 AS DEPRES6, "
                StrSql = StrSql + "EQNUM.D7 AS DEPRES7, "
                StrSql = StrSql + "EQNUM.D8 AS DEPRES8, "
                StrSql = StrSql + "EQNUM.D9 AS DEPRES9, "
                StrSql = StrSql + "EQNUM.D10 AS DEPRES10, "
                StrSql = StrSql + "EQNUM.D11 AS DEPRES11, "
                StrSql = StrSql + "EQNUM.D12 AS DEPRES12, "
                StrSql = StrSql + "EQNUM.D13 AS DEPRES13, "
                StrSql = StrSql + "EQNUM.D14 AS DEPRES14, "
                StrSql = StrSql + "EQNUM.D15 AS DEPRES15, "
                StrSql = StrSql + "EQNUM.D16 AS DEPRES16, "
                StrSql = StrSql + "EQNUM.D17 AS DEPRES17, "
                StrSql = StrSql + "EQNUM.D18 AS DEPRES18, "
                StrSql = StrSql + "EQNUM.D19 AS DEPRES19, "
                StrSql = StrSql + "EQNUM.D20 AS DEPRES20, "
                StrSql = StrSql + "EQNUM.D21 AS DEPRES21, "
                StrSql = StrSql + "EQNUM.D22 AS DEPRES22, "
                StrSql = StrSql + "EQNUM.D23 AS DEPRES23, "
                StrSql = StrSql + "EQNUM.D24 AS DEPRES24, "
                StrSql = StrSql + "EQNUM.D25 AS DEPRES25, "
                StrSql = StrSql + "EQNUM.D26 AS DEPRES26, "
                StrSql = StrSql + "EQNUM.D27 AS DEPRES27, "
                StrSql = StrSql + "EQNUM.D28 AS DEPRES28, "
                StrSql = StrSql + "EQNUM.D29 AS DEPRES29, "
                StrSql = StrSql + "EQNUM.D30 AS DEPRES30, "
                StrSql = StrSql + "EQNUM.M1 AS NUM1, "
                StrSql = StrSql + "EQNUM.M2 AS NUM2, "
                StrSql = StrSql + "EQNUM.M3 AS NUM3, "
                StrSql = StrSql + "EQNUM.M4 AS NUM4, "
                StrSql = StrSql + "EQNUM.M5 AS NUM5, "
                StrSql = StrSql + "EQNUM.M6 AS NUM6, "
                StrSql = StrSql + "EQNUM.M7 AS NUM7, "
                StrSql = StrSql + "EQNUM.M8 AS NUM8, "
                StrSql = StrSql + "EQNUM.M9 AS NUM9, "
                StrSql = StrSql + "EQNUM.M10 AS NUM10, "
                StrSql = StrSql + "EQNUM.M11 AS NUM11, "
                StrSql = StrSql + "EQNUM.M12 AS NUM12, "
                StrSql = StrSql + "EQNUM.M13 AS NUM13, "
                StrSql = StrSql + "EQNUM.M14 AS NUM14, "
                StrSql = StrSql + "EQNUM.M15 AS NUM15, "
                StrSql = StrSql + "EQNUM.M16 AS NUM16, "
                StrSql = StrSql + "EQNUM.M17 AS NUM17, "
                StrSql = StrSql + "EQNUM.M18 AS NUM18, "
                StrSql = StrSql + "EQNUM.M19 AS NUM19, "
                StrSql = StrSql + "EQNUM.M20 AS NUM20, "
                StrSql = StrSql + "EQNUM.M21 AS NUM21, "
                StrSql = StrSql + "EQNUM.M22 AS NUM22, "
                StrSql = StrSql + "EQNUM.M23 AS NUM23, "
                StrSql = StrSql + "EQNUM.M24 AS NUM24, "
                StrSql = StrSql + "EQNUM.M25 AS NUM25, "
                StrSql = StrSql + "EQNUM.M26 AS NUM26, "
                StrSql = StrSql + "EQNUM.M27 AS NUM27, "
                StrSql = StrSql + "EQNUM.M28 AS NUM28, "
                StrSql = StrSql + "EQNUM.M29 AS NUM29, "
                StrSql = StrSql + "EQNUM.M30 AS NUM30, "
                'Changes started on 6th april 2017
                StrSql = StrSql + "(RC.ICSE1 *  PREF.CURR) AS ICSE1, "
                StrSql = StrSql + "(RC.ICSE2 *  PREF.CURR) AS ICSE2, "
                StrSql = StrSql + "(RC.ICSE3 *  PREF.CURR) AS ICSE3, "
                StrSql = StrSql + "(RC.ICSE4 *  PREF.CURR) AS ICSE4, "
                StrSql = StrSql + "(RC.ICSE5 *  PREF.CURR) AS ICSE5, "
                StrSql = StrSql + "(RC.ICSE6 *  PREF.CURR) AS ICSE6, "
                StrSql = StrSql + "(RC.ICSE7 *  PREF.CURR) AS ICSE7, "
                StrSql = StrSql + "(RC.ICSE8 *  PREF.CURR) AS ICSE8, "
                StrSql = StrSql + "(RC.ICSE9 *  PREF.CURR) AS ICSE9, "
                StrSql = StrSql + "(RC.ICSE10 *  PREF.CURR) AS ICSE10, "
                StrSql = StrSql + "(RC.ICSE11 *  PREF.CURR) AS ICSE11, "
                StrSql = StrSql + "(RC.ICSE12 *  PREF.CURR) AS ICSE12, "
                StrSql = StrSql + "(RC.ICSE13 *  PREF.CURR) AS ICSE13, "
                StrSql = StrSql + "(RC.ICSE14 *  PREF.CURR) AS ICSE14, "
                StrSql = StrSql + "(RC.ICSE15 *  PREF.CURR) AS ICSE15, "
                StrSql = StrSql + "(RC.ICSE16 *  PREF.CURR) AS ICSE16, "
                StrSql = StrSql + "(RC.ICSE17 *  PREF.CURR) AS ICSE17, "
                StrSql = StrSql + "(RC.ICSE18 *  PREF.CURR) AS ICSE18, "
                StrSql = StrSql + "(RC.ICSE19 *  PREF.CURR) AS ICSE19, "
                StrSql = StrSql + "(RC.ICSE20 *  PREF.CURR) AS ICSE20, "
                StrSql = StrSql + "(RC.ICSE21 *  PREF.CURR) AS ICSE21, "
                StrSql = StrSql + "(RC.ICSE22 *  PREF.CURR) AS ICSE22, "
                StrSql = StrSql + "(RC.ICSE23 *  PREF.CURR) AS ICSE23, "
                StrSql = StrSql + "(RC.ICSE24 *  PREF.CURR) AS ICSE24, "
                StrSql = StrSql + "(RC.ICSE25 *  PREF.CURR) AS ICSE25, "
                StrSql = StrSql + "(RC.ICSE26 *  PREF.CURR) AS ICSE26, "
                StrSql = StrSql + "(RC.ICSE27 *  PREF.CURR) AS ICSE27, "
                StrSql = StrSql + "(RC.ICSE28 *  PREF.CURR) AS ICSE28, "
                StrSql = StrSql + "(RC.ICSE29 *  PREF.CURR) AS ICSE29, "
                StrSql = StrSql + "(RC.ICSE30 *  PREF.CURR) AS ICSE30, "

                StrSql = StrSql + "(RC.DCSE1 *  PREF.CURR) AS DCSE1, "
                StrSql = StrSql + "(RC.DCSE2 *  PREF.CURR) AS DCSE2, "
                StrSql = StrSql + "(RC.DCSE3 *  PREF.CURR) AS DCSE3, "
                StrSql = StrSql + "(RC.DCSE4 *  PREF.CURR) AS DCSE4, "
                StrSql = StrSql + "(RC.DCSE5 *  PREF.CURR) AS DCSE5, "
                StrSql = StrSql + "(RC.DCSE6 *  PREF.CURR) AS DCSE6, "
                StrSql = StrSql + "(RC.DCSE7 *  PREF.CURR) AS DCSE7, "
                StrSql = StrSql + "(RC.DCSE8 *  PREF.CURR) AS DCSE8, "
                StrSql = StrSql + "(RC.DCSE9 *  PREF.CURR) AS DCSE9, "
                StrSql = StrSql + "(RC.DCSE10 *  PREF.CURR) AS DCSE10, "
                StrSql = StrSql + "(RC.DCSE11 *  PREF.CURR) AS DCSE11, "
                StrSql = StrSql + "(RC.DCSE12 *  PREF.CURR) AS DCSE12, "
                StrSql = StrSql + "(RC.DCSE13 *  PREF.CURR) AS DCSE13, "
                StrSql = StrSql + "(RC.DCSE14 *  PREF.CURR) AS DCSE14, "
                StrSql = StrSql + "(RC.DCSE15 *  PREF.CURR) AS DCSE15, "
                StrSql = StrSql + "(RC.DCSE16 *  PREF.CURR) AS DCSE16, "
                StrSql = StrSql + "(RC.DCSE17 *  PREF.CURR) AS DCSE17, "
                StrSql = StrSql + "(RC.DCSE18 *  PREF.CURR) AS DCSE18, "
                StrSql = StrSql + "(RC.DCSE19 *  PREF.CURR) AS DCSE19, "
                StrSql = StrSql + "(RC.DCSE20 *  PREF.CURR) AS DCSE20, "
                StrSql = StrSql + "(RC.DCSE21 *  PREF.CURR) AS DCSE21, "
                StrSql = StrSql + "(RC.DCSE22 *  PREF.CURR) AS DCSE22, "
                StrSql = StrSql + "(RC.DCSE23 *  PREF.CURR) AS DCSE23, "
                StrSql = StrSql + "(RC.DCSE24 *  PREF.CURR) AS DCSE24, "
                StrSql = StrSql + "(RC.DCSE25 *  PREF.CURR) AS DCSE25, "
                StrSql = StrSql + "(RC.DCSE26 *  PREF.CURR) AS DCSE26, "
                StrSql = StrSql + "(RC.DCSE27 *  PREF.CURR) AS DCSE27, "
                StrSql = StrSql + "(RC.DCSE28 *  PREF.CURR) AS DCSE28, "
                StrSql = StrSql + "(RC.DCSE29 *  PREF.CURR) AS DCSE29, "
                StrSql = StrSql + "(RC.DCSE30 *  PREF.CURR) AS DCSE30, "

                StrSql = StrSql + "(RC.INVESTTOTALSE *  PREF.CURR) AS INVESTTOTALSE, "
                StrSql = StrSql + "(RC.DEPRETOTALSE *  PREF.CURR) AS DEPRETOTALSE "
                'changes ended on 6th april 2017

                StrSql = StrSql + "FROM EQUIPMENT2TYPE EQUIP "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP1 "
                StrSql = StrSql + "ON EQUIP1.EQUIPID=EQUIP.M1 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP2 "
                StrSql = StrSql + "ON EQUIP2.EQUIPID=EQUIP.M2 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP3 "
                StrSql = StrSql + "ON EQUIP3.EQUIPID=EQUIP.M3 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP4 "
                StrSql = StrSql + "ON EQUIP4.EQUIPID=EQUIP.M4 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP5 "
                StrSql = StrSql + "ON EQUIP5.EQUIPID=EQUIP.M5 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP6 "
                StrSql = StrSql + "ON EQUIP6.EQUIPID=EQUIP.M6 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP7 "
                StrSql = StrSql + "ON EQUIP7.EQUIPID=EQUIP.M7 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP8 "
                StrSql = StrSql + "ON EQUIP8.EQUIPID=EQUIP.M8 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP9 "
                StrSql = StrSql + "ON EQUIP9.EQUIPID=EQUIP.M9 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP10 "
                StrSql = StrSql + "ON EQUIP10.EQUIPID=EQUIP.M10 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP11 "
                StrSql = StrSql + "ON EQUIP11.EQUIPID=EQUIP.M11 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP12 "
                StrSql = StrSql + "ON EQUIP12.EQUIPID=EQUIP.M12 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP13 "
                StrSql = StrSql + "ON EQUIP13.EQUIPID=EQUIP.M13 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP14 "
                StrSql = StrSql + "ON EQUIP14.EQUIPID=EQUIP.M14 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP15 "
                StrSql = StrSql + "ON EQUIP15.EQUIPID=EQUIP.M15 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP16 "
                StrSql = StrSql + "ON EQUIP16.EQUIPID=EQUIP.M16 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP17 "
                StrSql = StrSql + "ON EQUIP17.EQUIPID=EQUIP.M17 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP18 "
                StrSql = StrSql + "ON EQUIP18.EQUIPID=EQUIP.M18 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP19 "
                StrSql = StrSql + "ON EQUIP19.EQUIPID=EQUIP.M19 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP20 "
                StrSql = StrSql + "ON EQUIP20.EQUIPID=EQUIP.M20 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP21 "
                StrSql = StrSql + "ON EQUIP21.EQUIPID=EQUIP.M21 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP22 "
                StrSql = StrSql + "ON EQUIP22.EQUIPID=EQUIP.M22 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP23 "
                StrSql = StrSql + "ON EQUIP23.EQUIPID=EQUIP.M23 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP24 "
                StrSql = StrSql + "ON EQUIP24.EQUIPID=EQUIP.M24 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP25 "
                StrSql = StrSql + "ON EQUIP25.EQUIPID=EQUIP.M25 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP26 "
                StrSql = StrSql + "ON EQUIP26.EQUIPID=EQUIP.M26 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP27 "
                StrSql = StrSql + "ON EQUIP27.EQUIPID=EQUIP.M27 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP28 "
                StrSql = StrSql + "ON EQUIP28.EQUIPID=EQUIP.M28 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP29 "
                StrSql = StrSql + "ON EQUIP29.EQUIPID=EQUIP.M29 "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2  EQUIP30 "
                StrSql = StrSql + "ON EQUIP30.EQUIPID=EQUIP.M30 "
                StrSql = StrSql + "INNER JOIN PREFERENCES  PREF ON "
                StrSql = StrSql + "PREF.CASEID = EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2COST EQCOS "
                StrSql = StrSql + "ON EQCOS.CASEID=EQUIP.CASEID "
                StrSql = StrSql + "INNER JOIN EQUIPMENT2NUMBER EQNUM "
                StrSql = StrSql + "ON EQNUM.CASEID=EQUIP.CASEID "
                'changes started on 6th april 2017
                StrSql = StrSql + "INNER JOIN RESULTSCOST2 RC "
                StrSql = StrSql + "ON RC.CASEID=EQUIP.CASEID "
                'changes ended on 6th april 2017

                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH1 "
                StrSql = StrSql + "ON EQUIP2ARCH1.EQUIPID=EQUIP.M1 AND EQUIP2ARCH1.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH1.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH2 "
                StrSql = StrSql + "ON EQUIP2ARCH2.EQUIPID=EQUIP.M2 AND EQUIP2ARCH2.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH2.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH3 "
                StrSql = StrSql + "ON EQUIP2ARCH3.EQUIPID=EQUIP.M3 AND EQUIP2ARCH3.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH3.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH4 "
                StrSql = StrSql + "ON EQUIP2ARCH4.EQUIPID=EQUIP.M4 AND EQUIP2ARCH4.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH4.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH5 "
                StrSql = StrSql + "ON EQUIP2ARCH5.EQUIPID=EQUIP.M5 AND EQUIP2ARCH5.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH5.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH6 "
                StrSql = StrSql + "ON EQUIP2ARCH6.EQUIPID=EQUIP.M6 AND EQUIP2ARCH6.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH6.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH7 "
                StrSql = StrSql + "ON EQUIP2ARCH7.EQUIPID=EQUIP.M7 AND EQUIP2ARCH7.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH7.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH8 "
                StrSql = StrSql + "ON EQUIP2ARCH8.EQUIPID=EQUIP.M8 AND EQUIP2ARCH8.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH8.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH9 "
                StrSql = StrSql + "ON EQUIP2ARCH9.EQUIPID=EQUIP.M9 AND EQUIP2ARCH9.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH9.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH10 "
                StrSql = StrSql + "ON EQUIP2ARCH10.EQUIPID=EQUIP.M10 AND EQUIP2ARCH10.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH10.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH11 "
                StrSql = StrSql + "ON EQUIP2ARCH11.EQUIPID=EQUIP.M11 AND EQUIP2ARCH11.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH11.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH12 "
                StrSql = StrSql + "ON EQUIP2ARCH12.EQUIPID=EQUIP.M12 AND EQUIP2ARCH12.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH12.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH13 "
                StrSql = StrSql + "ON EQUIP2ARCH13.EQUIPID=EQUIP.M13 AND EQUIP2ARCH13.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH13.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH14 "
                StrSql = StrSql + "ON EQUIP2ARCH14.EQUIPID=EQUIP.M14 AND EQUIP2ARCH14.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH14.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH15 "
                StrSql = StrSql + "ON EQUIP2ARCH15.EQUIPID=EQUIP.M15 AND EQUIP2ARCH15.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH15.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH16 "
                StrSql = StrSql + "ON EQUIP2ARCH16.EQUIPID=EQUIP.M16 AND EQUIP2ARCH16.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH16.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH17 "
                StrSql = StrSql + "ON EQUIP2ARCH17.EQUIPID=EQUIP.M17 AND EQUIP2ARCH17.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH17.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH18 "
                StrSql = StrSql + "ON EQUIP2ARCH18.EQUIPID=EQUIP.M18 AND EQUIP2ARCH18.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH18.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH19 "
                StrSql = StrSql + "ON EQUIP2ARCH19.EQUIPID=EQUIP.M19 AND EQUIP2ARCH19.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH19.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH20 "
                StrSql = StrSql + "ON EQUIP2ARCH20.EQUIPID=EQUIP.M20 AND EQUIP2ARCH20.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH20.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH21 "
                StrSql = StrSql + "ON EQUIP2ARCH21.EQUIPID=EQUIP.M21 AND EQUIP2ARCH21.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH21.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH22 "
                StrSql = StrSql + "ON EQUIP2ARCH22.EQUIPID=EQUIP.M22 AND EQUIP2ARCH22.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH22.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH23 "
                StrSql = StrSql + "ON EQUIP2ARCH23.EQUIPID=EQUIP.M23 AND EQUIP2ARCH23.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH23.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH24 "
                StrSql = StrSql + "ON EQUIP2ARCH24.EQUIPID=EQUIP.M24 AND EQUIP2ARCH24.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH24.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH25 "
                StrSql = StrSql + "ON EQUIP2ARCH25.EQUIPID=EQUIP.M25 AND EQUIP2ARCH25.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH25.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH26 "
                StrSql = StrSql + "ON EQUIP2ARCH26.EQUIPID=EQUIP.M26 AND EQUIP2ARCH26.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH26.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH27 "
                StrSql = StrSql + "ON EQUIP2ARCH27.EQUIPID=EQUIP.M27 AND EQUIP2ARCH27.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH27.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH28 "
                StrSql = StrSql + "ON EQUIP2ARCH28.EQUIPID=EQUIP.M28 AND EQUIP2ARCH28.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH28.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH29 "
                StrSql = StrSql + "ON EQUIP2ARCH29.EQUIPID=EQUIP.M29 AND EQUIP2ARCH29.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH29.EFFDATE =PREF.EFFDATE "
                StrSql = StrSql + "LEFT OUTER JOIN EQUIP2ARCH  EQUIP2ARCH30 "
                StrSql = StrSql + "ON EQUIP2ARCH30.EQUIPID=EQUIP.M30 AND EQUIP2ARCH30.COUNTRYID=PREF.OCOUNTRY AND EQUIP2ARCH30.EFFDATE =PREF.EFFDATE "

                StrSql = StrSql + "WHERE EQUIP.CASEID=" + CaseId.ToString() + ""

                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetAssetS:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Users Material Name"

        Public Function GetEditMaterial(ByVal CaseId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,MATID,REPLACE(MATDES,'''','&#')MATDES "
                strSql = strSql + "FROM USERSMATERIAL WHERE CASEID=" + CaseId

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPopupMaterials(ByVal MatId As Integer, ByVal MatDe1 As String, ByVal MatDe2 As String, ByVal CaseId As String) As DataSet
            Dim Dts As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try

                'StrSql = "SELECT MATERIALS.MATID, (MATDE1||'  '||MATDE2)MATDES,MATDE1,MATDE2,GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MATERIALS.SG  "
                'StrSql = StrSql + "FROM MATERIALS "
                'StrSql = StrSql + "INNER JOIN MATGRADE MG ON MG.MATID=MATERIALS.MATID  "
                'StrSql = StrSql + "INNER JOIN GRADE ON GRADE.GRADEID=MG.GRADEID AND GRADE.ISDEFAULT='Y' "
                'StrSql = StrSql + "WHERE MATERIALS.MATID = CASE WHEN " + MatId.ToString() + " = -1 THEN "
                'StrSql = StrSql + "MATERIALS.MATID "
                'StrSql = StrSql + "ELSE "
                'StrSql = StrSql + "" + MatId.ToString() + " "
                'StrSql = StrSql + "END "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE2),'#') LIKE '" + MatDe2.ToUpper() + "%' "
                'StrSql = StrSql + "UNION ALL SELECT MATID,MATDES,MATDE1,MATDE2,GRADENAME,GRADEID,WEIGHT,SG FROM "
                'StrSql = StrSql + "(SELECT MATERIALS.MATID, (MATDE1||'  '||MATDE2)MATDES,MATDE1,MATDE2,GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MATERIALS.SG  "
                'StrSql = StrSql + "FROM MATERIALS "
                'StrSql = StrSql + "INNER JOIN MATGRADE MG ON MG.MATID=MATERIALS.MATID  "
                'StrSql = StrSql + "INNER JOIN GRADE ON GRADE.GRADEID=MG.GRADEID AND GRADE.ISDEFAULT='Y' "
                'StrSql = StrSql + "WHERE MATERIALS.MATID <> " + MatId.ToString() + " "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                'StrSql = StrSql + "AND NVL(UPPER(MATDE2),'#') LIKE '" + MatDe2.ToUpper() + "%' "
                'StrSql = StrSql + "ORDER BY  MATDE1)"
                StrSql = "SELECT DISTINCT MAT.MATID, (MAT.MATDE1||'  '||MAT.MATDE2)MATDES,MAT.MATDE1,MAT.MATDE2,B.MATDE3,B.MATDES3,GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MAT.SG   "
                StrSql = StrSql + "FROM MATERIALS MAT "
                StrSql = StrSql + "LEFT JOIN (SELECT MATERIALS.MATID, (MATDE1||'  '||MATDE2)MATDES,MATDE1,MATDE2,MATDES MATDE3,REPLACE(MATDES,'''','&#')MATDES3,GRADE.GRADENAME,GRADE.GRADEID,GRADE.WEIGHT,MATERIALS.SG  "
                StrSql = StrSql + "FROM(MATERIALS)"
                StrSql = StrSql + " INNER JOIN MATGRADE MG ON MG.MATID=MATERIALS.MATID  "
                StrSql = StrSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID=MATERIALS.MATID  "
                StrSql = StrSql + "INNER JOIN GRADE ON GRADE.GRADEID=MG.GRADEID AND GRADE.ISDEFAULT='Y' "
                StrSql = StrSql + "WHERE MATERIALS.MATID = CASE WHEN " + MatId.ToString() + "  = -1 THEN "
                StrSql = StrSql + "MATERIALS.MATID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + MatId.ToString() + " "
                StrSql = StrSql + "  End "
                StrSql = StrSql + "AND UM.CASEID=" + CaseId + ")B ON B.MATID=MAT.MATID "
                StrSql = StrSql + "INNER JOIN MATGRADE MG ON MG.MATID=MAT.MATID  "
                StrSql = StrSql + "INNER JOIN GRADE ON GRADE.GRADEID=MG.GRADEID AND GRADE.ISDEFAULT='Y' "
                StrSql = StrSql + "WHERE MAT.MATID = CASE WHEN " + MatId.ToString() + "  = -1 THEN "
                StrSql = StrSql + "MAT.MATID "
                StrSql = StrSql + "ELSE "
                StrSql = StrSql + "" + MatId.ToString() + " "
                StrSql = StrSql + "End "
                StrSql = StrSql + "AND NVL(UPPER(MAT.MATDE1),'#') LIKE '" + MatDe1.ToUpper() + "%' "
                StrSql = StrSql + "AND NVL(UPPER(MAT.MATDE2),'#') LIKE '" + MatDe2.ToUpper() + "%' "
                StrSql = StrSql + "ORDER BY  MATDE1 "
                Dts = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Dts
            Catch ex As Exception
                Throw New Exception("E1GetData:GetExtrusionDetails:" + ex.Message.ToString())
                Return Dts
            End Try
        End Function
#End Region

#Region "Wizard Info"
        Public Function GetMatPriceInfo(ByVal MatId As String, ByVal caseId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,CASEDES,CREATIONDATE,MATLAYER,EFFDATE,PREFPRICE,SUGGPRICE,MATDES FROM "
                strSql = strSql + "(SELECT CASEID,TO_CHAR(CREATIONDATE,'MON DD, YYYY') CREATIONDATE,CASEDES,MATLAYER,TO_CHAR(EFFDATE,'MON DD, YYYY') EFFDATE,PREFPRICE,SUGGPRICE,MATDES FROM "
                strSql = strSql + "(SELECT MI.CASEID, (PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,1 MATLAYER,MI.EFFDATE,S1 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M1 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M1 WHERE M1=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M1 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M1=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseid + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,2 MATLAYER,MI.EFFDATE,S2 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M2 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M2 WHERE M2=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M2 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M2=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,3 MATLAYER,MI.EFFDATE,S3 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M3 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M3 WHERE M3=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M3 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M3=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,4 MATLAYER,MI.EFFDATE,S4 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M4 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M4 WHERE M4=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M4 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M4=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,5 MATLAYER,MI.EFFDATE,S5 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M5 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M5 WHERE M5=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M5 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M5=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,6 MATLAYER,MI.EFFDATE,S6 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M6 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M6 WHERE M6=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M6 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M6=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,7 MATLAYER,MI.EFFDATE,S7 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M7 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M7 WHERE M7=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M7 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M7=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,8 MATLAYER,MI.EFFDATE,S8 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M8 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M8 WHERE M8=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M8 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M8=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,9 MATLAYER,MI.EFFDATE,S9 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M9 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC ON PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M9 WHERE M9=" + MatId + " "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M9 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M9=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ") "
                strSql = strSql + "UNION "
                strSql = strSql + "Select MI.CASEID,(PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE,10 MATLAYER,MI.EFFDATE,S10 PREFPRICE,MA.PRICE SUGGPRICE,UM.MATDES FROM MATERIALINPUT MI "
                strSql = strSql + "LEFT JOIN USERSMATERIAL UM ON UM.MATID= MI.M10 AND UM.CASEID=MI.CASEID "
                strSql = strSql + "INNER Join PERMISSIONSCASES PC On PC.CASEID =MI.CASEID "
                'strSql = strSql + "INNER Join MATERIALSARCH MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M10 WHERE M10=" + MatId + ") "
                strSql = strSql + "INNER Join MATERIALSARCHNEW MA ON MA.EFFDATE=MI.EFFDATE And MA.MATID =MI.M10 INNER JOIN PREFERENCES C ON  C.OCOUNTRY =MA.COUNTRYID AND C.CASEID=MI.CASEID WHERE M10=" + MatId + " AND C.OCOUNTRY = (SELECT OCOUNTRY FROM PREFERENCES WHERE CASEID = " + caseId + ")) "
                strSql = strSql + "WHERE CASEID > 1000"
                strSql = strSql + "ORDER BY CASEID DESC, MATLAYER ASC) PRICEINFO "
                strSql = strSql + "WHERE ROWNUM <= 20 ORDER BY CASEID DESC "

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMatPriceInfo:" + ex.Message.ToString())
                Return ds
            End Try
        End Function


        Public Function GetDownTimeInfo(ByVal EquipId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT CASEID,CASEDES,CREATIONDATE,MATLAYER,DTVAL,OPINSTR,UNITS,INSTR,OWASTE,WASTE FROM "
                strSql = strSql + "(SELECT CASEID,TO_CHAR(CREATIONDATE,'MON DD, YYYY') CREATIONDATE,CASEDES,MATLAYER,DTVAL,OPINSTR,UNITS,INSTR,OWASTE,WASTE FROM ( "
                For i = 1 To 30
                    If i <> 1 Then
                        strSql = strSql + "UNION "
                    End If
                    strSql = strSql + "SELECT ET.CASEID, (PC.CASEDE1|| ' '||PC.CASEDE2)CASEDES,PC.CREATIONDATE," + i.ToString() + " MATLAYER,"
                    strSql = strSql + "DT.M" + i.ToString() + " AS DTVAL,"
                    strSql = strSql + "(CASE WHEN EQUIP.UNITS='fpm' THEN (OPGSR.M" + i.ToString() + "*PREF.convthick2) "
                    strSql = strSql + "ELSE OPGSR.M" + i.ToString() + " END) AS OPINSTR,"
                    strSql = strSql + "CASE PREF.UNITS  WHEN 0 THEN EQUIP.UNITS  ELSE EQUIP.UNITS2 END AS UNITS,"
                    strSql = strSql + "(OH.M1 * PREF.CONVWT) AS INSTR,OPWASTE.M" + i.ToString() + " AS OWASTE,"
                    strSql = strSql + "OPWASTE.W" + i.ToString() + " AS WASTE FROM OPDOWNTIME DT "
                    strSql = strSql + "INNER JOIN PERMISSIONSCASES PC ON PC.CASEID =DT.CASEID INNER JOIN EQUIPMENTTYPE ET ON ET.CASEID=DT.CASEID "
                    strSql = strSql + "INNER JOIN OPINSTGRSRATE OPGSR ON OPGSR.CASEID=ET.CASEID INNER JOIN EQUIPMENT EQUIP ON EQUIP.EQUIPID=ET.M" + i.ToString() + " "
                    strSql = strSql + "INNER JOIN PREFERENCES PREF ON PREF.CASEID=ET.CASEID INNER JOIN OPLBSPERHOUR OH ON OH.CASEID=ET.CASEID "
                    strSql = strSql + "INNER JOIN OPWASTE ON OPWASTE.CASEID=ET.CASEID WHERE ET.M" + i.ToString() + "=" + EquipId + " "
                Next
                strSql = strSql + ") WHERE CASEID > 1000"
                strSql = strSql + "ORDER BY CASEID DESC, MATLAYER ASC) PRICEINFO "
                strSql = strSql + "WHERE ROWNUM <= 20 ORDER BY CASEID DESC "

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetDownTimeInfo:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
#End Region

#Region "Material Assistant Info"
        Public Function GetMatArch(ByVal MatId As String, ByVal CaseId As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                'strSql = "SELECT MATID,PRICE,MA.EFFDATE FROM MATERIALSARCH MA INNER JOIN PREFERENCES PREF ON PREF.EFFDATE=MA.EFFDATE "
                strSql = "SELECT MATID,PRICE,MA.EFFDATE FROM MATERIALSARCHNEW MA INNER JOIN PREFERENCES PREF ON PREF.EFFDATE=MA.EFFDATE AND PREF.OCOUNTRY=MA.COUNTRYID "
                strSql = strSql + "WHERE MATID=" + MatId + " AND CASEID=" + CaseId + " ORDER BY EFFDATE DESC"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetMatArch:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetThickAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTTHICKID,BASEBOXNO,ADJUSTVAL,ISDEFAULT FROM ASSISTTHICK "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTHICKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetThickAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetCoatAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTCOATID,D1,D2,ADJUSTVAL,ISDEFAULT,MATID FROM ASSISTCOAT "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTCOATID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCoatAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetOrderAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTORDERQID,ORDERQ,BASEBOXNO,ISDEFAULT FROM ASSISTORDERQ "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTORDERQID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetOrderAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetCoilWAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTCOILWID,COILWT,BASEBOXNO,ISDEFAULT FROM ASSISTCOILW "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTCOILWID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCoilWAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetQualityAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTQUALITYID,QUALITY,BASEBOXNO,ISDEFAULT FROM ASSISTQUALITY "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTQUALITYID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetQualityAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetCoilWdAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTCOILWID,COILWIDTH,BASEBOXNO,ISDEFAULT FROM ASSISTCOILWD "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTCOILWID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetCoilWdAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetGeneralAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTGENERALID,GENERAL,BASEBOXNO,ISDEFAULT FROM ASSISTGENERAL "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTGENERALID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetGeneralAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetTrimTolAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTTRIMTID,TRIMTOL,BASEBOXNO,ISDEFAULT FROM ASSISTTRIMT "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTTRIMTID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetTrimTolAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPackAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTPACKID,PACKDES,DOLPERCOIL,ISDEFAULT FROM ASSISTPACK "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTPACKID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetPackagingAssist(ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ASSISTPACKAGINGID,PACKDES,DOLPERBBOX,ISDEFAULT FROM ASSISTPACKAGING "
                strSql = strSql + "WHERE EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY') ORDER BY ASSISTPACKAGINGID"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetPackagingAssist:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetSteelCaseDetails(ByVal CaseId As String, ByVal MatId As String, ByVal EffDate As String) As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT ACDETAILSID,CASEID,MATID,EFFDATE,STEELCASEDETAILSID,COMPONENTID,SELVALUE FROM ASSISTCASEDETAILS AC "
                strSql = strSql + "INNER JOIN STEELCASEDETAILS SC ON SC.VALUEID=AC.VALUEID "
                strSql = strSql + "WHERE CASEID=" + CaseId + " AND MATID=" + MatId + " AND EFFDATE=TO_DATE('" + EffDate + "','MM/DD/YYYY')"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetSteelCaseDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function

        Public Function GetEffDateDetails() As DataSet
            Dim ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim strSql As String = ""
            Try

                strSql = "SELECT DISTINCT TO_CHAR(EFFDATE,'MM/DD/YYYY')EFFDATE FROM ASSISTTHICK ORDER BY EFFDATE DESC"

                ds = odbUtil.FillDataSet(strSql, EconConnection)
                Return ds
            Catch ex As Exception
                Throw New Exception("E1GetData:GetEffDateDetails:" + ex.Message.ToString())
                Return ds
            End Try
        End Function
#End Region

#Region "Bulk Model Tool"

        Public Function GetGroupsName(ByVal USERID As String, ByVal GroupId As String, ByVal Type As String) As DataSet
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                If Type = "GroupDesc" Then
                    StrSql = "SELECT USERID,GROUPID,DES1,DES2,CREATIONDATE,UPDATEDATE "
                    StrSql = StrSql + "FROM GROUPS "
                    StrSql = StrSql + "WHERE GROUPID=" + GroupId + " AND USERID=" + USERID
                Else
                    StrSql = "SELECT USERID,GROUPID,DES1,DES2,CREATIONDATE,UPDATEDATE "
                    StrSql = StrSql + "FROM GROUPS "
                    StrSql = StrSql + "WHERE USERID=" + USERID + ""
                End If
                Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw New Exception("GetData:GetGroupsName:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function

        Public Function GetGroupCasesBMM_Old(ByVal GroupId As String, ByVal USERID As String) As DataSet
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Try
                If GroupId = "0" Then
                    Dim StrSql As String = String.Empty
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,GC.GROUPID,  "
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE,"
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + "FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "LEFT JOIN GROUPCASES GC ON GC.CASEID=PR.CASEID  "
                    StrSql = StrSql + "WHERE GC.GROUPID IN (SELECT GROUPID FROM GROUPS WHERE USERID=" + USERID + ") AND PR.USERID=" + USERID
                    Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                ElseIf GroupId = "-1" Then
                    Dim StrSql As String = String.Empty
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,"
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE,"
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + " FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "WHERE PR.USERID=" + USERID + ""
                    Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                Else
                    Dim StrSql As String = String.Empty
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,GC.GROUPID,"
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE,"
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + " FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "LEFT JOIN GROUPCASES GC ON GC.CASEID=PR.CASEID  "
                    StrSql = StrSql + "WHERE  GC.GROUPID=" + GroupId + " AND PR.USERID=" + USERID
                    Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                End If
                Return Ds
            Catch ex As Exception
                Throw New Exception("GetData:GetGroupCasesBMM:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function

        Public Function GetGroupCasesBMM(ByVal GroupId As String, ByVal USERID As String) As DataSet
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Dim StrSql As String = String.Empty
            Try
                If GroupId = "0" Then
                    'Add Group Request_PK
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,GRPS.GROUPID,GRPS.DES1,  "
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE, "
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + "FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "LEFT OUTER JOIN ( "
                    StrSql = StrSql + "SELECT GROUPS.GROUPID,GROUPS.DES1,GROUPCASES.CASEID ,GROUPS.USERID "
                    StrSql = StrSql + "FROM GROUPS "
                    StrSql = StrSql + "INNER JOIN GROUPCASES ON GROUPS.GROUPID=GROUPCASES.GROUPID "
                    StrSql = StrSql + "INNER JOIN ECON.USERS ON USERS.USERID=GROUPS.USERID "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PRR ON PRR.CASEID=GROUPCASES.CASEID AND PRR.USERID=USERS.USERID "
                    StrSql = StrSql + ") GRPS ON GRPS.CASEID=PR.CASEID AND GRPS.USERID=USR.USERID "
                    StrSql = StrSql + "WHERE GRPS.GROUPID IN (SELECT GROUPID FROM GROUPS WHERE USERID=" + USERID + ") AND PR.USERID=" + USERID
                    'End
                ElseIf GroupId = "-1" Then
                    'Add Group Request_PK
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,GRPS.GROUPID,GRPS.DES1,  "
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE, "
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + "FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "LEFT OUTER JOIN ( "
                    StrSql = StrSql + "SELECT GROUPS.GROUPID,GROUPS.DES1,GROUPCASES.CASEID ,GROUPS.USERID "
                    StrSql = StrSql + "FROM GROUPS "
                    StrSql = StrSql + "INNER JOIN GROUPCASES ON GROUPS.GROUPID=GROUPCASES.GROUPID "
                    StrSql = StrSql + "INNER JOIN ECON.USERS ON USERS.USERID=GROUPS.USERID "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PRR ON PRR.CASEID=GROUPCASES.CASEID AND PRR.USERID=USERS.USERID "
                    StrSql = StrSql + ") GRPS ON GRPS.CASEID=PR.CASEID AND GRPS.USERID=USR.USERID "
                    StrSql = StrSql + "WHERE PR.USERID=" + USERID + ""
                    'end
                Else
                    'Add Group Request_PK
                    StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,PR.CASEDE1,PR.CASEDE3,GRPS.GROUPID,GRPS.DES1,  "
                    StrSql = StrSql + "TO_CHAR(PR.CREATIONDATE,'Mon/DD/YYYY HH:MI:SS AM')CREATIONDATE,PR.CREATIONDATE CDATE, "
                    StrSql = StrSql + "TO_CHAR(PR.SERVERDATE,'Mon/DD/YYYY HH:MI:SS AM')SERVERDATE,PR.SERVERDATE SDATE "
                    StrSql = StrSql + "FROM PERMISSIONSCASES PR "
                    StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                    StrSql = StrSql + "LEFT OUTER JOIN "
                    StrSql = StrSql + "( "
                    StrSql = StrSql + "SELECT GROUPS.GROUPID,GROUPS.DES1,GROUPCASES.CASEID ,GROUPS.USERID "
                    StrSql = StrSql + "FROM GROUPS "
                    StrSql = StrSql + "INNER JOIN GROUPCASES ON GROUPS.GROUPID=GROUPCASES.GROUPID "
                    StrSql = StrSql + "INNER JOIN ECON.USERS ON USERS.USERID=GROUPS.USERID "
                    StrSql = StrSql + "INNER JOIN PERMISSIONSCASES PRR ON PRR.CASEID=GROUPCASES.CASEID AND PRR.USERID=USERS.USERID "
                    StrSql = StrSql + ") GRPS ON GRPS.CASEID=PR.CASEID AND GRPS.USERID=USR.USERID "
                    StrSql = StrSql + "WHERE GRPS.GROUPID=" + GroupId + " AND PR.USERID=" + USERID
                    'End
                End If
                Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw New Exception("GetData:GetGroupCasesBMM:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function

        Public Function GetAllCases(ByVal USERID As String) As DataSet
            Dim Ds As New DataSet()
            Dim odbUtil As New DBUtil()
            Try
                Dim StrSql As String = String.Empty
                StrSql = "SELECT USR.USERNAME,PR.USERID,PR.CASEID,CASEDE1,CASEDE3,CREATIONDATE,SERVERDATE,GC.GROUPID  "
                StrSql = StrSql + " FROM PERMISSIONSCASES PR "
                StrSql = StrSql + "INNER JOIN ECON.USERS USR ON USR.USERID=PR.USERID "
                StrSql = StrSql + "INNER JOIN PRODUCTFORMATIN ON PRODUCTFORMATIN.CASEID=PR.CASEID "
                StrSql = StrSql + "LEFT JOIN GROUPCASES GC ON GC.CASEID=PR.CASEID  "
                StrSql = StrSql + "WHERE PR.USERID='" + USERID + "'"
                'StrSql = StrSql + "AND (UPPER(USR.USERNAME) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                'StrSql = StrSql + "OR UPPER(CASEDE1) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                'StrSql = StrSql + "OR UPPER(CASEDE3) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                'StrSql = StrSql + "OR UPPER(PR.CASEID) LIKE '%" + keyWord.ToUpper().Trim() + "%' "
                'StrSql = StrSql + ") "
                Ds = odbUtil.FillDataSet(StrSql, EconConnection)
                Return Ds
            Catch ex As Exception
                Throw New Exception("GetData:GetAllCases:" + ex.Message.ToString())
                Return Ds
            End Try
        End Function

#End Region


    End Class
End Class
